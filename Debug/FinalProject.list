
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aba4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000980  0800ad64  0800ad64  0001ad64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6e4  0800b6e4  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6e4  0800b6e4  0001b6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6ec  0800b6ec  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6ec  0800b6ec  0001b6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6f0  0800b6f0  0001b6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  0800b6f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001360  20000138  0800b82c  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001498  0800b82c  00021498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   000287e3  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d44  00000000  00000000  0004894b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e18  00000000  00000000  0004d690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c18  00000000  00000000  0004f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fb68  00000000  00000000  000510c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023716  00000000  00000000  00080c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00121261  00000000  00000000  000a433e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001c559f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082f8  00000000  00000000  001c5664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000000fa  00000000  00000000  001cd95c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000138 	.word	0x20000138
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ad4c 	.word	0x0800ad4c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000013c 	.word	0x2000013c
 80001fc:	0800ad4c 	.word	0x0800ad4c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 b974 	b.w	8000ddc <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468e      	mov	lr, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14d      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	d969      	bls.n	8000bf4 <__udivmoddi4+0xe8>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b152      	cbz	r2, 8000b3c <__udivmoddi4+0x30>
 8000b26:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2a:	f1c2 0120 	rsb	r1, r2, #32
 8000b2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b36:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3a:	4094      	lsls	r4, r2
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	0c21      	lsrs	r1, r4, #16
 8000b42:	fbbe f6f8 	udiv	r6, lr, r8
 8000b46:	fa1f f78c 	uxth.w	r7, ip
 8000b4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b52:	fb06 f107 	mul.w	r1, r6, r7
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b62:	f080 811f 	bcs.w	8000da4 <__udivmoddi4+0x298>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 811c 	bls.w	8000da4 <__udivmoddi4+0x298>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 f707 	mul.w	r7, r0, r7
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x92>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b90:	f080 810a 	bcs.w	8000da8 <__udivmoddi4+0x29c>
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	f240 8107 	bls.w	8000da8 <__udivmoddi4+0x29c>
 8000b9a:	4464      	add	r4, ip
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	1be4      	subs	r4, r4, r7
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa4>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xc2>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	f000 80ef 	beq.w	8000d9e <__udivmoddi4+0x292>
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f683 	clz	r6, r3
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d14a      	bne.n	8000c6c <__udivmoddi4+0x160>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd4>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80f9 	bhi.w	8000dd2 <__udivmoddi4+0x2c6>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	469e      	mov	lr, r3
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa4>
 8000bee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xec>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 8092 	bne.w	8000d26 <__udivmoddi4+0x21a>
 8000c02:	eba1 010c 	sub.w	r1, r1, ip
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2601      	movs	r6, #1
 8000c10:	0c20      	lsrs	r0, r4, #16
 8000c12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c16:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1e:	fb0e f003 	mul.w	r0, lr, r3
 8000c22:	4288      	cmp	r0, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x12c>
 8000c26:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x12a>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2c0>
 8000c36:	4643      	mov	r3, r8
 8000c38:	1a09      	subs	r1, r1, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c40:	fb07 1110 	mls	r1, r7, r0, r1
 8000c44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x156>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x154>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2ca>
 8000c60:	4608      	mov	r0, r1
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6a:	e79c      	b.n	8000ba6 <__udivmoddi4+0x9a>
 8000c6c:	f1c6 0720 	rsb	r7, r6, #32
 8000c70:	40b3      	lsls	r3, r6
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c82:	431c      	orrs	r4, r3
 8000c84:	40f9      	lsrs	r1, r7
 8000c86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c92:	0c20      	lsrs	r0, r4, #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fb09 1118 	mls	r1, r9, r8, r1
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	fa02 f206 	lsl.w	r2, r2, r6
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b8>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4461      	add	r1, ip
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ccc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd8:	458e      	cmp	lr, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1e2>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2b4>
 8000ce6:	458e      	cmp	lr, r1
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2b4>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf6:	eba1 010e 	sub.w	r1, r1, lr
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46a6      	mov	lr, r4
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x2a4>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x2a0>
 8000d04:	b15d      	cbz	r5, 8000d1e <__udivmoddi4+0x212>
 8000d06:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d12:	fa22 f306 	lsr.w	r3, r2, r6
 8000d16:	40f1      	lsrs	r1, r6
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1e:	2600      	movs	r6, #0
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	f1c2 0320 	rsb	r3, r2, #32
 8000d2a:	40d8      	lsrs	r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa21 f303 	lsr.w	r3, r1, r3
 8000d34:	4091      	lsls	r1, r2
 8000d36:	4301      	orrs	r1, r0
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d44:	fb07 3610 	mls	r6, r7, r0, r3
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d52:	429e      	cmp	r6, r3
 8000d54:	fa04 f402 	lsl.w	r4, r4, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x260>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d64:	429e      	cmp	r6, r3
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	b289      	uxth	r1, r1
 8000d70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d74:	fb07 3316 	mls	r3, r7, r6, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x28a>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d92:	3e02      	subs	r6, #2
 8000d94:	4461      	add	r1, ip
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0x104>
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e705      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e3      	b.n	8000b70 <__udivmoddi4+0x64>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6f8      	b.n	8000b9e <__udivmoddi4+0x92>
 8000dac:	454b      	cmp	r3, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f8>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f8>
 8000dbc:	4646      	mov	r6, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x28a>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1e2>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b8>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x12c>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e709      	b.n	8000bea <__udivmoddi4+0xde>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x156>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <LSM6DSL_AccInit>:
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	80fb      	strh	r3, [r7, #6]
 8000dea:	2300      	movs	r3, #0
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	2110      	movs	r1, #16
 8000df0:	20d4      	movs	r0, #212	; 0xd4
 8000df2:	f008 fb3f 	bl	8009474 <SENSOR_IO_Read>
 8000df6:	4603      	mov	r3, r0
 8000df8:	73bb      	strb	r3, [r7, #14]
 8000dfa:	88fb      	ldrh	r3, [r7, #6]
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	73bb      	strb	r3, [r7, #14]
 8000e06:	7bba      	ldrb	r2, [r7, #14]
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	73bb      	strb	r3, [r7, #14]
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	461a      	mov	r2, r3
 8000e12:	2110      	movs	r1, #16
 8000e14:	20d4      	movs	r0, #212	; 0xd4
 8000e16:	f008 fb13 	bl	8009440 <SENSOR_IO_Write>
 8000e1a:	2112      	movs	r1, #18
 8000e1c:	20d4      	movs	r0, #212	; 0xd4
 8000e1e:	f008 fb29 	bl	8009474 <SENSOR_IO_Read>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73bb      	strb	r3, [r7, #14]
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	7bbb      	ldrb	r3, [r7, #14]
 8000e30:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8000e34:	73bb      	strb	r3, [r7, #14]
 8000e36:	7bba      	ldrb	r2, [r7, #14]
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	73bb      	strb	r3, [r7, #14]
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	461a      	mov	r2, r3
 8000e42:	2112      	movs	r1, #18
 8000e44:	20d4      	movs	r0, #212	; 0xd4
 8000e46:	f008 fafb 	bl	8009440 <SENSOR_IO_Write>
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <LSM6DSL_AccDeInit>:
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	2300      	movs	r3, #0
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	2110      	movs	r1, #16
 8000e5e:	20d4      	movs	r0, #212	; 0xd4
 8000e60:	f008 fb08 	bl	8009474 <SENSOR_IO_Read>
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	71fb      	strb	r3, [r7, #7]
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	461a      	mov	r2, r3
 8000e74:	2110      	movs	r1, #16
 8000e76:	20d4      	movs	r0, #212	; 0xd4
 8000e78:	f008 fae2 	bl	8009440 <SENSOR_IO_Write>
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <LSM6DSL_AccReadID>:
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	f008 fad0 	bl	800942c <SENSOR_IO_Init>
 8000e8c:	210f      	movs	r1, #15
 8000e8e:	20d4      	movs	r0, #212	; 0xd4
 8000e90:	f008 faf0 	bl	8009474 <SENSOR_IO_Read>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <LSM6DSL_AccLowPower>:
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b084      	sub	sp, #16
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	80fb      	strh	r3, [r7, #6]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	2115      	movs	r1, #21
 8000eaa:	20d4      	movs	r0, #212	; 0xd4
 8000eac:	f008 fae2 	bl	8009474 <SENSOR_IO_Read>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	73fb      	strb	r3, [r7, #15]
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	f023 0310 	bic.w	r3, r3, #16
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d003      	beq.n	8000eca <LSM6DSL_AccLowPower+0x30>
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
 8000ec4:	f043 0310 	orr.w	r3, r3, #16
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2115      	movs	r1, #21
 8000ed0:	20d4      	movs	r0, #212	; 0xd4
 8000ed2:	f008 fab5 	bl	8009440 <SENSOR_IO_Write>
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <LSM6DSL_AccReadXYZ>:
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	75fb      	strb	r3, [r7, #23]
 8000eec:	2300      	movs	r3, #0
 8000eee:	77fb      	strb	r3, [r7, #31]
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	20d4      	movs	r0, #212	; 0xd4
 8000efa:	f008 fabb 	bl	8009474 <SENSOR_IO_Read>
 8000efe:	4603      	mov	r3, r0
 8000f00:	75fb      	strb	r3, [r7, #23]
 8000f02:	f107 0208 	add.w	r2, r7, #8
 8000f06:	2306      	movs	r3, #6
 8000f08:	2128      	movs	r1, #40	; 0x28
 8000f0a:	20d4      	movs	r0, #212	; 0xd4
 8000f0c:	f008 fad0 	bl	80094b0 <SENSOR_IO_ReadMultiple>
 8000f10:	2300      	movs	r3, #0
 8000f12:	77fb      	strb	r3, [r7, #31]
 8000f14:	e01c      	b.n	8000f50 <LSM6DSL_AccReadXYZ+0x70>
 8000f16:	7ffb      	ldrb	r3, [r7, #31]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	3320      	adds	r3, #32
 8000f1e:	443b      	add	r3, r7
 8000f20:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	7ffb      	ldrb	r3, [r7, #31]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	3320      	adds	r3, #32
 8000f30:	443b      	add	r3, r7
 8000f32:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4413      	add	r3, r2
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
 8000f3e:	b212      	sxth	r2, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	3320      	adds	r3, #32
 8000f44:	443b      	add	r3, r7
 8000f46:	f823 2c10 	strh.w	r2, [r3, #-16]
 8000f4a:	7ffb      	ldrb	r3, [r7, #31]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	77fb      	strb	r3, [r7, #31]
 8000f50:	7ffb      	ldrb	r3, [r7, #31]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d9df      	bls.n	8000f16 <LSM6DSL_AccReadXYZ+0x36>
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b0c      	cmp	r3, #12
 8000f5e:	d829      	bhi.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd4>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <LSM6DSL_AccReadXYZ+0x88>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f9d 	.word	0x08000f9d
 8000f6c:	08000fb5 	.word	0x08000fb5
 8000f70:	08000fb5 	.word	0x08000fb5
 8000f74:	08000fb5 	.word	0x08000fb5
 8000f78:	08000faf 	.word	0x08000faf
 8000f7c:	08000fb5 	.word	0x08000fb5
 8000f80:	08000fb5 	.word	0x08000fb5
 8000f84:	08000fb5 	.word	0x08000fb5
 8000f88:	08000fa3 	.word	0x08000fa3
 8000f8c:	08000fb5 	.word	0x08000fb5
 8000f90:	08000fb5 	.word	0x08000fb5
 8000f94:	08000fb5 	.word	0x08000fb5
 8000f98:	08000fa9 	.word	0x08000fa9
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <LSM6DSL_AccReadXYZ+0x120>)
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	e008      	b.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd4>
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <LSM6DSL_AccReadXYZ+0x124>)
 8000fa4:	61bb      	str	r3, [r7, #24]
 8000fa6:	e005      	b.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd4>
 8000fa8:	4b17      	ldr	r3, [pc, #92]	; (8001008 <LSM6DSL_AccReadXYZ+0x128>)
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	e002      	b.n	8000fb4 <LSM6DSL_AccReadXYZ+0xd4>
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <LSM6DSL_AccReadXYZ+0x12c>)
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	bf00      	nop
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	77fb      	strb	r3, [r7, #31]
 8000fb8:	e01a      	b.n	8000ff0 <LSM6DSL_AccReadXYZ+0x110>
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	3320      	adds	r3, #32
 8000fc0:	443b      	add	r3, r7
 8000fc2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fce:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd6:	7ffb      	ldrb	r3, [r7, #31]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fe2:	ee17 2a90 	vmov	r2, s15
 8000fe6:	b212      	sxth	r2, r2
 8000fe8:	801a      	strh	r2, [r3, #0]
 8000fea:	7ffb      	ldrb	r3, [r7, #31]
 8000fec:	3301      	adds	r3, #1
 8000fee:	77fb      	strb	r3, [r7, #31]
 8000ff0:	7ffb      	ldrb	r3, [r7, #31]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d9e1      	bls.n	8000fba <LSM6DSL_AccReadXYZ+0xda>
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	3d79db23 	.word	0x3d79db23
 8001004:	3df9db23 	.word	0x3df9db23
 8001008:	3e79db23 	.word	0x3e79db23
 800100c:	3ef9db23 	.word	0x3ef9db23

08001010 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101a:	2003      	movs	r0, #3
 800101c:	f000 f901 	bl	8001222 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001020:	200f      	movs	r0, #15
 8001022:	f009 f88b 	bl	800a13c <HAL_InitTick>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d002      	beq.n	8001032 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	e001      	b.n	8001036 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001032:	f008 feb1 	bl	8009d98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001036:	79fb      	ldrb	r3, [r7, #7]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x20>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x24>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4413      	add	r3, r2
 8001050:	4a04      	ldr	r2, [pc, #16]	; (8001064 <HAL_IncTick+0x24>)
 8001052:	6013      	str	r3, [r2, #0]
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000038 	.word	0x20000038
 8001064:	20000154 	.word	0x20000154

08001068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return uwTick;
 800106c:	4b03      	ldr	r3, [pc, #12]	; (800107c <HAL_GetTick+0x14>)
 800106e:	681b      	ldr	r3, [r3, #0]
}
 8001070:	4618      	mov	r0, r3
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000154 	.word	0x20000154

08001080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff ffee 	bl	8001068 <HAL_GetTick>
 800108c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001098:	d005      	beq.n	80010a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <HAL_Delay+0x44>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4413      	add	r3, r2
 80010a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010a6:	bf00      	nop
 80010a8:	f7ff ffde 	bl	8001068 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d8f7      	bhi.n	80010a8 <HAL_Delay+0x28>
  {
  }
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000038 	.word	0x20000038

080010c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e4:	4013      	ands	r3, r2
 80010e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x44>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001114:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_GetPriorityGrouping+0x18>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0a1b      	lsrs	r3, r3, #8
 800111a:	f003 0307 	and.w	r3, r3, #7
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113a:	2b00      	cmp	r3, #0
 800113c:	db0b      	blt.n	8001156 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	f003 021f 	and.w	r2, r3, #31
 8001144:	4907      	ldr	r1, [pc, #28]	; (8001164 <__NVIC_EnableIRQ+0x38>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	095b      	lsrs	r3, r3, #5
 800114c:	2001      	movs	r0, #1
 800114e:	fa00 f202 	lsl.w	r2, r0, r2
 8001152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100

08001168 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	db0a      	blt.n	8001192 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	b2da      	uxtb	r2, r3
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <__NVIC_SetPriority+0x4c>)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	0112      	lsls	r2, r2, #4
 8001188:	b2d2      	uxtb	r2, r2
 800118a:	440b      	add	r3, r1
 800118c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001190:	e00a      	b.n	80011a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	b2da      	uxtb	r2, r3
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <__NVIC_SetPriority+0x50>)
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	3b04      	subs	r3, #4
 80011a0:	0112      	lsls	r2, r2, #4
 80011a2:	b2d2      	uxtb	r2, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	761a      	strb	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000e100 	.word	0xe000e100
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	; 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f1c3 0307 	rsb	r3, r3, #7
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf28      	it	cs
 80011da:	2304      	movcs	r3, #4
 80011dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3304      	adds	r3, #4
 80011e2:	2b06      	cmp	r3, #6
 80011e4:	d902      	bls.n	80011ec <NVIC_EncodePriority+0x30>
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3b03      	subs	r3, #3
 80011ea:	e000      	b.n	80011ee <NVIC_EncodePriority+0x32>
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	fa01 f303 	lsl.w	r3, r1, r3
 800120e:	43d9      	mvns	r1, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	4313      	orrs	r3, r2
         );
}
 8001216:	4618      	mov	r0, r3
 8001218:	3724      	adds	r7, #36	; 0x24
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff4c 	bl	80010c8 <__NVIC_SetPriorityGrouping>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800124a:	f7ff ff61 	bl	8001110 <__NVIC_GetPriorityGrouping>
 800124e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	6978      	ldr	r0, [r7, #20]
 8001256:	f7ff ffb1 	bl	80011bc <NVIC_EncodePriority>
 800125a:	4602      	mov	r2, r0
 800125c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff80 	bl	8001168 <__NVIC_SetPriority>
}
 8001268:	bf00      	nop
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff54 	bl	800112c <__NVIC_EnableIRQ>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e014      	b.n	80012c8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d105      	bne.n	80012b4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f008 fd9a 	bl	8009de8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2202      	movs	r2, #2
 80012b8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	795b      	ldrb	r3, [r3, #5]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_DAC_Start+0x16>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e040      	b.n	8001368 <HAL_DAC_Start+0x98>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2202      	movs	r2, #2
 80012f0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	2201      	movs	r2, #1
 8001300:	409a      	lsls	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	430a      	orrs	r2, r1
 8001308:	601a      	str	r2, [r3, #0]

#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (Channel == DAC_CHANNEL_1)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d10f      	bne.n	8001330 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800131a:	2b02      	cmp	r3, #2
 800131c:	d11d      	bne.n	800135a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f042 0201 	orr.w	r2, r2, #1
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	e014      	b.n	800135a <HAL_DAC_Start+0x8a>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2102      	movs	r1, #2
 8001342:	fa01 f303 	lsl.w	r3, r1, r3
 8001346:	429a      	cmp	r2, r3
 8001348:	d107      	bne.n	800135a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0202 	orr.w	r2, r2, #2
 8001358:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800138a:	d120      	bne.n	80013ce <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800139a:	d118      	bne.n	80013ce <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2204      	movs	r2, #4
 80013a0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	f043 0201 	orr.w	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013c6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f852 	bl	8001472 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013dc:	d120      	bne.n	8001420 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013ec:	d118      	bne.n	8001420 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2204      	movs	r2, #4
 80013f2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	f043 0202 	orr.w	r2, r3, #2
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001408:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001418:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f974 	bl	8001708 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001420:	bf00      	nop
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
 8001434:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	3308      	adds	r3, #8
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	e004      	b.n	800145c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	3314      	adds	r3, #20
 800145a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	461a      	mov	r2, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	371c      	adds	r7, #28
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b088      	sub	sp, #32
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	795b      	ldrb	r3, [r3, #5]
 800149c:	2b01      	cmp	r3, #1
 800149e:	d101      	bne.n	80014a4 <HAL_DAC_ConfigChannel+0x1c>
 80014a0:	2302      	movs	r3, #2
 80014a2:	e12a      	b.n	80016fa <HAL_DAC_ConfigChannel+0x272>
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2201      	movs	r2, #1
 80014a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2202      	movs	r2, #2
 80014ae:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b04      	cmp	r3, #4
 80014b6:	d174      	bne.n	80015a2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80014b8:	f7ff fdd6 	bl	8001068 <HAL_GetTick>
 80014bc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d134      	bne.n	800152e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80014c4:	e011      	b.n	80014ea <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80014c6:	f7ff fdcf 	bl	8001068 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d90a      	bls.n	80014ea <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	f043 0208 	orr.w	r2, r3, #8
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2203      	movs	r2, #3
 80014e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e107      	b.n	80016fa <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e6      	bne.n	80014c6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80014f8:	2001      	movs	r0, #1
 80014fa:	f7ff fdc1 	bl	8001080 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	69d2      	ldr	r2, [r2, #28]
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
 8001508:	e01e      	b.n	8001548 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800150a:	f7ff fdad 	bl	8001068 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b01      	cmp	r3, #1
 8001516:	d90a      	bls.n	800152e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	f043 0208 	orr.w	r2, r3, #8
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2203      	movs	r2, #3
 8001528:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e0e5      	b.n	80016fa <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001534:	2b00      	cmp	r3, #0
 8001536:	dbe8      	blt.n	800150a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff fda1 	bl	8001080 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	69d2      	ldr	r2, [r2, #28]
 8001546:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f003 0310 	and.w	r3, r3, #16
 8001554:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001558:	fa01 f303 	lsl.w	r3, r1, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	ea02 0103 	and.w	r1, r2, r3
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	6a1a      	ldr	r2, [r3, #32]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	409a      	lsls	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	21ff      	movs	r1, #255	; 0xff
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	ea02 0103 	and.w	r1, r2, r3
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f003 0310 	and.w	r3, r3, #16
 8001598:	409a      	lsls	r2, r3
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d11d      	bne.n	80015e6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b0:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	221f      	movs	r2, #31
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69fa      	ldr	r2, [r7, #28]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ec:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2207      	movs	r2, #7
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	4013      	ands	r3, r2
 8001600:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	431a      	orrs	r2, r3
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0310 	and.w	r3, r3, #16
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69fa      	ldr	r2, [r7, #28]
 8001622:	4313      	orrs	r3, r2
 8001624:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	400a      	ands	r2, r1
 800164a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f003 0310 	and.w	r3, r3, #16
 800165a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69fa      	ldr	r2, [r7, #28]
 8001666:	4013      	ands	r3, r2
 8001668:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69fa      	ldr	r2, [r7, #28]
 800167e:	4313      	orrs	r3, r2
 8001680:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800168a:	d104      	bne.n	8001696 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	e018      	b.n	80016c8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d104      	bne.n	80016a8 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016a4:	61fb      	str	r3, [r7, #28]
 80016a6:	e00f      	b.n	80016c8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80016a8:	f002 fc3a 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 80016ac:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4a14      	ldr	r2, [pc, #80]	; (8001704 <HAL_DAC_ConfigChannel+0x27c>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d904      	bls.n	80016c0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016bc:	61fb      	str	r3, [r7, #28]
 80016be:	e003      	b.n	80016c8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016c6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6819      	ldr	r1, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f003 0310 	and.w	r3, r3, #16
 80016dc:	22c0      	movs	r2, #192	; 0xc0
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43da      	mvns	r2, r3
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	400a      	ands	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	04c4b400 	.word	0x04c4b400

08001708 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b480      	push	{r7}
 800171e:	b087      	sub	sp, #28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800172a:	e166      	b.n	80019fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	fa01 f303 	lsl.w	r3, r1, r3
 8001738:	4013      	ands	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8158 	beq.w	80019f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d005      	beq.n	800175c <HAL_GPIO_Init+0x40>
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f003 0303 	and.w	r3, r3, #3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d130      	bne.n	80017be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001792:	2201      	movs	r2, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	f003 0201 	and.w	r2, r3, #1
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d017      	beq.n	80017fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	2203      	movs	r2, #3
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43db      	mvns	r3, r3
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4013      	ands	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d123      	bne.n	800184e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	08da      	lsrs	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3208      	adds	r2, #8
 800180e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	220f      	movs	r2, #15
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4013      	ands	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	08da      	lsrs	r2, r3, #3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3208      	adds	r2, #8
 8001848:	6939      	ldr	r1, [r7, #16]
 800184a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	2203      	movs	r2, #3
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0203 	and.w	r2, r3, #3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 80b2 	beq.w	80019f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001890:	4b61      	ldr	r3, [pc, #388]	; (8001a18 <HAL_GPIO_Init+0x2fc>)
 8001892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001894:	4a60      	ldr	r2, [pc, #384]	; (8001a18 <HAL_GPIO_Init+0x2fc>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6613      	str	r3, [r2, #96]	; 0x60
 800189c:	4b5e      	ldr	r3, [pc, #376]	; (8001a18 <HAL_GPIO_Init+0x2fc>)
 800189e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018a8:	4a5c      	ldr	r2, [pc, #368]	; (8001a1c <HAL_GPIO_Init+0x300>)
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3302      	adds	r3, #2
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018d2:	d02b      	beq.n	800192c <HAL_GPIO_Init+0x210>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a52      	ldr	r2, [pc, #328]	; (8001a20 <HAL_GPIO_Init+0x304>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d025      	beq.n	8001928 <HAL_GPIO_Init+0x20c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a51      	ldr	r2, [pc, #324]	; (8001a24 <HAL_GPIO_Init+0x308>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d01f      	beq.n	8001924 <HAL_GPIO_Init+0x208>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a50      	ldr	r2, [pc, #320]	; (8001a28 <HAL_GPIO_Init+0x30c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d019      	beq.n	8001920 <HAL_GPIO_Init+0x204>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a4f      	ldr	r2, [pc, #316]	; (8001a2c <HAL_GPIO_Init+0x310>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d013      	beq.n	800191c <HAL_GPIO_Init+0x200>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a4e      	ldr	r2, [pc, #312]	; (8001a30 <HAL_GPIO_Init+0x314>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00d      	beq.n	8001918 <HAL_GPIO_Init+0x1fc>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a4d      	ldr	r2, [pc, #308]	; (8001a34 <HAL_GPIO_Init+0x318>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d007      	beq.n	8001914 <HAL_GPIO_Init+0x1f8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a4c      	ldr	r2, [pc, #304]	; (8001a38 <HAL_GPIO_Init+0x31c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_GPIO_Init+0x1f4>
 800190c:	2307      	movs	r3, #7
 800190e:	e00e      	b.n	800192e <HAL_GPIO_Init+0x212>
 8001910:	2308      	movs	r3, #8
 8001912:	e00c      	b.n	800192e <HAL_GPIO_Init+0x212>
 8001914:	2306      	movs	r3, #6
 8001916:	e00a      	b.n	800192e <HAL_GPIO_Init+0x212>
 8001918:	2305      	movs	r3, #5
 800191a:	e008      	b.n	800192e <HAL_GPIO_Init+0x212>
 800191c:	2304      	movs	r3, #4
 800191e:	e006      	b.n	800192e <HAL_GPIO_Init+0x212>
 8001920:	2303      	movs	r3, #3
 8001922:	e004      	b.n	800192e <HAL_GPIO_Init+0x212>
 8001924:	2302      	movs	r3, #2
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0x212>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_GPIO_Init+0x212>
 800192c:	2300      	movs	r3, #0
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	f002 0203 	and.w	r2, r2, #3
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	4093      	lsls	r3, r2
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800193e:	4937      	ldr	r1, [pc, #220]	; (8001a1c <HAL_GPIO_Init+0x300>)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800194c:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <HAL_GPIO_Init+0x320>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001970:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <HAL_GPIO_Init+0x320>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_GPIO_Init+0x320>)
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43db      	mvns	r3, r3
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800199a:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <HAL_GPIO_Init+0x320>)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_GPIO_Init+0x320>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019c4:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <HAL_GPIO_Init+0x320>)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_GPIO_Init+0x320>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019ee:	4a13      	ldr	r2, [pc, #76]	; (8001a3c <HAL_GPIO_Init+0x320>)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	fa22 f303 	lsr.w	r3, r2, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f47f ae91 	bne.w	800172c <HAL_GPIO_Init+0x10>
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	371c      	adds	r7, #28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	48000400 	.word	0x48000400
 8001a24:	48000800 	.word	0x48000800
 8001a28:	48000c00 	.word	0x48000c00
 8001a2c:	48001000 	.word	0x48001000
 8001a30:	48001400 	.word	0x48001400
 8001a34:	48001800 	.word	0x48001800
 8001a38:	48001c00 	.word	0x48001c00
 8001a3c:	40010400 	.word	0x40010400

08001a40 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001a4e:	e0c9      	b.n	8001be4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001a50:	2201      	movs	r2, #1
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	683a      	ldr	r2, [r7, #0]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80bc 	beq.w	8001bde <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001a66:	4a66      	ldr	r2, [pc, #408]	; (8001c00 <HAL_GPIO_DeInit+0x1c0>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a8e:	d02b      	beq.n	8001ae8 <HAL_GPIO_DeInit+0xa8>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a5c      	ldr	r2, [pc, #368]	; (8001c04 <HAL_GPIO_DeInit+0x1c4>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d025      	beq.n	8001ae4 <HAL_GPIO_DeInit+0xa4>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a5b      	ldr	r2, [pc, #364]	; (8001c08 <HAL_GPIO_DeInit+0x1c8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d01f      	beq.n	8001ae0 <HAL_GPIO_DeInit+0xa0>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a5a      	ldr	r2, [pc, #360]	; (8001c0c <HAL_GPIO_DeInit+0x1cc>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d019      	beq.n	8001adc <HAL_GPIO_DeInit+0x9c>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a59      	ldr	r2, [pc, #356]	; (8001c10 <HAL_GPIO_DeInit+0x1d0>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d013      	beq.n	8001ad8 <HAL_GPIO_DeInit+0x98>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <HAL_GPIO_DeInit+0x1d4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_GPIO_DeInit+0x94>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a57      	ldr	r2, [pc, #348]	; (8001c18 <HAL_GPIO_DeInit+0x1d8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d007      	beq.n	8001ad0 <HAL_GPIO_DeInit+0x90>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a56      	ldr	r2, [pc, #344]	; (8001c1c <HAL_GPIO_DeInit+0x1dc>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d101      	bne.n	8001acc <HAL_GPIO_DeInit+0x8c>
 8001ac8:	2307      	movs	r3, #7
 8001aca:	e00e      	b.n	8001aea <HAL_GPIO_DeInit+0xaa>
 8001acc:	2308      	movs	r3, #8
 8001ace:	e00c      	b.n	8001aea <HAL_GPIO_DeInit+0xaa>
 8001ad0:	2306      	movs	r3, #6
 8001ad2:	e00a      	b.n	8001aea <HAL_GPIO_DeInit+0xaa>
 8001ad4:	2305      	movs	r3, #5
 8001ad6:	e008      	b.n	8001aea <HAL_GPIO_DeInit+0xaa>
 8001ad8:	2304      	movs	r3, #4
 8001ada:	e006      	b.n	8001aea <HAL_GPIO_DeInit+0xaa>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e004      	b.n	8001aea <HAL_GPIO_DeInit+0xaa>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e002      	b.n	8001aea <HAL_GPIO_DeInit+0xaa>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_GPIO_DeInit+0xaa>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	0092      	lsls	r2, r2, #2
 8001af2:	4093      	lsls	r3, r2
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d132      	bne.n	8001b60 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001afa:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <HAL_GPIO_DeInit+0x1e0>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	43db      	mvns	r3, r3
 8001b02:	4947      	ldr	r1, [pc, #284]	; (8001c20 <HAL_GPIO_DeInit+0x1e0>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001b08:	4b45      	ldr	r3, [pc, #276]	; (8001c20 <HAL_GPIO_DeInit+0x1e0>)
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	4943      	ldr	r1, [pc, #268]	; (8001c20 <HAL_GPIO_DeInit+0x1e0>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001b16:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <HAL_GPIO_DeInit+0x1e0>)
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	4940      	ldr	r1, [pc, #256]	; (8001c20 <HAL_GPIO_DeInit+0x1e0>)
 8001b20:	4013      	ands	r3, r2
 8001b22:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001b24:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <HAL_GPIO_DeInit+0x1e0>)
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	493c      	ldr	r1, [pc, #240]	; (8001c20 <HAL_GPIO_DeInit+0x1e0>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001b42:	4a2f      	ldr	r2, [pc, #188]	; (8001c00 <HAL_GPIO_DeInit+0x1c0>)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	089b      	lsrs	r3, r3, #2
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43da      	mvns	r2, r3
 8001b52:	482b      	ldr	r0, [pc, #172]	; (8001c00 <HAL_GPIO_DeInit+0x1c0>)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	400a      	ands	r2, r1
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	2103      	movs	r1, #3
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	08d2      	lsrs	r2, r2, #3
 8001b94:	4019      	ands	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2103      	movs	r1, #3
 8001ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	401a      	ands	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	401a      	ands	r2, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	2103      	movs	r1, #3
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	401a      	ands	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f47f af2f 	bne.w	8001a50 <HAL_GPIO_DeInit+0x10>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	bf00      	nop
 8001bf6:	371c      	adds	r7, #28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	40010000 	.word	0x40010000
 8001c04:	48000400 	.word	0x48000400
 8001c08:	48000800 	.word	0x48000800
 8001c0c:	48000c00 	.word	0x48000c00
 8001c10:	48001000 	.word	0x48001000
 8001c14:	48001400 	.word	0x48001400
 8001c18:	48001800 	.word	0x48001800
 8001c1c:	48001c00 	.word	0x48001c00
 8001c20:	40010400 	.word	0x40010400

08001c24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c30:	695a      	ldr	r2, [r3, #20]
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	4013      	ands	r3, r2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d006      	beq.n	8001c48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c3a:	4a05      	ldr	r2, [pc, #20]	; (8001c50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c40:	88fb      	ldrh	r3, [r7, #6]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f007 f8fe 	bl	8008e44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c48:	bf00      	nop
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40010400 	.word	0x40010400

08001c54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e081      	b.n	8001d6a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f008 f8fa 	bl	8009e74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2224      	movs	r2, #36	; 0x24
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	e006      	b.n	8001cdc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d104      	bne.n	8001cee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69d9      	ldr	r1, [r3, #28]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1a      	ldr	r2, [r3, #32]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e021      	b.n	8001dc8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	; 0x24
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f008 f8c7 	bl	8009f30 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	817b      	strh	r3, [r7, #10]
 8001de2:	460b      	mov	r3, r1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	f040 80f9 	bne.w	8001fea <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_I2C_Mem_Write+0x34>
 8001dfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0ed      	b.n	8001fec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d101      	bne.n	8001e1e <HAL_I2C_Mem_Write+0x4e>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e0e6      	b.n	8001fec <HAL_I2C_Mem_Write+0x21c>
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e26:	f7ff f91f 	bl	8001068 <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2319      	movs	r3, #25
 8001e32:	2201      	movs	r2, #1
 8001e34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e38:	68f8      	ldr	r0, [r7, #12]
 8001e3a:	f000 fac3 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0d1      	b.n	8001fec <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2221      	movs	r2, #33	; 0x21
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a3a      	ldr	r2, [r7, #32]
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e70:	88f8      	ldrh	r0, [r7, #6]
 8001e72:	893a      	ldrh	r2, [r7, #8]
 8001e74:	8979      	ldrh	r1, [r7, #10]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	9300      	str	r3, [sp, #0]
 8001e7e:	4603      	mov	r3, r0
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 f9d3 	bl	800222c <I2C_RequestMemoryWrite>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0a9      	b.n	8001fec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	2bff      	cmp	r3, #255	; 0xff
 8001ea0:	d90e      	bls.n	8001ec0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	22ff      	movs	r2, #255	; 0xff
 8001ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	8979      	ldrh	r1, [r7, #10]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f000 fc2b 	bl	8002714 <I2C_TransferConfig>
 8001ebe:	e00f      	b.n	8001ee0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	b2da      	uxtb	r2, r3
 8001ed0:	8979      	ldrh	r1, [r7, #10]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fc1a 	bl	8002714 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 faad 	bl	8002444 <I2C_WaitOnTXISFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e07b      	b.n	8001fec <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	781a      	ldrb	r2, [r3, #0]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d034      	beq.n	8001f98 <HAL_I2C_Mem_Write+0x1c8>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d130      	bne.n	8001f98 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2180      	movs	r1, #128	; 0x80
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 fa3f 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e04d      	b.n	8001fec <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2bff      	cmp	r3, #255	; 0xff
 8001f58:	d90e      	bls.n	8001f78 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	22ff      	movs	r2, #255	; 0xff
 8001f5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fbcf 	bl	8002714 <I2C_TransferConfig>
 8001f76:	e00f      	b.n	8001f98 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	8979      	ldrh	r1, [r7, #10]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fbbe 	bl	8002714 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d19e      	bne.n	8001ee0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 fa8c 	bl	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e01a      	b.n	8001fec <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	6859      	ldr	r1, [r3, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_I2C_Mem_Write+0x224>)
 8001fca:	400b      	ands	r3, r1
 8001fcc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2220      	movs	r2, #32
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	fe00e800 	.word	0xfe00e800

08001ff8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	4608      	mov	r0, r1
 8002002:	4611      	mov	r1, r2
 8002004:	461a      	mov	r2, r3
 8002006:	4603      	mov	r3, r0
 8002008:	817b      	strh	r3, [r7, #10]
 800200a:	460b      	mov	r3, r1
 800200c:	813b      	strh	r3, [r7, #8]
 800200e:	4613      	mov	r3, r2
 8002010:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b20      	cmp	r3, #32
 800201c:	f040 80fd 	bne.w	800221a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <HAL_I2C_Mem_Read+0x34>
 8002026:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002028:	2b00      	cmp	r3, #0
 800202a:	d105      	bne.n	8002038 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002032:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0f1      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_I2C_Mem_Read+0x4e>
 8002042:	2302      	movs	r3, #2
 8002044:	e0ea      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800204e:	f7ff f80b 	bl	8001068 <HAL_GetTick>
 8002052:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	2319      	movs	r3, #25
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	f000 f9af 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0d5      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2222      	movs	r2, #34	; 0x22
 8002074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2240      	movs	r2, #64	; 0x40
 800207c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a3a      	ldr	r2, [r7, #32]
 800208a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002090:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002098:	88f8      	ldrh	r0, [r7, #6]
 800209a:	893a      	ldrh	r2, [r7, #8]
 800209c:	8979      	ldrh	r1, [r7, #10]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	4603      	mov	r3, r0
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f913 	bl	80022d4 <I2C_RequestMemoryRead>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0ad      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	2bff      	cmp	r3, #255	; 0xff
 80020c8:	d90e      	bls.n	80020e8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	22ff      	movs	r2, #255	; 0xff
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	8979      	ldrh	r1, [r7, #10]
 80020d8:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_I2C_Mem_Read+0x22c>)
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fb17 	bl	8002714 <I2C_TransferConfig>
 80020e6:	e00f      	b.n	8002108 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	8979      	ldrh	r1, [r7, #10]
 80020fa:	4b4a      	ldr	r3, [pc, #296]	; (8002224 <HAL_I2C_Mem_Read+0x22c>)
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 fb06 	bl	8002714 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	2200      	movs	r2, #0
 8002110:	2104      	movs	r1, #4
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f956 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e07c      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002158:	b29b      	uxth	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d034      	beq.n	80021c8 <HAL_I2C_Mem_Read+0x1d0>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002162:	2b00      	cmp	r3, #0
 8002164:	d130      	bne.n	80021c8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	2200      	movs	r2, #0
 800216e:	2180      	movs	r1, #128	; 0x80
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f927 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e04d      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	2bff      	cmp	r3, #255	; 0xff
 8002188:	d90e      	bls.n	80021a8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	22ff      	movs	r2, #255	; 0xff
 800218e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	b2da      	uxtb	r2, r3
 8002196:	8979      	ldrh	r1, [r7, #10]
 8002198:	2300      	movs	r3, #0
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fab7 	bl	8002714 <I2C_TransferConfig>
 80021a6:	e00f      	b.n	80021c8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	8979      	ldrh	r1, [r7, #10]
 80021ba:	2300      	movs	r3, #0
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 faa6 	bl	8002714 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d19a      	bne.n	8002108 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f974 	bl	80024c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e01a      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2220      	movs	r2, #32
 80021ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6859      	ldr	r1, [r3, #4]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_I2C_Mem_Read+0x230>)
 80021fa:	400b      	ands	r3, r1
 80021fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2220      	movs	r2, #32
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
  }
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	80002400 	.word	0x80002400
 8002228:	fe00e800 	.word	0xfe00e800

0800222c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af02      	add	r7, sp, #8
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	4608      	mov	r0, r1
 8002236:	4611      	mov	r1, r2
 8002238:	461a      	mov	r2, r3
 800223a:	4603      	mov	r3, r0
 800223c:	817b      	strh	r3, [r7, #10]
 800223e:	460b      	mov	r3, r1
 8002240:	813b      	strh	r3, [r7, #8]
 8002242:	4613      	mov	r3, r2
 8002244:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	8979      	ldrh	r1, [r7, #10]
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <I2C_RequestMemoryWrite+0xa4>)
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fa5d 	bl	8002714 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	69b9      	ldr	r1, [r7, #24]
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 f8f0 	bl	8002444 <I2C_WaitOnTXISFlagUntilTimeout>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e02c      	b.n	80022c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002274:	893b      	ldrh	r3, [r7, #8]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	629a      	str	r2, [r3, #40]	; 0x28
 800227e:	e015      	b.n	80022ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002280:	893b      	ldrh	r3, [r7, #8]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	b29b      	uxth	r3, r3
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800228e:	69fa      	ldr	r2, [r7, #28]
 8002290:	69b9      	ldr	r1, [r7, #24]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f8d6 	bl	8002444 <I2C_WaitOnTXISFlagUntilTimeout>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e012      	b.n	80022c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022a2:	893b      	ldrh	r3, [r7, #8]
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2200      	movs	r2, #0
 80022b4:	2180      	movs	r1, #128	; 0x80
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f884 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	80002000 	.word	0x80002000

080022d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af02      	add	r7, sp, #8
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	4608      	mov	r0, r1
 80022de:	4611      	mov	r1, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	4603      	mov	r3, r0
 80022e4:	817b      	strh	r3, [r7, #10]
 80022e6:	460b      	mov	r3, r1
 80022e8:	813b      	strh	r3, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022ee:	88fb      	ldrh	r3, [r7, #6]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	8979      	ldrh	r1, [r7, #10]
 80022f4:	4b20      	ldr	r3, [pc, #128]	; (8002378 <I2C_RequestMemoryRead+0xa4>)
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2300      	movs	r3, #0
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 fa0a 	bl	8002714 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	69b9      	ldr	r1, [r7, #24]
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 f89d 	bl	8002444 <I2C_WaitOnTXISFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e02c      	b.n	800236e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800231a:	893b      	ldrh	r3, [r7, #8]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
 8002324:	e015      	b.n	8002352 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002326:	893b      	ldrh	r3, [r7, #8]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	b29b      	uxth	r3, r3
 800232c:	b2da      	uxtb	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002334:	69fa      	ldr	r2, [r7, #28]
 8002336:	69b9      	ldr	r1, [r7, #24]
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f000 f883 	bl	8002444 <I2C_WaitOnTXISFlagUntilTimeout>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e012      	b.n	800236e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002348:	893b      	ldrh	r3, [r7, #8]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	2200      	movs	r2, #0
 800235a:	2140      	movs	r1, #64	; 0x40
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f000 f831 	bl	80023c4 <I2C_WaitOnFlagUntilTimeout>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	80002000 	.word	0x80002000

0800237c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b02      	cmp	r3, #2
 8002390:	d103      	bne.n	800239a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2200      	movs	r2, #0
 8002398:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d007      	beq.n	80023b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	619a      	str	r2, [r3, #24]
  }
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	4613      	mov	r3, r2
 80023d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d4:	e022      	b.n	800241c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023dc:	d01e      	beq.n	800241c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023de:	f7fe fe43 	bl	8001068 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d302      	bcc.n	80023f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d113      	bne.n	800241c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	f043 0220 	orr.w	r2, r3, #32
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e00f      	b.n	800243c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699a      	ldr	r2, [r3, #24]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4013      	ands	r3, r2
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	429a      	cmp	r2, r3
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	429a      	cmp	r2, r3
 8002438:	d0cd      	beq.n	80023d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002450:	e02c      	b.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	68b9      	ldr	r1, [r7, #8]
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 f870 	bl	800253c <I2C_IsErrorOccurred>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e02a      	b.n	80024bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800246c:	d01e      	beq.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246e:	f7fe fdfb 	bl	8001068 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	429a      	cmp	r2, r3
 800247c:	d302      	bcc.n	8002484 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d113      	bne.n	80024ac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002488:	f043 0220 	orr.w	r2, r3, #32
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e007      	b.n	80024bc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d1cb      	bne.n	8002452 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024d0:	e028      	b.n	8002524 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	68b9      	ldr	r1, [r7, #8]
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 f830 	bl	800253c <I2C_IsErrorOccurred>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e026      	b.n	8002534 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e6:	f7fe fdbf 	bl	8001068 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d302      	bcc.n	80024fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d113      	bne.n	8002524 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f043 0220 	orr.w	r2, r3, #32
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2220      	movs	r2, #32
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2200      	movs	r2, #0
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e007      	b.n	8002534 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0320 	and.w	r3, r3, #32
 800252e:	2b20      	cmp	r3, #32
 8002530:	d1cf      	bne.n	80024d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08a      	sub	sp, #40	; 0x28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	d075      	beq.n	8002654 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2210      	movs	r2, #16
 800256e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002570:	e056      	b.n	8002620 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002578:	d052      	beq.n	8002620 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800257a:	f7fe fd75 	bl	8001068 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <I2C_IsErrorOccurred+0x54>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d147      	bne.n	8002620 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025b2:	d12e      	bne.n	8002612 <I2C_IsErrorOccurred+0xd6>
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ba:	d02a      	beq.n	8002612 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d027      	beq.n	8002612 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025d2:	f7fe fd49 	bl	8001068 <HAL_GetTick>
 80025d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025d8:	e01b      	b.n	8002612 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025da:	f7fe fd45 	bl	8001068 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b19      	cmp	r3, #25
 80025e6:	d914      	bls.n	8002612 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b20      	cmp	r3, #32
 800261e:	d1dc      	bne.n	80025da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	2b20      	cmp	r3, #32
 800262c:	d003      	beq.n	8002636 <I2C_IsErrorOccurred+0xfa>
 800262e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002632:	2b00      	cmp	r3, #0
 8002634:	d09d      	beq.n	8002572 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800263a:	2b00      	cmp	r3, #0
 800263c:	d103      	bne.n	8002646 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2220      	movs	r2, #32
 8002644:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	f043 0304 	orr.w	r3, r3, #4
 800264c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	f043 0301 	orr.w	r3, r3, #1
 800266c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002676:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00b      	beq.n	80026a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	f043 0308 	orr.w	r3, r3, #8
 800268e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002698:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026aa:	6a3b      	ldr	r3, [r7, #32]
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80026c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d01c      	beq.n	8002704 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f7ff fe56 	bl	800237c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <I2C_IsErrorOccurred+0x1d4>)
 80026dc:	400b      	ands	r3, r1
 80026de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002708:	4618      	mov	r0, r3
 800270a:	3728      	adds	r7, #40	; 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	fe00e800 	.word	0xfe00e800

08002714 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	817b      	strh	r3, [r7, #10]
 8002722:	4613      	mov	r3, r2
 8002724:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800272c:	7a7b      	ldrb	r3, [r7, #9]
 800272e:	041b      	lsls	r3, r3, #16
 8002730:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002734:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	4313      	orrs	r3, r2
 800273e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002742:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	0d5b      	lsrs	r3, r3, #21
 800274e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002752:	4b08      	ldr	r3, [pc, #32]	; (8002774 <I2C_TransferConfig+0x60>)
 8002754:	430b      	orrs	r3, r1
 8002756:	43db      	mvns	r3, r3
 8002758:	ea02 0103 	and.w	r1, r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	03ff63ff 	.word	0x03ff63ff

08002778 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b20      	cmp	r3, #32
 800278c:	d138      	bne.n	8002800 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002798:	2302      	movs	r3, #2
 800279a:	e032      	b.n	8002802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2224      	movs	r2, #36	; 0x24
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0201 	bic.w	r2, r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80027ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6819      	ldr	r1, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f042 0201 	orr.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2220      	movs	r2, #32
 80027f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e000      	b.n	8002802 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002800:	2302      	movs	r3, #2
  }
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b20      	cmp	r3, #32
 8002822:	d139      	bne.n	8002898 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800282e:	2302      	movs	r3, #2
 8002830:	e033      	b.n	800289a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2224      	movs	r2, #36	; 0x24
 800283e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0201 	bic.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002860:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	e000      	b.n	800289a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002898:	2302      	movs	r3, #2
  }
}
 800289a:	4618      	mov	r0, r3
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af02      	add	r7, sp, #8
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7fe fbd8 	bl	8001068 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	e092      	b.n	80029ec <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f040 808b 	bne.w	80029ec <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f007 fb4e 	bl	8009f78 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80028dc:	f241 3188 	movw	r1, #5000	; 0x1388
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fad0 	bl	8002e86 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <HAL_OSPI_Init+0x150>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68d1      	ldr	r1, [r2, #12]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6912      	ldr	r2, [r2, #16]
 80028f8:	3a01      	subs	r2, #1
 80028fa:	0412      	lsls	r2, r2, #16
 80028fc:	4311      	orrs	r1, r2
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	6952      	ldr	r2, [r2, #20]
 8002902:	3a01      	subs	r2, #1
 8002904:	0212      	lsls	r2, r2, #8
 8002906:	4311      	orrs	r1, r2
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800290c:	4311      	orrs	r1, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	69d2      	ldr	r2, [r2, #28]
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	430b      	orrs	r3, r1
 800291a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	0412      	lsls	r2, r2, #16
 8002926:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	3b01      	subs	r3, #1
 8002938:	021a      	lsls	r2, r3, #8
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2200      	movs	r2, #0
 800294c:	2120      	movs	r1, #32
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 faa8 	bl	8002ea4 <OSPI_WaitFlagStateUntilTimeout>
 8002954:	4603      	mov	r3, r0
 8002956:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d146      	bne.n	80029ec <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	1e5a      	subs	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	430a      	orrs	r2, r1
 800298a:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002994:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d107      	bne.n	80029d4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689a      	ldr	r2, [r3, #8]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0202 	orr.w	r2, r2, #2
 80029d2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029dc:	d103      	bne.n	80029e6 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
 80029e4:	e002      	b.n	80029ec <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2202      	movs	r2, #2
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	f8e0f8f4 	.word	0xf8e0f8f4

080029fc <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	e015      	b.n	8002a40 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0202 	bic.w	r2, r2, #2
 8002a32:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f007 fadf 	bl	8009ff8 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b08a      	sub	sp, #40	; 0x28
 8002a4e:	af02      	add	r7, sp, #8
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002a56:	f7fe fb07 	bl	8001068 <HAL_GetTick>
 8002a5a:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d104      	bne.n	8002a78 <HAL_OSPI_Command+0x2e>
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a76:	d10d      	bne.n	8002a94 <HAL_OSPI_Command+0x4a>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	2b14      	cmp	r3, #20
 8002a7c:	d103      	bne.n	8002a86 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d006      	beq.n	8002a94 <HAL_OSPI_Command+0x4a>
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	2b24      	cmp	r3, #36	; 0x24
 8002a8a:	d153      	bne.n	8002b34 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d14f      	bne.n	8002b34 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2120      	movs	r1, #32
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fa00 	bl	8002ea4 <OSPI_WaitFlagStateUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002aa8:	7ffb      	ldrb	r3, [r7, #31]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d148      	bne.n	8002b40 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8002ab4:	68b9      	ldr	r1, [r7, #8]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 fa2c 	bl	8002f14 <OSPI_ConfigCmd>
 8002abc:	4603      	mov	r3, r0
 8002abe:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8002ac0:	7ffb      	ldrb	r3, [r7, #31]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d13c      	bne.n	8002b40 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10e      	bne.n	8002aec <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f9e3 	bl	8002ea4 <OSPI_WaitFlagStateUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002aea:	e029      	b.n	8002b40 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2204      	movs	r2, #4
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002afa:	e021      	b.n	8002b40 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10b      	bne.n	8002b1c <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b08:	2b24      	cmp	r3, #36	; 0x24
 8002b0a:	d103      	bne.n	8002b14 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2204      	movs	r2, #4
 8002b10:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002b12:	e015      	b.n	8002b40 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2214      	movs	r2, #20
 8002b18:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002b1a:	e011      	b.n	8002b40 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	2b14      	cmp	r3, #20
 8002b22:	d103      	bne.n	8002b2c <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2204      	movs	r2, #4
 8002b28:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002b2a:	e009      	b.n	8002b40 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2224      	movs	r2, #36	; 0x24
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002b32:	e005      	b.n	8002b40 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2210      	movs	r2, #16
 8002b3c:	649a      	str	r2, [r3, #72]	; 0x48
 8002b3e:	e000      	b.n	8002b42 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8002b40:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3720      	adds	r7, #32
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af02      	add	r7, sp, #8
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7fe fa86 	bl	8001068 <HAL_GetTick>
 8002b5c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3350      	adds	r3, #80	; 0x50
 8002b64:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2208      	movs	r2, #8
 8002b74:	649a      	str	r2, [r3, #72]	; 0x48
 8002b76:	e057      	b.n	8002c28 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d14e      	bne.n	8002c1e <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ba8:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f975 	bl	8002ea4 <OSPI_WaitFlagStateUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002bbe:	7ffb      	ldrb	r3, [r7, #31]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d113      	bne.n	8002bec <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1df      	bne.n	8002baa <HAL_OSPI_Transmit+0x5e>
 8002bea:	e000      	b.n	8002bee <HAL_OSPI_Transmit+0xa2>
          break;
 8002bec:	bf00      	nop

      if (status == HAL_OK)
 8002bee:	7ffb      	ldrb	r3, [r7, #31]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d119      	bne.n	8002c28 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	2102      	movs	r1, #2
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f950 	bl	8002ea4 <OSPI_WaitFlagStateUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002c08:	7ffb      	ldrb	r3, [r7, #31]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10c      	bne.n	8002c28 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2202      	movs	r2, #2
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
 8002c1c:	e004      	b.n	8002c28 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2210      	movs	r2, #16
 8002c26:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002c28:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b08c      	sub	sp, #48	; 0x30
 8002c36:	af02      	add	r7, sp, #8
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002c3e:	f7fe fa13 	bl	8001068 <HAL_GetTick>
 8002c42:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	3350      	adds	r3, #80	; 0x50
 8002c4a:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c52:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002c5c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d106      	bne.n	8002c72 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	649a      	str	r2, [r3, #72]	; 0x48
 8002c70:	e07c      	b.n	8002d6c <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d172      	bne.n	8002d60 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ca6:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cb0:	d104      	bne.n	8002cbc <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	649a      	str	r2, [r3, #72]	; 0x48
 8002cba:	e011      	b.n	8002ce0 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d004      	beq.n	8002cd6 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	649a      	str	r2, [r3, #72]	; 0x48
 8002cd4:	e004      	b.n	8002ce0 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	697a      	ldr	r2, [r7, #20]
 8002cdc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	6a3b      	ldr	r3, [r7, #32]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	2106      	movs	r1, #6
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f8da 	bl	8002ea4 <OSPI_WaitFlagStateUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8002cf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d114      	bne.n	8002d28 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	7812      	ldrb	r2, [r2, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d18:	1e5a      	subs	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1dc      	bne.n	8002ce0 <HAL_OSPI_Receive+0xae>
 8002d26:	e000      	b.n	8002d2a <HAL_OSPI_Receive+0xf8>
          break;
 8002d28:	bf00      	nop

      if (status == HAL_OK)
 8002d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d11c      	bne.n	8002d6c <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f8b1 	bl	8002ea4 <OSPI_WaitFlagStateUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8002d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10d      	bne.n	8002d6c <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2202      	movs	r2, #2
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	645a      	str	r2, [r3, #68]	; 0x44
 8002d5e:	e005      	b.n	8002d6c <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2210      	movs	r2, #16
 8002d6a:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3728      	adds	r7, #40	; 0x28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b08a      	sub	sp, #40	; 0x28
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002d84:	f7fe f970 	bl	8001068 <HAL_GetTick>
 8002d88:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d90:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002d9a:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d164      	bne.n	8002e6e <HAL_OSPI_AutoPolling+0xf6>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dac:	d15f      	bne.n	8002e6e <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2120      	movs	r1, #32
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 f873 	bl	8002ea4 <OSPI_WaitFlagStateUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002dc2:	7ffb      	ldrb	r3, [r7, #31]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d158      	bne.n	8002e7a <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	6852      	ldr	r2, [r2, #4]
 8002ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	6912      	ldr	r2, [r2, #16]
 8002de8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	431a      	orrs	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002e0a:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e14:	d104      	bne.n	8002e20 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	649a      	str	r2, [r3, #72]	; 0x48
 8002e1e:	e011      	b.n	8002e44 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002e28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	649a      	str	r2, [r3, #72]	; 0x48
 8002e38:	e004      	b.n	8002e44 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2108      	movs	r1, #8
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f828 	bl	8002ea4 <OSPI_WaitFlagStateUntilTimeout>
 8002e54:	4603      	mov	r3, r0
 8002e56:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8002e58:	7ffb      	ldrb	r3, [r7, #31]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10d      	bne.n	8002e7a <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2208      	movs	r2, #8
 8002e64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002e6c:	e005      	b.n	8002e7a <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2210      	movs	r2, #16
 8002e76:	649a      	str	r2, [r3, #72]	; 0x48
 8002e78:	e000      	b.n	8002e7c <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8002e7a:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002e7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002eb4:	e01a      	b.n	8002eec <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ebc:	d016      	beq.n	8002eec <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7fe f8d3 	bl	8001068 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d10b      	bne.n	8002eec <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eda:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee0:	f043 0201 	orr.w	r2, r3, #1
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e00e      	b.n	8002f0a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6a1a      	ldr	r2, [r3, #32]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf14      	ite	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	2300      	moveq	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d1d6      	bne.n	8002eb6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f30:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10a      	bne.n	8002f50 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d114      	bne.n	8002f82 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f60:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002f6a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002f74:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	e013      	b.n	8002faa <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f8a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002f94:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002f9e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d012      	beq.n	8002fe6 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd8:	4319      	orrs	r1, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 021f 	bic.w	r2, r3, #31
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3a01      	subs	r2, #1
 8003012:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8099 	beq.w	8003150 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d055      	beq.n	80030d2 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01e      	beq.n	800306c <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4b68      	ldr	r3, [pc, #416]	; (80031d4 <OSPI_ConfigCmd+0x2c0>)
 8003034:	4013      	ands	r3, r2
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	68d1      	ldr	r1, [r2, #12]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	6952      	ldr	r2, [r2, #20]
 800303e:	4311      	orrs	r1, r2
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	6912      	ldr	r2, [r2, #16]
 8003044:	4311      	orrs	r1, r2
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	69d2      	ldr	r2, [r2, #28]
 800304a:	4311      	orrs	r1, r2
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003050:	4311      	orrs	r1, r2
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	6a12      	ldr	r2, [r2, #32]
 8003056:	4311      	orrs	r1, r2
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800305c:	4311      	orrs	r1, r2
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003062:	430a      	orrs	r2, r1
 8003064:	431a      	orrs	r2, r3
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	e028      	b.n	80030be <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	68d1      	ldr	r1, [r2, #12]
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	6952      	ldr	r2, [r2, #20]
 8003080:	4311      	orrs	r1, r2
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	6912      	ldr	r2, [r2, #16]
 8003086:	4311      	orrs	r1, r2
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	69d2      	ldr	r2, [r2, #28]
 800308c:	4311      	orrs	r1, r2
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003092:	4311      	orrs	r1, r2
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	6a12      	ldr	r2, [r2, #32]
 8003098:	430a      	orrs	r2, r1
 800309a:	431a      	orrs	r2, r3
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030a8:	d109      	bne.n	80030be <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d105      	bne.n	80030be <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	683a      	ldr	r2, [r7, #0]
 80030cc:	6992      	ldr	r2, [r2, #24]
 80030ce:	649a      	str	r2, [r3, #72]	; 0x48
 80030d0:	e078      	b.n	80031c4 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d017      	beq.n	800310a <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80030e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	68d1      	ldr	r1, [r2, #12]
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	6952      	ldr	r2, [r2, #20]
 80030ee:	4311      	orrs	r1, r2
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	6912      	ldr	r2, [r2, #16]
 80030f4:	4311      	orrs	r1, r2
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030fa:	4311      	orrs	r1, r2
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003100:	430a      	orrs	r2, r1
 8003102:	431a      	orrs	r2, r3
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	e01d      	b.n	8003146 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68d9      	ldr	r1, [r3, #12]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4319      	orrs	r1, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	430b      	orrs	r3, r1
 8003122:	431a      	orrs	r2, r3
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003130:	d109      	bne.n	8003146 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003136:	2b08      	cmp	r3, #8
 8003138:	d105      	bne.n	8003146 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e039      	b.n	80031c4 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d030      	beq.n	80031ba <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	2b00      	cmp	r3, #0
 800315e:	d017      	beq.n	8003190 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003168:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	69d1      	ldr	r1, [r2, #28]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003174:	4311      	orrs	r1, r2
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	6a12      	ldr	r2, [r2, #32]
 800317a:	4311      	orrs	r1, r2
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003180:	4311      	orrs	r1, r2
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003186:	430a      	orrs	r2, r1
 8003188:	431a      	orrs	r2, r3
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e00e      	b.n	80031ae <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	69d9      	ldr	r1, [r3, #28]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	4319      	orrs	r1, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	430b      	orrs	r3, r1
 80031a8:	431a      	orrs	r2, r3
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	6992      	ldr	r2, [r2, #24]
 80031b6:	649a      	str	r2, [r3, #72]	; 0x48
 80031b8:	e004      	b.n	80031c4 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2208      	movs	r2, #8
 80031c2:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80031c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3724      	adds	r7, #36	; 0x24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	f0ffc0c0 	.word	0xf0ffc0c0

080031d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031dc:	4b0d      	ldr	r3, [pc, #52]	; (8003214 <HAL_PWREx_GetVoltageRange+0x3c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e8:	d102      	bne.n	80031f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80031ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ee:	e00b      	b.n	8003208 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <HAL_PWREx_GetVoltageRange+0x3c>)
 80031f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fe:	d102      	bne.n	8003206 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003200:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003204:	e000      	b.n	8003208 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003206:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	40007000 	.word	0x40007000

08003218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d141      	bne.n	80032aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d131      	bne.n	8003298 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003234:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323a:	4a46      	ldr	r2, [pc, #280]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003244:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800324c:	4a41      	ldr	r2, [pc, #260]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003254:	4b40      	ldr	r3, [pc, #256]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2232      	movs	r2, #50	; 0x32
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	4a3f      	ldr	r2, [pc, #252]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	0c9b      	lsrs	r3, r3, #18
 8003266:	3301      	adds	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326a:	e002      	b.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3b01      	subs	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003272:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d102      	bne.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f2      	bne.n	800326c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003286:	4b33      	ldr	r3, [pc, #204]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003292:	d158      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e057      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003298:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329e:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032a8:	e04d      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b0:	d141      	bne.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032be:	d131      	bne.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c6:	4a23      	ldr	r2, [pc, #140]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d8:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2232      	movs	r2, #50	; 0x32
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	0c9b      	lsrs	r3, r3, #18
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f6:	e002      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d102      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f2      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d112      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e011      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003334:	e007      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003344:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40007000 	.word	0x40007000
 8003358:	200000d0 	.word	0x200000d0
 800335c:	431bde83 	.word	0x431bde83

08003360 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	f000 bc08 	b.w	8003b84 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003374:	4b96      	ldr	r3, [pc, #600]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800337e:	4b94      	ldr	r3, [pc, #592]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b00      	cmp	r3, #0
 8003392:	f000 80e4 	beq.w	800355e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <HAL_RCC_OscConfig+0x4c>
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b0c      	cmp	r3, #12
 80033a0:	f040 808b 	bne.w	80034ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	f040 8087 	bne.w	80034ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033ac:	4b88      	ldr	r3, [pc, #544]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_OscConfig+0x64>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e3df      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1a      	ldr	r2, [r3, #32]
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <HAL_RCC_OscConfig+0x7e>
 80033d4:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033dc:	e005      	b.n	80033ea <HAL_RCC_OscConfig+0x8a>
 80033de:	4b7c      	ldr	r3, [pc, #496]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80033e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d223      	bcs.n	8003436 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fdfe 	bl	8003ff4 <RCC_SetFlashLatencyFromMSIRange>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e3c0      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003402:	4b73      	ldr	r3, [pc, #460]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a72      	ldr	r2, [pc, #456]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	4b70      	ldr	r3, [pc, #448]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	496d      	ldr	r1, [pc, #436]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800341c:	4313      	orrs	r3, r2
 800341e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003420:	4b6b      	ldr	r3, [pc, #428]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	4968      	ldr	r1, [pc, #416]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
 8003434:	e025      	b.n	8003482 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003436:	4b66      	ldr	r3, [pc, #408]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a65      	ldr	r2, [pc, #404]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	4960      	ldr	r1, [pc, #384]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003450:	4313      	orrs	r3, r2
 8003452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003454:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	495b      	ldr	r1, [pc, #364]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fdbe 	bl	8003ff4 <RCC_SetFlashLatencyFromMSIRange>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e380      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003482:	f000 fcc1 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003486:	4602      	mov	r2, r0
 8003488:	4b51      	ldr	r3, [pc, #324]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	4950      	ldr	r1, [pc, #320]	; (80035d4 <HAL_RCC_OscConfig+0x274>)
 8003494:	5ccb      	ldrb	r3, [r1, r3]
 8003496:	f003 031f 	and.w	r3, r3, #31
 800349a:	fa22 f303 	lsr.w	r3, r2, r3
 800349e:	4a4e      	ldr	r2, [pc, #312]	; (80035d8 <HAL_RCC_OscConfig+0x278>)
 80034a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034a2:	4b4e      	ldr	r3, [pc, #312]	; (80035dc <HAL_RCC_OscConfig+0x27c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f006 fe48 	bl	800a13c <HAL_InitTick>
 80034ac:	4603      	mov	r3, r0
 80034ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d052      	beq.n	800355c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
 80034b8:	e364      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d032      	beq.n	8003528 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034c2:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a42      	ldr	r2, [pc, #264]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ce:	f7fd fdcb 	bl	8001068 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d6:	f7fd fdc7 	bl	8001068 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e34d      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034e8:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a35      	ldr	r2, [pc, #212]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b33      	ldr	r3, [pc, #204]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4930      	ldr	r1, [pc, #192]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003512:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	492b      	ldr	r1, [pc, #172]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
 8003526:	e01a      	b.n	800355e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003528:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a28      	ldr	r2, [pc, #160]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800352e:	f023 0301 	bic.w	r3, r3, #1
 8003532:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003534:	f7fd fd98 	bl	8001068 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800353c:	f7fd fd94 	bl	8001068 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e31a      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x1dc>
 800355a:	e000      	b.n	800355e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800355c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d073      	beq.n	8003652 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	2b08      	cmp	r3, #8
 800356e:	d005      	beq.n	800357c <HAL_RCC_OscConfig+0x21c>
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d10e      	bne.n	8003594 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d10b      	bne.n	8003594 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d063      	beq.n	8003650 <HAL_RCC_OscConfig+0x2f0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d15f      	bne.n	8003650 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e2f7      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359c:	d106      	bne.n	80035ac <HAL_RCC_OscConfig+0x24c>
 800359e:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a0b      	ldr	r2, [pc, #44]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e025      	b.n	80035f8 <HAL_RCC_OscConfig+0x298>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b4:	d114      	bne.n	80035e0 <HAL_RCC_OscConfig+0x280>
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a02      	ldr	r2, [pc, #8]	; (80035d0 <HAL_RCC_OscConfig+0x270>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e013      	b.n	80035f8 <HAL_RCC_OscConfig+0x298>
 80035d0:	40021000 	.word	0x40021000
 80035d4:	0800ae64 	.word	0x0800ae64
 80035d8:	200000d0 	.word	0x200000d0
 80035dc:	20000034 	.word	0x20000034
 80035e0:	4ba0      	ldr	r3, [pc, #640]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a9f      	ldr	r2, [pc, #636]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b9d      	ldr	r3, [pc, #628]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a9c      	ldr	r2, [pc, #624]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80035f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d013      	beq.n	8003628 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fd32 	bl	8001068 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003608:	f7fd fd2e 	bl	8001068 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e2b4      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800361a:	4b92      	ldr	r3, [pc, #584]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x2a8>
 8003626:	e014      	b.n	8003652 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fd fd1e 	bl	8001068 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7fd fd1a 	bl	8001068 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e2a0      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003642:	4b88      	ldr	r3, [pc, #544]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1f0      	bne.n	8003630 <HAL_RCC_OscConfig+0x2d0>
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d060      	beq.n	8003720 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d005      	beq.n	8003670 <HAL_RCC_OscConfig+0x310>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d119      	bne.n	800369e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d116      	bne.n	800369e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003670:	4b7c      	ldr	r3, [pc, #496]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_OscConfig+0x328>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e27d      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b76      	ldr	r3, [pc, #472]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	061b      	lsls	r3, r3, #24
 8003696:	4973      	ldr	r1, [pc, #460]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003698:	4313      	orrs	r3, r2
 800369a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800369c:	e040      	b.n	8003720 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d023      	beq.n	80036ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a6:	4b6f      	ldr	r3, [pc, #444]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6e      	ldr	r2, [pc, #440]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b2:	f7fd fcd9 	bl	8001068 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ba:	f7fd fcd5 	bl	8001068 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e25b      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036cc:	4b65      	ldr	r3, [pc, #404]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d8:	4b62      	ldr	r3, [pc, #392]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	495f      	ldr	r1, [pc, #380]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
 80036ec:	e018      	b.n	8003720 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ee:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a5c      	ldr	r2, [pc, #368]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80036f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fd fcb5 	bl	8001068 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003702:	f7fd fcb1 	bl	8001068 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e237      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003714:	4b53      	ldr	r3, [pc, #332]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0308 	and.w	r3, r3, #8
 8003728:	2b00      	cmp	r3, #0
 800372a:	d03c      	beq.n	80037a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d01c      	beq.n	800376e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003734:	4b4b      	ldr	r3, [pc, #300]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373a:	4a4a      	ldr	r2, [pc, #296]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 800373c:	f043 0301 	orr.w	r3, r3, #1
 8003740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003744:	f7fd fc90 	bl	8001068 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374c:	f7fd fc8c 	bl	8001068 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e212      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800375e:	4b41      	ldr	r3, [pc, #260]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0ef      	beq.n	800374c <HAL_RCC_OscConfig+0x3ec>
 800376c:	e01b      	b.n	80037a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376e:	4b3d      	ldr	r3, [pc, #244]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003770:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003774:	4a3b      	ldr	r2, [pc, #236]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377e:	f7fd fc73 	bl	8001068 <HAL_GetTick>
 8003782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003786:	f7fd fc6f 	bl	8001068 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e1f5      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003798:	4b32      	ldr	r3, [pc, #200]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 800379a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1ef      	bne.n	8003786 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80a6 	beq.w	8003900 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b4:	2300      	movs	r3, #0
 80037b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037b8:	4b2a      	ldr	r3, [pc, #168]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10d      	bne.n	80037e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	4a26      	ldr	r2, [pc, #152]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80037ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ce:	6593      	str	r3, [r2, #88]	; 0x58
 80037d0:	4b24      	ldr	r3, [pc, #144]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 80037d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037dc:	2301      	movs	r3, #1
 80037de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037e0:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_RCC_OscConfig+0x508>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d118      	bne.n	800381e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ec:	4b1e      	ldr	r3, [pc, #120]	; (8003868 <HAL_RCC_OscConfig+0x508>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <HAL_RCC_OscConfig+0x508>)
 80037f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f8:	f7fd fc36 	bl	8001068 <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003800:	f7fd fc32 	bl	8001068 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e1b8      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_RCC_OscConfig+0x508>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d108      	bne.n	8003838 <HAL_RCC_OscConfig+0x4d8>
 8003826:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800382c:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 800382e:	f043 0301 	orr.w	r3, r3, #1
 8003832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003836:	e029      	b.n	800388c <HAL_RCC_OscConfig+0x52c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	2b05      	cmp	r3, #5
 800383e:	d115      	bne.n	800386c <HAL_RCC_OscConfig+0x50c>
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	4a07      	ldr	r2, [pc, #28]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003848:	f043 0304 	orr.w	r3, r3, #4
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	4a03      	ldr	r2, [pc, #12]	; (8003864 <HAL_RCC_OscConfig+0x504>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003860:	e014      	b.n	800388c <HAL_RCC_OscConfig+0x52c>
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	40007000 	.word	0x40007000
 800386c:	4b9d      	ldr	r3, [pc, #628]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 800386e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003872:	4a9c      	ldr	r2, [pc, #624]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800387c:	4b99      	ldr	r3, [pc, #612]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	4a98      	ldr	r2, [pc, #608]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003884:	f023 0304 	bic.w	r3, r3, #4
 8003888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d016      	beq.n	80038c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003894:	f7fd fbe8 	bl	8001068 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389c:	f7fd fbe4 	bl	8001068 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e168      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b2:	4b8c      	ldr	r3, [pc, #560]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ed      	beq.n	800389c <HAL_RCC_OscConfig+0x53c>
 80038c0:	e015      	b.n	80038ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fd fbd1 	bl	8001068 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ca:	f7fd fbcd 	bl	8001068 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e151      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038e0:	4b80      	ldr	r3, [pc, #512]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ed      	bne.n	80038ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ee:	7ffb      	ldrb	r3, [r7, #31]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f4:	4b7b      	ldr	r3, [pc, #492]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	4a7a      	ldr	r2, [pc, #488]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 80038fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	2b00      	cmp	r3, #0
 800390a:	d03c      	beq.n	8003986 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01c      	beq.n	800394e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003914:	4b73      	ldr	r3, [pc, #460]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800391a:	4a72      	ldr	r2, [pc, #456]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd fba0 	bl	8001068 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800392c:	f7fd fb9c 	bl	8001068 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e122      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800393e:	4b69      	ldr	r3, [pc, #420]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003940:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ef      	beq.n	800392c <HAL_RCC_OscConfig+0x5cc>
 800394c:	e01b      	b.n	8003986 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800394e:	4b65      	ldr	r3, [pc, #404]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003954:	4a63      	ldr	r2, [pc, #396]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003956:	f023 0301 	bic.w	r3, r3, #1
 800395a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800395e:	f7fd fb83 	bl	8001068 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003966:	f7fd fb7f 	bl	8001068 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e105      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003978:	4b5a      	ldr	r3, [pc, #360]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 800397a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1ef      	bne.n	8003966 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80f9 	beq.w	8003b82 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	2b02      	cmp	r3, #2
 8003996:	f040 80cf 	bne.w	8003b38 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800399a:	4b52      	ldr	r3, [pc, #328]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f003 0203 	and.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d12c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	3b01      	subs	r3, #1
 80039ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d123      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d11b      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d113      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	085b      	lsrs	r3, r3, #1
 80039ec:	3b01      	subs	r3, #1
 80039ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d109      	bne.n	8003a08 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	3b01      	subs	r3, #1
 8003a02:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d071      	beq.n	8003aec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	d068      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a0e:	4b35      	ldr	r3, [pc, #212]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d105      	bne.n	8003a26 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003a1a:	4b32      	ldr	r3, [pc, #200]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e0ac      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a2a:	4b2e      	ldr	r3, [pc, #184]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a2d      	ldr	r2, [pc, #180]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a36:	f7fd fb17 	bl	8001068 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3e:	f7fd fb13 	bl	8001068 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e099      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a50:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1f0      	bne.n	8003a3e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a5c:	4b21      	ldr	r3, [pc, #132]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <HAL_RCC_OscConfig+0x788>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a6c:	3a01      	subs	r2, #1
 8003a6e:	0112      	lsls	r2, r2, #4
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a76:	0212      	lsls	r2, r2, #8
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a7e:	0852      	lsrs	r2, r2, #1
 8003a80:	3a01      	subs	r2, #1
 8003a82:	0552      	lsls	r2, r2, #21
 8003a84:	4311      	orrs	r1, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003a8a:	0852      	lsrs	r2, r2, #1
 8003a8c:	3a01      	subs	r2, #1
 8003a8e:	0652      	lsls	r2, r2, #25
 8003a90:	4311      	orrs	r1, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a96:	06d2      	lsls	r2, r2, #27
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	4912      	ldr	r1, [pc, #72]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003aac:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a0c      	ldr	r2, [pc, #48]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab8:	f7fd fad6 	bl	8001068 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd fad2 	bl	8001068 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e058      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ad2:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <HAL_RCC_OscConfig+0x784>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0f0      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ade:	e050      	b.n	8003b82 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e04f      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d144      	bne.n	8003b82 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003af8:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b04:	4b21      	ldr	r3, [pc, #132]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b10:	f7fd faaa 	bl	8001068 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b18:	f7fd faa6 	bl	8001068 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e02c      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2a:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f0      	beq.n	8003b18 <HAL_RCC_OscConfig+0x7b8>
 8003b36:	e024      	b.n	8003b82 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	2b0c      	cmp	r3, #12
 8003b3c:	d01f      	beq.n	8003b7e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fd fa8d 	bl	8001068 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b52:	f7fd fa89 	bl	8001068 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e00f      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b64:	4b09      	ldr	r3, [pc, #36]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f0      	bne.n	8003b52 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	4905      	ldr	r1, [pc, #20]	; (8003b8c <HAL_RCC_OscConfig+0x82c>)
 8003b76:	4b06      	ldr	r3, [pc, #24]	; (8003b90 <HAL_RCC_OscConfig+0x830>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	60cb      	str	r3, [r1, #12]
 8003b7c:	e001      	b.n	8003b82 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	feeefffc 	.word	0xfeeefffc

08003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e11d      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b90      	ldr	r3, [pc, #576]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d910      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b8d      	ldr	r3, [pc, #564]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 020f 	bic.w	r2, r3, #15
 8003bc2:	498b      	ldr	r1, [pc, #556]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b89      	ldr	r3, [pc, #548]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e105      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d010      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	4b81      	ldr	r3, [pc, #516]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d908      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b7e      	ldr	r3, [pc, #504]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	497b      	ldr	r1, [pc, #492]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d079      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d11e      	bne.n	8003c5c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c1e:	4b75      	ldr	r3, [pc, #468]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0dc      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003c2e:	f000 fa3b 	bl	80040a8 <RCC_GetSysClockFreqFromPLLSource>
 8003c32:	4603      	mov	r3, r0
 8003c34:	4a70      	ldr	r2, [pc, #448]	; (8003df8 <HAL_RCC_ClockConfig+0x264>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d946      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003c3a:	4b6e      	ldr	r3, [pc, #440]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d140      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c46:	4b6b      	ldr	r3, [pc, #428]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c4e:	4a69      	ldr	r2, [pc, #420]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003c56:	2380      	movs	r3, #128	; 0x80
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e035      	b.n	8003cc8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c64:	4b63      	ldr	r3, [pc, #396]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d115      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0b9      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c7c:	4b5d      	ldr	r3, [pc, #372]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d109      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0ad      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c8c:	4b59      	ldr	r3, [pc, #356]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d101      	bne.n	8003c9c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0a5      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003c9c:	f000 f8b4 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4a55      	ldr	r2, [pc, #340]	; (8003df8 <HAL_RCC_ClockConfig+0x264>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d90f      	bls.n	8003cc8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ca8:	4b52      	ldr	r3, [pc, #328]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d109      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cb4:	4b4f      	ldr	r3, [pc, #316]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cbc:	4a4d      	ldr	r2, [pc, #308]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cc8:	4b4a      	ldr	r3, [pc, #296]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f023 0203 	bic.w	r2, r3, #3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4947      	ldr	r1, [pc, #284]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cda:	f7fd f9c5 	bl	8001068 <HAL_GetTick>
 8003cde:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce0:	e00a      	b.n	8003cf8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce2:	f7fd f9c1 	bl	8001068 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e077      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cf8:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 020c 	and.w	r2, r3, #12
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d1eb      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b80      	cmp	r3, #128	; 0x80
 8003d0e:	d105      	bne.n	8003d1c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d10:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	4a37      	ldr	r2, [pc, #220]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d1a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d010      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	4b31      	ldr	r3, [pc, #196]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d208      	bcs.n	8003d4a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d38:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	492b      	ldr	r1, [pc, #172]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4a:	4b29      	ldr	r3, [pc, #164]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d210      	bcs.n	8003d7a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d58:	4b25      	ldr	r3, [pc, #148]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f023 020f 	bic.w	r2, r3, #15
 8003d60:	4923      	ldr	r1, [pc, #140]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d68:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <HAL_RCC_ClockConfig+0x25c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 030f 	and.w	r3, r3, #15
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e036      	b.n	8003de8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0304 	and.w	r3, r3, #4
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d86:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	4918      	ldr	r1, [pc, #96]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da4:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4910      	ldr	r1, [pc, #64]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003db8:	f000 f826 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <HAL_RCC_ClockConfig+0x260>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 030f 	and.w	r3, r3, #15
 8003dc8:	490c      	ldr	r1, [pc, #48]	; (8003dfc <HAL_RCC_ClockConfig+0x268>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd4:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <HAL_RCC_ClockConfig+0x26c>)
 8003dd6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_RCC_ClockConfig+0x270>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f006 f9ad 	bl	800a13c <HAL_InitTick>
 8003de2:	4603      	mov	r3, r0
 8003de4:	73fb      	strb	r3, [r7, #15]

  return status;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40022000 	.word	0x40022000
 8003df4:	40021000 	.word	0x40021000
 8003df8:	04c4b400 	.word	0x04c4b400
 8003dfc:	0800ae64 	.word	0x0800ae64
 8003e00:	200000d0 	.word	0x200000d0
 8003e04:	20000034 	.word	0x20000034

08003e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e16:	4b3e      	ldr	r3, [pc, #248]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e20:	4b3b      	ldr	r3, [pc, #236]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x34>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d121      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d11e      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e3c:	4b34      	ldr	r3, [pc, #208]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e48:	4b31      	ldr	r3, [pc, #196]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e005      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e58:	4b2d      	ldr	r3, [pc, #180]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e64:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d102      	bne.n	8003e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e80:	4b25      	ldr	r3, [pc, #148]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e004      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e8c:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d134      	bne.n	8003f00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e96:	4b1e      	ldr	r3, [pc, #120]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d003      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0xa6>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d003      	beq.n	8003eb4 <HAL_RCC_GetSysClockFreq+0xac>
 8003eac:	e005      	b.n	8003eba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003eae:	4b1a      	ldr	r3, [pc, #104]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eb0:	617b      	str	r3, [r7, #20]
      break;
 8003eb2:	e005      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x114>)
 8003eb6:	617b      	str	r3, [r7, #20]
      break;
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	617b      	str	r3, [r7, #20]
      break;
 8003ebe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ec0:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	091b      	lsrs	r3, r3, #4
 8003ec6:	f003 030f 	and.w	r3, r3, #15
 8003eca:	3301      	adds	r3, #1
 8003ecc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	fb03 f202 	mul.w	r2, r3, r2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ee6:	4b0a      	ldr	r3, [pc, #40]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	0e5b      	lsrs	r3, r3, #25
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f00:	69bb      	ldr	r3, [r7, #24]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3724      	adds	r7, #36	; 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	40021000 	.word	0x40021000
 8003f14:	0800ae7c 	.word	0x0800ae7c
 8003f18:	00f42400 	.word	0x00f42400
 8003f1c:	007a1200 	.word	0x007a1200

08003f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f24:	4b03      	ldr	r3, [pc, #12]	; (8003f34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f26:	681b      	ldr	r3, [r3, #0]
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	200000d0 	.word	0x200000d0

08003f38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f3c:	f7ff fff0 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	0a1b      	lsrs	r3, r3, #8
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	4904      	ldr	r1, [pc, #16]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f4e:	5ccb      	ldrb	r3, [r1, r3]
 8003f50:	f003 031f 	and.w	r3, r3, #31
 8003f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	0800ae74 	.word	0x0800ae74

08003f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f68:	f7ff ffda 	bl	8003f20 <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	0adb      	lsrs	r3, r3, #11
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4904      	ldr	r1, [pc, #16]	; (8003f8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	0800ae74 	.word	0x0800ae74

08003f90 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	220f      	movs	r2, #15
 8003f9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003fa0:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_RCC_GetClockConfig+0x5c>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0203 	and.w	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003fac:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <HAL_RCC_GetClockConfig+0x5c>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003fb8:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <HAL_RCC_GetClockConfig+0x5c>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003fc4:	4b09      	ldr	r3, [pc, #36]	; (8003fec <HAL_RCC_GetClockConfig+0x5c>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	08db      	lsrs	r3, r3, #3
 8003fca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <HAL_RCC_GetClockConfig+0x60>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 020f 	and.w	r2, r3, #15
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	601a      	str	r2, [r3, #0]
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40022000 	.word	0x40022000

08003ff4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004000:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800400c:	f7ff f8e4 	bl	80031d8 <HAL_PWREx_GetVoltageRange>
 8004010:	6178      	str	r0, [r7, #20]
 8004012:	e014      	b.n	800403e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004014:	4b22      	ldr	r3, [pc, #136]	; (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800401a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401e:	6593      	str	r3, [r2, #88]	; 0x58
 8004020:	4b1f      	ldr	r3, [pc, #124]	; (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800402c:	f7ff f8d4 	bl	80031d8 <HAL_PWREx_GetVoltageRange>
 8004030:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004032:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004036:	4a1a      	ldr	r2, [pc, #104]	; (80040a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004044:	d10b      	bne.n	800405e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b80      	cmp	r3, #128	; 0x80
 800404a:	d913      	bls.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2ba0      	cmp	r3, #160	; 0xa0
 8004050:	d902      	bls.n	8004058 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004052:	2302      	movs	r3, #2
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	e00d      	b.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004058:	2301      	movs	r3, #1
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	e00a      	b.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b7f      	cmp	r3, #127	; 0x7f
 8004062:	d902      	bls.n	800406a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004064:	2302      	movs	r3, #2
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	e004      	b.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b70      	cmp	r3, #112	; 0x70
 800406e:	d101      	bne.n	8004074 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004070:	2301      	movs	r3, #1
 8004072:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f023 020f 	bic.w	r2, r3, #15
 800407c:	4909      	ldr	r1, [pc, #36]	; (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004084:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 030f 	and.w	r3, r3, #15
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	429a      	cmp	r2, r3
 8004090:	d001      	beq.n	8004096 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40021000 	.word	0x40021000
 80040a4:	40022000 	.word	0x40022000

080040a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040ae:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d00b      	beq.n	80040d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d825      	bhi.n	8004110 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d008      	beq.n	80040dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d11f      	bne.n	8004110 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80040d0:	4b25      	ldr	r3, [pc, #148]	; (8004168 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80040d2:	613b      	str	r3, [r7, #16]
    break;
 80040d4:	e01f      	b.n	8004116 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80040d6:	4b25      	ldr	r3, [pc, #148]	; (800416c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80040d8:	613b      	str	r3, [r7, #16]
    break;
 80040da:	e01c      	b.n	8004116 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040dc:	4b21      	ldr	r3, [pc, #132]	; (8004164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d107      	bne.n	80040f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040e8:	4b1e      	ldr	r3, [pc, #120]	; (8004164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ee:	0a1b      	lsrs	r3, r3, #8
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e005      	b.n	8004104 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	091b      	lsrs	r3, r3, #4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004104:	4a1a      	ldr	r2, [pc, #104]	; (8004170 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410c:	613b      	str	r3, [r7, #16]
    break;
 800410e:	e002      	b.n	8004116 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
    break;
 8004114:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	091b      	lsrs	r3, r3, #4
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	3301      	adds	r3, #1
 8004122:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	0a1b      	lsrs	r3, r3, #8
 800412a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	fb03 f202 	mul.w	r2, r3, r2
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800413c:	4b09      	ldr	r3, [pc, #36]	; (8004164 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	0e5b      	lsrs	r3, r3, #25
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	3301      	adds	r3, #1
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	fbb2 f3f3 	udiv	r3, r2, r3
 8004154:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004156:	683b      	ldr	r3, [r7, #0]
}
 8004158:	4618      	mov	r0, r3
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	40021000 	.word	0x40021000
 8004168:	00f42400 	.word	0x00f42400
 800416c:	007a1200 	.word	0x007a1200
 8004170:	0800ae7c 	.word	0x0800ae7c

08004174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800417c:	2300      	movs	r3, #0
 800417e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004180:	2300      	movs	r3, #0
 8004182:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800418c:	2b00      	cmp	r3, #0
 800418e:	d040      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004194:	2b80      	cmp	r3, #128	; 0x80
 8004196:	d02a      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004198:	2b80      	cmp	r3, #128	; 0x80
 800419a:	d825      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800419c:	2b60      	cmp	r3, #96	; 0x60
 800419e:	d026      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80041a0:	2b60      	cmp	r3, #96	; 0x60
 80041a2:	d821      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80041a4:	2b40      	cmp	r3, #64	; 0x40
 80041a6:	d006      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d81d      	bhi.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d009      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80041b0:	2b20      	cmp	r3, #32
 80041b2:	d010      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80041b4:	e018      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80041b6:	4b89      	ldr	r3, [pc, #548]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	4a88      	ldr	r2, [pc, #544]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041c2:	e015      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3304      	adds	r3, #4
 80041c8:	2100      	movs	r1, #0
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fb02 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041d4:	e00c      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3320      	adds	r3, #32
 80041da:	2100      	movs	r1, #0
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fbed 	bl	80049bc <RCCEx_PLLSAI2_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041e6:	e003      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	74fb      	strb	r3, [r7, #19]
      break;
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80041ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041f6:	4b79      	ldr	r3, [pc, #484]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004204:	4975      	ldr	r1, [pc, #468]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800420c:	e001      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420e:	7cfb      	ldrb	r3, [r7, #19]
 8004210:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d047      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d030      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422c:	d82a      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800422e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004232:	d02a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004234:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004238:	d824      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800423a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423e:	d008      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004244:	d81e      	bhi.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800424a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424e:	d010      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004250:	e018      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004252:	4b62      	ldr	r3, [pc, #392]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4a61      	ldr	r2, [pc, #388]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800425e:	e015      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3304      	adds	r3, #4
 8004264:	2100      	movs	r1, #0
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fab4 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 800426c:	4603      	mov	r3, r0
 800426e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004270:	e00c      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3320      	adds	r3, #32
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fb9f 	bl	80049bc <RCCEx_PLLSAI2_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004282:	e003      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	74fb      	strb	r3, [r7, #19]
      break;
 8004288:	e000      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800428a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10b      	bne.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004292:	4b52      	ldr	r3, [pc, #328]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004294:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a0:	494e      	ldr	r1, [pc, #312]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80042a8:	e001      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042aa:	7cfb      	ldrb	r3, [r7, #19]
 80042ac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 809f 	beq.w	80043fa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042bc:	2300      	movs	r3, #0
 80042be:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80042c0:	4b46      	ldr	r3, [pc, #280]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80042d0:	2300      	movs	r3, #0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042d6:	4b41      	ldr	r3, [pc, #260]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042da:	4a40      	ldr	r2, [pc, #256]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042e0:	6593      	str	r3, [r2, #88]	; 0x58
 80042e2:	4b3e      	ldr	r3, [pc, #248]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80042e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ea:	60bb      	str	r3, [r7, #8]
 80042ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ee:	2301      	movs	r3, #1
 80042f0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042f2:	4b3b      	ldr	r3, [pc, #236]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a3a      	ldr	r2, [pc, #232]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042fe:	f7fc feb3 	bl	8001068 <HAL_GetTick>
 8004302:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004304:	e009      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004306:	f7fc feaf 	bl	8001068 <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	2b02      	cmp	r3, #2
 8004312:	d902      	bls.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	74fb      	strb	r3, [r7, #19]
        break;
 8004318:	e005      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ef      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004326:	7cfb      	ldrb	r3, [r7, #19]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d15b      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800432c:	4b2b      	ldr	r3, [pc, #172]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800432e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004336:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01f      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	429a      	cmp	r2, r3
 8004348:	d019      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800434c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004354:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004356:	4b21      	ldr	r3, [pc, #132]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800435e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436c:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800436e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004376:	4a19      	ldr	r2, [pc, #100]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d016      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fc fe6e 	bl	8001068 <HAL_GetTick>
 800438c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438e:	e00b      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004390:	f7fc fe6a 	bl	8001068 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	f241 3288 	movw	r2, #5000	; 0x1388
 800439e:	4293      	cmp	r3, r2
 80043a0:	d902      	bls.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	74fb      	strb	r3, [r7, #19]
            break;
 80043a6:	e006      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a8:	4b0c      	ldr	r3, [pc, #48]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0ec      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80043b6:	7cfb      	ldrb	r3, [r7, #19]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10c      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043bc:	4b07      	ldr	r3, [pc, #28]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043cc:	4903      	ldr	r1, [pc, #12]	; (80043dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80043d4:	e008      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80043d6:	7cfb      	ldrb	r3, [r7, #19]
 80043d8:	74bb      	strb	r3, [r7, #18]
 80043da:	e005      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80043dc:	40021000 	.word	0x40021000
 80043e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e8:	7c7b      	ldrb	r3, [r7, #17]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d105      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ee:	4ba0      	ldr	r3, [pc, #640]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	4a9f      	ldr	r2, [pc, #636]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004406:	4b9a      	ldr	r3, [pc, #616]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f023 0203 	bic.w	r2, r3, #3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004414:	4996      	ldr	r1, [pc, #600]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004428:	4b91      	ldr	r3, [pc, #580]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800442a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442e:	f023 020c 	bic.w	r2, r3, #12
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	498e      	ldr	r1, [pc, #568]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800444a:	4b89      	ldr	r3, [pc, #548]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004450:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	4985      	ldr	r1, [pc, #532]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0308 	and.w	r3, r3, #8
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800446c:	4b80      	ldr	r3, [pc, #512]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004472:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800447a:	497d      	ldr	r1, [pc, #500]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00a      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800448e:	4b78      	ldr	r3, [pc, #480]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449c:	4974      	ldr	r1, [pc, #464]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044b0:	4b6f      	ldr	r3, [pc, #444]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044be:	496c      	ldr	r1, [pc, #432]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00a      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044d2:	4b67      	ldr	r3, [pc, #412]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044e0:	4963      	ldr	r1, [pc, #396]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044e2:	4313      	orrs	r3, r2
 80044e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00a      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80044f4:	4b5e      	ldr	r3, [pc, #376]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004502:	495b      	ldr	r1, [pc, #364]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004504:	4313      	orrs	r3, r2
 8004506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004516:	4b56      	ldr	r3, [pc, #344]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	4952      	ldr	r1, [pc, #328]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00a      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004538:	4b4d      	ldr	r3, [pc, #308]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004546:	494a      	ldr	r1, [pc, #296]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800455a:	4b45      	ldr	r3, [pc, #276]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004568:	4941      	ldr	r1, [pc, #260]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800456a:	4313      	orrs	r3, r2
 800456c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800457c:	4b3c      	ldr	r3, [pc, #240]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800457e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004582:	f023 0203 	bic.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458a:	4939      	ldr	r1, [pc, #228]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d028      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800459e:	4b34      	ldr	r3, [pc, #208]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ac:	4930      	ldr	r1, [pc, #192]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045bc:	d106      	bne.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045be:	4b2c      	ldr	r3, [pc, #176]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4a2b      	ldr	r2, [pc, #172]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045c8:	60d3      	str	r3, [r2, #12]
 80045ca:	e011      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	2101      	movs	r1, #1
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f8f9 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 80045e2:	4603      	mov	r3, r0
 80045e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80045e6:	7cfb      	ldrb	r3, [r7, #19]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d001      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80045ec:	7cfb      	ldrb	r3, [r7, #19]
 80045ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d04d      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004600:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004604:	d108      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004606:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004608:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800460c:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004612:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004616:	e012      	b.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004618:	4b15      	ldr	r3, [pc, #84]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800461e:	4a14      	ldr	r2, [pc, #80]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004624:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004636:	490e      	ldr	r1, [pc, #56]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004642:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004646:	d106      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a08      	ldr	r2, [pc, #32]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800464e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004652:	60d3      	str	r3, [r2, #12]
 8004654:	e020      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800465a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800465e:	d109      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a02      	ldr	r2, [pc, #8]	; (8004670 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800466a:	60d3      	str	r3, [r2, #12]
 800466c:	e014      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800466e:	bf00      	nop
 8004670:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004678:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800467c:	d10c      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3304      	adds	r3, #4
 8004682:	2101      	movs	r1, #1
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f8a5 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 800468a:	4603      	mov	r3, r0
 800468c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800468e:	7cfb      	ldrb	r3, [r7, #19]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d001      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d028      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80046a4:	4b4a      	ldr	r3, [pc, #296]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046b2:	4947      	ldr	r1, [pc, #284]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c2:	d106      	bne.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046c4:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4a41      	ldr	r2, [pc, #260]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ce:	60d3      	str	r3, [r2, #12]
 80046d0:	e011      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046da:	d10c      	bne.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	2101      	movs	r1, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 f876 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80046ec:	7cfb      	ldrb	r3, [r7, #19]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80046f2:	7cfb      	ldrb	r3, [r7, #19]
 80046f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01e      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004702:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004708:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004712:	492f      	ldr	r1, [pc, #188]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004724:	d10c      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3304      	adds	r3, #4
 800472a:	2102      	movs	r1, #2
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f851 	bl	80047d4 <RCCEx_PLLSAI1_Config>
 8004732:	4603      	mov	r3, r0
 8004734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800473c:	7cfb      	ldrb	r3, [r7, #19]
 800473e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00b      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800474c:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800474e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004752:	f023 0204 	bic.w	r2, r3, #4
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475c:	491c      	ldr	r1, [pc, #112]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00b      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004770:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004772:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004776:	f023 0218 	bic.w	r2, r3, #24
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	4913      	ldr	r1, [pc, #76]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d017      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004794:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800479a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a4:	490a      	ldr	r1, [pc, #40]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047b6:	d105      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000

080047d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047e2:	4b72      	ldr	r3, [pc, #456]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00e      	beq.n	800480c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80047ee:	4b6f      	ldr	r3, [pc, #444]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0203 	and.w	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d103      	bne.n	8004806 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
       ||
 8004802:	2b00      	cmp	r3, #0
 8004804:	d142      	bne.n	800488c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
 800480a:	e03f      	b.n	800488c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d018      	beq.n	8004846 <RCCEx_PLLSAI1_Config+0x72>
 8004814:	2b03      	cmp	r3, #3
 8004816:	d825      	bhi.n	8004864 <RCCEx_PLLSAI1_Config+0x90>
 8004818:	2b01      	cmp	r3, #1
 800481a:	d002      	beq.n	8004822 <RCCEx_PLLSAI1_Config+0x4e>
 800481c:	2b02      	cmp	r3, #2
 800481e:	d009      	beq.n	8004834 <RCCEx_PLLSAI1_Config+0x60>
 8004820:	e020      	b.n	8004864 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004822:	4b62      	ldr	r3, [pc, #392]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11d      	bne.n	800486a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004832:	e01a      	b.n	800486a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004834:	4b5d      	ldr	r3, [pc, #372]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483c:	2b00      	cmp	r3, #0
 800483e:	d116      	bne.n	800486e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004844:	e013      	b.n	800486e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004846:	4b59      	ldr	r3, [pc, #356]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004852:	4b56      	ldr	r3, [pc, #344]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004862:	e006      	b.n	8004872 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
      break;
 8004868:	e004      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800486a:	bf00      	nop
 800486c:	e002      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004872:	bf00      	nop
    }

    if(status == HAL_OK)
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d108      	bne.n	800488c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800487a:	4b4c      	ldr	r3, [pc, #304]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f023 0203 	bic.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4949      	ldr	r1, [pc, #292]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004888:	4313      	orrs	r3, r2
 800488a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800488c:	7bfb      	ldrb	r3, [r7, #15]
 800488e:	2b00      	cmp	r3, #0
 8004890:	f040 8086 	bne.w	80049a0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004894:	4b45      	ldr	r3, [pc, #276]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a44      	ldr	r2, [pc, #272]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800489a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800489e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a0:	f7fc fbe2 	bl	8001068 <HAL_GetTick>
 80048a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048a6:	e009      	b.n	80048bc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a8:	f7fc fbde 	bl	8001068 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d902      	bls.n	80048bc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	73fb      	strb	r3, [r7, #15]
        break;
 80048ba:	e005      	b.n	80048c8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1ef      	bne.n	80048a8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d168      	bne.n	80049a0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d113      	bne.n	80048fc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80048d4:	4b35      	ldr	r3, [pc, #212]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80048da:	4013      	ands	r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6892      	ldr	r2, [r2, #8]
 80048e0:	0211      	lsls	r1, r2, #8
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68d2      	ldr	r2, [r2, #12]
 80048e6:	06d2      	lsls	r2, r2, #27
 80048e8:	4311      	orrs	r1, r2
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6852      	ldr	r2, [r2, #4]
 80048ee:	3a01      	subs	r2, #1
 80048f0:	0112      	lsls	r2, r2, #4
 80048f2:	430a      	orrs	r2, r1
 80048f4:	492d      	ldr	r1, [pc, #180]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	610b      	str	r3, [r1, #16]
 80048fa:	e02d      	b.n	8004958 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d115      	bne.n	800492e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004902:	4b2a      	ldr	r3, [pc, #168]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	4b2b      	ldr	r3, [pc, #172]	; (80049b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6892      	ldr	r2, [r2, #8]
 800490e:	0211      	lsls	r1, r2, #8
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6912      	ldr	r2, [r2, #16]
 8004914:	0852      	lsrs	r2, r2, #1
 8004916:	3a01      	subs	r2, #1
 8004918:	0552      	lsls	r2, r2, #21
 800491a:	4311      	orrs	r1, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6852      	ldr	r2, [r2, #4]
 8004920:	3a01      	subs	r2, #1
 8004922:	0112      	lsls	r2, r2, #4
 8004924:	430a      	orrs	r2, r1
 8004926:	4921      	ldr	r1, [pc, #132]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004928:	4313      	orrs	r3, r2
 800492a:	610b      	str	r3, [r1, #16]
 800492c:	e014      	b.n	8004958 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800492e:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004934:	4013      	ands	r3, r2
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	6892      	ldr	r2, [r2, #8]
 800493a:	0211      	lsls	r1, r2, #8
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6952      	ldr	r2, [r2, #20]
 8004940:	0852      	lsrs	r2, r2, #1
 8004942:	3a01      	subs	r2, #1
 8004944:	0652      	lsls	r2, r2, #25
 8004946:	4311      	orrs	r1, r2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6852      	ldr	r2, [r2, #4]
 800494c:	3a01      	subs	r2, #1
 800494e:	0112      	lsls	r2, r2, #4
 8004950:	430a      	orrs	r2, r1
 8004952:	4916      	ldr	r1, [pc, #88]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004954:	4313      	orrs	r3, r2
 8004956:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004958:	4b14      	ldr	r3, [pc, #80]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a13      	ldr	r2, [pc, #76]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800495e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004962:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004964:	f7fc fb80 	bl	8001068 <HAL_GetTick>
 8004968:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800496a:	e009      	b.n	8004980 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800496c:	f7fc fb7c 	bl	8001068 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d902      	bls.n	8004980 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	73fb      	strb	r3, [r7, #15]
          break;
 800497e:	e005      	b.n	800498c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004980:	4b0a      	ldr	r3, [pc, #40]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ef      	beq.n	800496c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800498c:	7bfb      	ldrb	r3, [r7, #15]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004994:	691a      	ldr	r2, [r3, #16]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	4904      	ldr	r1, [pc, #16]	; (80049ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800499c:	4313      	orrs	r3, r2
 800499e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3710      	adds	r7, #16
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	40021000 	.word	0x40021000
 80049b0:	07ff800f 	.word	0x07ff800f
 80049b4:	ff9f800f 	.word	0xff9f800f
 80049b8:	f9ff800f 	.word	0xf9ff800f

080049bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049ca:	4b72      	ldr	r3, [pc, #456]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00e      	beq.n	80049f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80049d6:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0203 	and.w	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d103      	bne.n	80049ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d142      	bne.n	8004a74 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
 80049f2:	e03f      	b.n	8004a74 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d018      	beq.n	8004a2e <RCCEx_PLLSAI2_Config+0x72>
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d825      	bhi.n	8004a4c <RCCEx_PLLSAI2_Config+0x90>
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d002      	beq.n	8004a0a <RCCEx_PLLSAI2_Config+0x4e>
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d009      	beq.n	8004a1c <RCCEx_PLLSAI2_Config+0x60>
 8004a08:	e020      	b.n	8004a4c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a0a:	4b62      	ldr	r3, [pc, #392]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d11d      	bne.n	8004a52 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a1a:	e01a      	b.n	8004a52 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a1c:	4b5d      	ldr	r3, [pc, #372]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d116      	bne.n	8004a56 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a2c:	e013      	b.n	8004a56 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a2e:	4b59      	ldr	r3, [pc, #356]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10f      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a3a:	4b56      	ldr	r3, [pc, #344]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d109      	bne.n	8004a5a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a4a:	e006      	b.n	8004a5a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a50:	e004      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a52:	bf00      	nop
 8004a54:	e002      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a56:	bf00      	nop
 8004a58:	e000      	b.n	8004a5c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004a5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d108      	bne.n	8004a74 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004a62:	4b4c      	ldr	r3, [pc, #304]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	f023 0203 	bic.w	r2, r3, #3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4949      	ldr	r1, [pc, #292]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f040 8086 	bne.w	8004b88 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004a7c:	4b45      	ldr	r3, [pc, #276]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a44      	ldr	r2, [pc, #272]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a88:	f7fc faee 	bl	8001068 <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004a8e:	e009      	b.n	8004aa4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a90:	f7fc faea 	bl	8001068 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	73fb      	strb	r3, [r7, #15]
        break;
 8004aa2:	e005      	b.n	8004ab0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004aa4:	4b3b      	ldr	r3, [pc, #236]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1ef      	bne.n	8004a90 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d168      	bne.n	8004b88 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d113      	bne.n	8004ae4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004abc:	4b35      	ldr	r3, [pc, #212]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004abe:	695a      	ldr	r2, [r3, #20]
 8004ac0:	4b35      	ldr	r3, [pc, #212]	; (8004b98 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6892      	ldr	r2, [r2, #8]
 8004ac8:	0211      	lsls	r1, r2, #8
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68d2      	ldr	r2, [r2, #12]
 8004ace:	06d2      	lsls	r2, r2, #27
 8004ad0:	4311      	orrs	r1, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	6852      	ldr	r2, [r2, #4]
 8004ad6:	3a01      	subs	r2, #1
 8004ad8:	0112      	lsls	r2, r2, #4
 8004ada:	430a      	orrs	r2, r1
 8004adc:	492d      	ldr	r1, [pc, #180]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	614b      	str	r3, [r1, #20]
 8004ae2:	e02d      	b.n	8004b40 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d115      	bne.n	8004b16 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004aea:	4b2a      	ldr	r3, [pc, #168]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aec:	695a      	ldr	r2, [r3, #20]
 8004aee:	4b2b      	ldr	r3, [pc, #172]	; (8004b9c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6892      	ldr	r2, [r2, #8]
 8004af6:	0211      	lsls	r1, r2, #8
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6912      	ldr	r2, [r2, #16]
 8004afc:	0852      	lsrs	r2, r2, #1
 8004afe:	3a01      	subs	r2, #1
 8004b00:	0552      	lsls	r2, r2, #21
 8004b02:	4311      	orrs	r1, r2
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	6852      	ldr	r2, [r2, #4]
 8004b08:	3a01      	subs	r2, #1
 8004b0a:	0112      	lsls	r2, r2, #4
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	4921      	ldr	r1, [pc, #132]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	614b      	str	r3, [r1, #20]
 8004b14:	e014      	b.n	8004b40 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b16:	4b1f      	ldr	r3, [pc, #124]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6892      	ldr	r2, [r2, #8]
 8004b22:	0211      	lsls	r1, r2, #8
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6952      	ldr	r2, [r2, #20]
 8004b28:	0852      	lsrs	r2, r2, #1
 8004b2a:	3a01      	subs	r2, #1
 8004b2c:	0652      	lsls	r2, r2, #25
 8004b2e:	4311      	orrs	r1, r2
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6852      	ldr	r2, [r2, #4]
 8004b34:	3a01      	subs	r2, #1
 8004b36:	0112      	lsls	r2, r2, #4
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	4916      	ldr	r1, [pc, #88]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004b40:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a13      	ldr	r2, [pc, #76]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7fc fa8c 	bl	8001068 <HAL_GetTick>
 8004b50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b52:	e009      	b.n	8004b68 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b54:	f7fc fa88 	bl	8001068 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d902      	bls.n	8004b68 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	73fb      	strb	r3, [r7, #15]
          break;
 8004b66:	e005      	b.n	8004b74 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0ef      	beq.n	8004b54 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b74:	7bfb      	ldrb	r3, [r7, #15]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004b7a:	4b06      	ldr	r3, [pc, #24]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	4904      	ldr	r1, [pc, #16]	; (8004b94 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40021000 	.word	0x40021000
 8004b98:	07ff800f 	.word	0x07ff800f
 8004b9c:	ff9f800f 	.word	0xff9f800f
 8004ba0:	f9ff800f 	.word	0xf9ff800f

08004ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e049      	b.n	8004c4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f005 fa34 	bl	800a038 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f000 fab6 	bl	8005154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e04f      	b.n	8004d0c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a23      	ldr	r2, [pc, #140]	; (8004d18 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01d      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0x76>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c96:	d018      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0x76>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1f      	ldr	r2, [pc, #124]	; (8004d1c <HAL_TIM_Base_Start_IT+0xc8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0x76>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1e      	ldr	r2, [pc, #120]	; (8004d20 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00e      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0x76>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1c      	ldr	r2, [pc, #112]	; (8004d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d009      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0x76>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1b      	ldr	r2, [pc, #108]	; (8004d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d004      	beq.n	8004cca <HAL_TIM_Base_Start_IT+0x76>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d115      	bne.n	8004cf6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	4b17      	ldr	r3, [pc, #92]	; (8004d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b06      	cmp	r3, #6
 8004cda:	d015      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0xb4>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce2:	d011      	beq.n	8004d08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cf4:	e008      	b.n	8004d08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	e000      	b.n	8004d0a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d08:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40012c00 	.word	0x40012c00
 8004d1c:	40000400 	.word	0x40000400
 8004d20:	40000800 	.word	0x40000800
 8004d24:	40000c00 	.word	0x40000c00
 8004d28:	40013400 	.word	0x40013400
 8004d2c:	40014000 	.word	0x40014000
 8004d30:	00010007 	.word	0x00010007

08004d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d122      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d11b      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0202 	mvn.w	r2, #2
 8004d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9ce 	bl	8005118 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9c0 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9d1 	bl	800512c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d122      	bne.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d11b      	bne.n	8004de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0204 	mvn.w	r2, #4
 8004db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f9a4 	bl	8005118 <HAL_TIM_IC_CaptureCallback>
 8004dd0:	e005      	b.n	8004dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f996 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f9a7 	bl	800512c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	d122      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d11b      	bne.n	8004e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f06f 0208 	mvn.w	r2, #8
 8004e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f000 f97a 	bl	8005118 <HAL_TIM_IC_CaptureCallback>
 8004e24:	e005      	b.n	8004e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f96c 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f97d 	bl	800512c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b10      	cmp	r3, #16
 8004e44:	d122      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d11b      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0210 	mvn.w	r2, #16
 8004e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2208      	movs	r2, #8
 8004e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 f950 	bl	8005118 <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 f942 	bl	8005104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f953 	bl	800512c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0201 	mvn.w	r2, #1
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f004 f940 	bl	8009138 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d10e      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed0:	2b80      	cmp	r3, #128	; 0x80
 8004ed2:	d107      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 fafe 	bl	80054e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ef2:	d10e      	bne.n	8004f12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d107      	bne.n	8004f12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 faf1 	bl	80054f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1c:	2b40      	cmp	r3, #64	; 0x40
 8004f1e:	d10e      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2a:	2b40      	cmp	r3, #64	; 0x40
 8004f2c:	d107      	bne.n	8004f3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f901 	bl	8005140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d10e      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	d107      	bne.n	8004f6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f06f 0220 	mvn.w	r2, #32
 8004f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fab1 	bl	80054cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b084      	sub	sp, #16
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_ConfigClockSource+0x1c>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	e0b6      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x18a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fca:	d03e      	beq.n	800504a <HAL_TIM_ConfigClockSource+0xd8>
 8004fcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd0:	f200 8087 	bhi.w	80050e2 <HAL_TIM_ConfigClockSource+0x170>
 8004fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd8:	f000 8086 	beq.w	80050e8 <HAL_TIM_ConfigClockSource+0x176>
 8004fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe0:	d87f      	bhi.n	80050e2 <HAL_TIM_ConfigClockSource+0x170>
 8004fe2:	2b70      	cmp	r3, #112	; 0x70
 8004fe4:	d01a      	beq.n	800501c <HAL_TIM_ConfigClockSource+0xaa>
 8004fe6:	2b70      	cmp	r3, #112	; 0x70
 8004fe8:	d87b      	bhi.n	80050e2 <HAL_TIM_ConfigClockSource+0x170>
 8004fea:	2b60      	cmp	r3, #96	; 0x60
 8004fec:	d050      	beq.n	8005090 <HAL_TIM_ConfigClockSource+0x11e>
 8004fee:	2b60      	cmp	r3, #96	; 0x60
 8004ff0:	d877      	bhi.n	80050e2 <HAL_TIM_ConfigClockSource+0x170>
 8004ff2:	2b50      	cmp	r3, #80	; 0x50
 8004ff4:	d03c      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0xfe>
 8004ff6:	2b50      	cmp	r3, #80	; 0x50
 8004ff8:	d873      	bhi.n	80050e2 <HAL_TIM_ConfigClockSource+0x170>
 8004ffa:	2b40      	cmp	r3, #64	; 0x40
 8004ffc:	d058      	beq.n	80050b0 <HAL_TIM_ConfigClockSource+0x13e>
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	d86f      	bhi.n	80050e2 <HAL_TIM_ConfigClockSource+0x170>
 8005002:	2b30      	cmp	r3, #48	; 0x30
 8005004:	d064      	beq.n	80050d0 <HAL_TIM_ConfigClockSource+0x15e>
 8005006:	2b30      	cmp	r3, #48	; 0x30
 8005008:	d86b      	bhi.n	80050e2 <HAL_TIM_ConfigClockSource+0x170>
 800500a:	2b20      	cmp	r3, #32
 800500c:	d060      	beq.n	80050d0 <HAL_TIM_ConfigClockSource+0x15e>
 800500e:	2b20      	cmp	r3, #32
 8005010:	d867      	bhi.n	80050e2 <HAL_TIM_ConfigClockSource+0x170>
 8005012:	2b00      	cmp	r3, #0
 8005014:	d05c      	beq.n	80050d0 <HAL_TIM_ConfigClockSource+0x15e>
 8005016:	2b10      	cmp	r3, #16
 8005018:	d05a      	beq.n	80050d0 <HAL_TIM_ConfigClockSource+0x15e>
 800501a:	e062      	b.n	80050e2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	6899      	ldr	r1, [r3, #8]
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f000 f9a6 	bl	800537c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800503e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	609a      	str	r2, [r3, #8]
      break;
 8005048:	e04f      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6818      	ldr	r0, [r3, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	6899      	ldr	r1, [r3, #8]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685a      	ldr	r2, [r3, #4]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f000 f98f 	bl	800537c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800506c:	609a      	str	r2, [r3, #8]
      break;
 800506e:	e03c      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6859      	ldr	r1, [r3, #4]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	461a      	mov	r2, r3
 800507e:	f000 f903 	bl	8005288 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2150      	movs	r1, #80	; 0x50
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f95c 	bl	8005346 <TIM_ITRx_SetConfig>
      break;
 800508e:	e02c      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	6859      	ldr	r1, [r3, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	461a      	mov	r2, r3
 800509e:	f000 f922 	bl	80052e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2160      	movs	r1, #96	; 0x60
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 f94c 	bl	8005346 <TIM_ITRx_SetConfig>
      break;
 80050ae:	e01c      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	461a      	mov	r2, r3
 80050be:	f000 f8e3 	bl	8005288 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2140      	movs	r1, #64	; 0x40
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f93c 	bl	8005346 <TIM_ITRx_SetConfig>
      break;
 80050ce:	e00c      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f000 f933 	bl	8005346 <TIM_ITRx_SetConfig>
      break;
 80050e0:	e003      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
      break;
 80050e6:	e000      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x178>
      break;
 80050e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a40      	ldr	r2, [pc, #256]	; (8005268 <TIM_Base_SetConfig+0x114>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <TIM_Base_SetConfig+0x40>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d00f      	beq.n	8005194 <TIM_Base_SetConfig+0x40>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a3d      	ldr	r2, [pc, #244]	; (800526c <TIM_Base_SetConfig+0x118>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00b      	beq.n	8005194 <TIM_Base_SetConfig+0x40>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a3c      	ldr	r2, [pc, #240]	; (8005270 <TIM_Base_SetConfig+0x11c>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d007      	beq.n	8005194 <TIM_Base_SetConfig+0x40>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a3b      	ldr	r2, [pc, #236]	; (8005274 <TIM_Base_SetConfig+0x120>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0x40>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a3a      	ldr	r2, [pc, #232]	; (8005278 <TIM_Base_SetConfig+0x124>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d108      	bne.n	80051a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800519a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2f      	ldr	r2, [pc, #188]	; (8005268 <TIM_Base_SetConfig+0x114>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01f      	beq.n	80051ee <TIM_Base_SetConfig+0x9a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b4:	d01b      	beq.n	80051ee <TIM_Base_SetConfig+0x9a>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a2c      	ldr	r2, [pc, #176]	; (800526c <TIM_Base_SetConfig+0x118>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d017      	beq.n	80051ee <TIM_Base_SetConfig+0x9a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2b      	ldr	r2, [pc, #172]	; (8005270 <TIM_Base_SetConfig+0x11c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d013      	beq.n	80051ee <TIM_Base_SetConfig+0x9a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a2a      	ldr	r2, [pc, #168]	; (8005274 <TIM_Base_SetConfig+0x120>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00f      	beq.n	80051ee <TIM_Base_SetConfig+0x9a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a29      	ldr	r2, [pc, #164]	; (8005278 <TIM_Base_SetConfig+0x124>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00b      	beq.n	80051ee <TIM_Base_SetConfig+0x9a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a28      	ldr	r2, [pc, #160]	; (800527c <TIM_Base_SetConfig+0x128>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d007      	beq.n	80051ee <TIM_Base_SetConfig+0x9a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a27      	ldr	r2, [pc, #156]	; (8005280 <TIM_Base_SetConfig+0x12c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d003      	beq.n	80051ee <TIM_Base_SetConfig+0x9a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a26      	ldr	r2, [pc, #152]	; (8005284 <TIM_Base_SetConfig+0x130>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d108      	bne.n	8005200 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a10      	ldr	r2, [pc, #64]	; (8005268 <TIM_Base_SetConfig+0x114>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00f      	beq.n	800524c <TIM_Base_SetConfig+0xf8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a12      	ldr	r2, [pc, #72]	; (8005278 <TIM_Base_SetConfig+0x124>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_Base_SetConfig+0xf8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a11      	ldr	r2, [pc, #68]	; (800527c <TIM_Base_SetConfig+0x128>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_Base_SetConfig+0xf8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a10      	ldr	r2, [pc, #64]	; (8005280 <TIM_Base_SetConfig+0x12c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_Base_SetConfig+0xf8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <TIM_Base_SetConfig+0x130>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d103      	bne.n	8005254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	615a      	str	r2, [r3, #20]
}
 800525a:	bf00      	nop
 800525c:	3714      	adds	r7, #20
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	40012c00 	.word	0x40012c00
 800526c:	40000400 	.word	0x40000400
 8005270:	40000800 	.word	0x40000800
 8005274:	40000c00 	.word	0x40000c00
 8005278:	40013400 	.word	0x40013400
 800527c:	40014000 	.word	0x40014000
 8005280:	40014400 	.word	0x40014400
 8005284:	40014800 	.word	0x40014800

08005288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a1b      	ldr	r3, [r3, #32]
 8005298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	f023 0201 	bic.w	r2, r3, #1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	011b      	lsls	r3, r3, #4
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f023 030a 	bic.w	r3, r3, #10
 80052c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b087      	sub	sp, #28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	60f8      	str	r0, [r7, #12]
 80052ee:	60b9      	str	r1, [r7, #8]
 80052f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	f023 0210 	bic.w	r2, r3, #16
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005310:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	031b      	lsls	r3, r3, #12
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005322:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	f043 0307 	orr.w	r3, r3, #7
 8005368:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	609a      	str	r2, [r3, #8]
}
 8005370:	bf00      	nop
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800537c:	b480      	push	{r7}
 800537e:	b087      	sub	sp, #28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005396:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	021a      	lsls	r2, r3, #8
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	431a      	orrs	r2, r3
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	609a      	str	r2, [r3, #8]
}
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e068      	b.n	80054a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2e      	ldr	r2, [pc, #184]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2d      	ldr	r2, [pc, #180]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800540e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005420:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d01d      	beq.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005446:	d018      	beq.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a1a      	ldr	r2, [pc, #104]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a13      	ldr	r2, [pc, #76]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a14      	ldr	r2, [pc, #80]	; (80054c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d10c      	bne.n	8005494 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	4313      	orrs	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40013400 	.word	0x40013400
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40014000 	.word	0x40014000

080054cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e042      	b.n	80055a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005520:	2b00      	cmp	r3, #0
 8005522:	d106      	bne.n	8005532 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f004 fda7 	bl	800a080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2224      	movs	r2, #36	; 0x24
 8005536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 0201 	bic.w	r2, r2, #1
 8005548:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8c4 	bl	80056d8 <UART_SetConfig>
 8005550:	4603      	mov	r3, r0
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e022      	b.n	80055a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	2b00      	cmp	r3, #0
 8005560:	d002      	beq.n	8005568 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fbb4 	bl	8005cd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005586:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 fc3b 	bl	8005e14 <UART_CheckIdleState>
 800559e:	4603      	mov	r3, r0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3708      	adds	r7, #8
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	603b      	str	r3, [r7, #0]
 80055b4:	4613      	mov	r3, r2
 80055b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055be:	2b20      	cmp	r3, #32
 80055c0:	f040 8084 	bne.w	80056cc <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d002      	beq.n	80055d0 <HAL_UART_Transmit+0x28>
 80055ca:	88fb      	ldrh	r3, [r7, #6]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e07c      	b.n	80056ce <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_UART_Transmit+0x3a>
 80055de:	2302      	movs	r3, #2
 80055e0:	e075      	b.n	80056ce <HAL_UART_Transmit+0x126>
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2221      	movs	r2, #33	; 0x21
 80055f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055fa:	f7fb fd35 	bl	8001068 <HAL_GetTick>
 80055fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	88fa      	ldrh	r2, [r7, #6]
 8005604:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	88fa      	ldrh	r2, [r7, #6]
 800560c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005618:	d108      	bne.n	800562c <HAL_UART_Transmit+0x84>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d104      	bne.n	800562c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	61bb      	str	r3, [r7, #24]
 800562a:	e003      	b.n	8005634 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005630:	2300      	movs	r3, #0
 8005632:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800563c:	e02d      	b.n	800569a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2200      	movs	r2, #0
 8005646:	2180      	movs	r1, #128	; 0x80
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fc2e 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e03a      	b.n	80056ce <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10b      	bne.n	8005676 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	881a      	ldrh	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800566a:	b292      	uxth	r2, r2
 800566c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	3302      	adds	r3, #2
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	e008      	b.n	8005688 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	781a      	ldrb	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	b292      	uxth	r2, r2
 8005680:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	3301      	adds	r3, #1
 8005686:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1cb      	bne.n	800563e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2200      	movs	r2, #0
 80056ae:	2140      	movs	r1, #64	; 0x40
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 fbfa 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e006      	b.n	80056ce <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	e000      	b.n	80056ce <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80056cc:	2302      	movs	r3, #2
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056dc:	b08c      	sub	sp, #48	; 0x30
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	69db      	ldr	r3, [r3, #28]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4baa      	ldr	r3, [pc, #680]	; (80059b0 <UART_SetConfig+0x2d8>)
 8005708:	4013      	ands	r3, r2
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005710:	430b      	orrs	r3, r1
 8005712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a9f      	ldr	r2, [pc, #636]	; (80059b4 <UART_SetConfig+0x2dc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d004      	beq.n	8005744 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005740:	4313      	orrs	r3, r2
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800574e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005758:	430b      	orrs	r3, r1
 800575a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	f023 010f 	bic.w	r1, r3, #15
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a90      	ldr	r2, [pc, #576]	; (80059b8 <UART_SetConfig+0x2e0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d125      	bne.n	80057c8 <UART_SetConfig+0xf0>
 800577c:	4b8f      	ldr	r3, [pc, #572]	; (80059bc <UART_SetConfig+0x2e4>)
 800577e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	2b03      	cmp	r3, #3
 8005788:	d81a      	bhi.n	80057c0 <UART_SetConfig+0xe8>
 800578a:	a201      	add	r2, pc, #4	; (adr r2, 8005790 <UART_SetConfig+0xb8>)
 800578c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005790:	080057a1 	.word	0x080057a1
 8005794:	080057b1 	.word	0x080057b1
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057b9 	.word	0x080057b9
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057a6:	e116      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80057a8:	2302      	movs	r3, #2
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ae:	e112      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80057b0:	2304      	movs	r3, #4
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057b6:	e10e      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80057b8:	2308      	movs	r3, #8
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057be:	e10a      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80057c0:	2310      	movs	r3, #16
 80057c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057c6:	e106      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a7c      	ldr	r2, [pc, #496]	; (80059c0 <UART_SetConfig+0x2e8>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d138      	bne.n	8005844 <UART_SetConfig+0x16c>
 80057d2:	4b7a      	ldr	r3, [pc, #488]	; (80059bc <UART_SetConfig+0x2e4>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	f003 030c 	and.w	r3, r3, #12
 80057dc:	2b0c      	cmp	r3, #12
 80057de:	d82d      	bhi.n	800583c <UART_SetConfig+0x164>
 80057e0:	a201      	add	r2, pc, #4	; (adr r2, 80057e8 <UART_SetConfig+0x110>)
 80057e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e6:	bf00      	nop
 80057e8:	0800581d 	.word	0x0800581d
 80057ec:	0800583d 	.word	0x0800583d
 80057f0:	0800583d 	.word	0x0800583d
 80057f4:	0800583d 	.word	0x0800583d
 80057f8:	0800582d 	.word	0x0800582d
 80057fc:	0800583d 	.word	0x0800583d
 8005800:	0800583d 	.word	0x0800583d
 8005804:	0800583d 	.word	0x0800583d
 8005808:	08005825 	.word	0x08005825
 800580c:	0800583d 	.word	0x0800583d
 8005810:	0800583d 	.word	0x0800583d
 8005814:	0800583d 	.word	0x0800583d
 8005818:	08005835 	.word	0x08005835
 800581c:	2300      	movs	r3, #0
 800581e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005822:	e0d8      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005824:	2302      	movs	r3, #2
 8005826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800582a:	e0d4      	b.n	80059d6 <UART_SetConfig+0x2fe>
 800582c:	2304      	movs	r3, #4
 800582e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005832:	e0d0      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005834:	2308      	movs	r3, #8
 8005836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800583a:	e0cc      	b.n	80059d6 <UART_SetConfig+0x2fe>
 800583c:	2310      	movs	r3, #16
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005842:	e0c8      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a5e      	ldr	r2, [pc, #376]	; (80059c4 <UART_SetConfig+0x2ec>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d125      	bne.n	800589a <UART_SetConfig+0x1c2>
 800584e:	4b5b      	ldr	r3, [pc, #364]	; (80059bc <UART_SetConfig+0x2e4>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005858:	2b30      	cmp	r3, #48	; 0x30
 800585a:	d016      	beq.n	800588a <UART_SetConfig+0x1b2>
 800585c:	2b30      	cmp	r3, #48	; 0x30
 800585e:	d818      	bhi.n	8005892 <UART_SetConfig+0x1ba>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d00a      	beq.n	800587a <UART_SetConfig+0x1a2>
 8005864:	2b20      	cmp	r3, #32
 8005866:	d814      	bhi.n	8005892 <UART_SetConfig+0x1ba>
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <UART_SetConfig+0x19a>
 800586c:	2b10      	cmp	r3, #16
 800586e:	d008      	beq.n	8005882 <UART_SetConfig+0x1aa>
 8005870:	e00f      	b.n	8005892 <UART_SetConfig+0x1ba>
 8005872:	2300      	movs	r3, #0
 8005874:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005878:	e0ad      	b.n	80059d6 <UART_SetConfig+0x2fe>
 800587a:	2302      	movs	r3, #2
 800587c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005880:	e0a9      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005882:	2304      	movs	r3, #4
 8005884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005888:	e0a5      	b.n	80059d6 <UART_SetConfig+0x2fe>
 800588a:	2308      	movs	r3, #8
 800588c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005890:	e0a1      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005892:	2310      	movs	r3, #16
 8005894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005898:	e09d      	b.n	80059d6 <UART_SetConfig+0x2fe>
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a4a      	ldr	r2, [pc, #296]	; (80059c8 <UART_SetConfig+0x2f0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d125      	bne.n	80058f0 <UART_SetConfig+0x218>
 80058a4:	4b45      	ldr	r3, [pc, #276]	; (80059bc <UART_SetConfig+0x2e4>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058ae:	2bc0      	cmp	r3, #192	; 0xc0
 80058b0:	d016      	beq.n	80058e0 <UART_SetConfig+0x208>
 80058b2:	2bc0      	cmp	r3, #192	; 0xc0
 80058b4:	d818      	bhi.n	80058e8 <UART_SetConfig+0x210>
 80058b6:	2b80      	cmp	r3, #128	; 0x80
 80058b8:	d00a      	beq.n	80058d0 <UART_SetConfig+0x1f8>
 80058ba:	2b80      	cmp	r3, #128	; 0x80
 80058bc:	d814      	bhi.n	80058e8 <UART_SetConfig+0x210>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <UART_SetConfig+0x1f0>
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d008      	beq.n	80058d8 <UART_SetConfig+0x200>
 80058c6:	e00f      	b.n	80058e8 <UART_SetConfig+0x210>
 80058c8:	2300      	movs	r3, #0
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e082      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80058d0:	2302      	movs	r3, #2
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058d6:	e07e      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80058d8:	2304      	movs	r3, #4
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058de:	e07a      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80058e0:	2308      	movs	r3, #8
 80058e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058e6:	e076      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80058e8:	2310      	movs	r3, #16
 80058ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ee:	e072      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a35      	ldr	r2, [pc, #212]	; (80059cc <UART_SetConfig+0x2f4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d12a      	bne.n	8005950 <UART_SetConfig+0x278>
 80058fa:	4b30      	ldr	r3, [pc, #192]	; (80059bc <UART_SetConfig+0x2e4>)
 80058fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005908:	d01a      	beq.n	8005940 <UART_SetConfig+0x268>
 800590a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800590e:	d81b      	bhi.n	8005948 <UART_SetConfig+0x270>
 8005910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005914:	d00c      	beq.n	8005930 <UART_SetConfig+0x258>
 8005916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800591a:	d815      	bhi.n	8005948 <UART_SetConfig+0x270>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <UART_SetConfig+0x250>
 8005920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005924:	d008      	beq.n	8005938 <UART_SetConfig+0x260>
 8005926:	e00f      	b.n	8005948 <UART_SetConfig+0x270>
 8005928:	2300      	movs	r3, #0
 800592a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592e:	e052      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005930:	2302      	movs	r3, #2
 8005932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005936:	e04e      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005938:	2304      	movs	r3, #4
 800593a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593e:	e04a      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005940:	2308      	movs	r3, #8
 8005942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005946:	e046      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800594e:	e042      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <UART_SetConfig+0x2dc>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d13a      	bne.n	80059d0 <UART_SetConfig+0x2f8>
 800595a:	4b18      	ldr	r3, [pc, #96]	; (80059bc <UART_SetConfig+0x2e4>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005960:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005964:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005968:	d01a      	beq.n	80059a0 <UART_SetConfig+0x2c8>
 800596a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800596e:	d81b      	bhi.n	80059a8 <UART_SetConfig+0x2d0>
 8005970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005974:	d00c      	beq.n	8005990 <UART_SetConfig+0x2b8>
 8005976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800597a:	d815      	bhi.n	80059a8 <UART_SetConfig+0x2d0>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <UART_SetConfig+0x2b0>
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005984:	d008      	beq.n	8005998 <UART_SetConfig+0x2c0>
 8005986:	e00f      	b.n	80059a8 <UART_SetConfig+0x2d0>
 8005988:	2300      	movs	r3, #0
 800598a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800598e:	e022      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005990:	2302      	movs	r3, #2
 8005992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005996:	e01e      	b.n	80059d6 <UART_SetConfig+0x2fe>
 8005998:	2304      	movs	r3, #4
 800599a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800599e:	e01a      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80059a0:	2308      	movs	r3, #8
 80059a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a6:	e016      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80059a8:	2310      	movs	r3, #16
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ae:	e012      	b.n	80059d6 <UART_SetConfig+0x2fe>
 80059b0:	cfff69f3 	.word	0xcfff69f3
 80059b4:	40008000 	.word	0x40008000
 80059b8:	40013800 	.word	0x40013800
 80059bc:	40021000 	.word	0x40021000
 80059c0:	40004400 	.word	0x40004400
 80059c4:	40004800 	.word	0x40004800
 80059c8:	40004c00 	.word	0x40004c00
 80059cc:	40005000 	.word	0x40005000
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4aae      	ldr	r2, [pc, #696]	; (8005c94 <UART_SetConfig+0x5bc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	f040 8097 	bne.w	8005b10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d823      	bhi.n	8005a32 <UART_SetConfig+0x35a>
 80059ea:	a201      	add	r2, pc, #4	; (adr r2, 80059f0 <UART_SetConfig+0x318>)
 80059ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f0:	08005a15 	.word	0x08005a15
 80059f4:	08005a33 	.word	0x08005a33
 80059f8:	08005a1d 	.word	0x08005a1d
 80059fc:	08005a33 	.word	0x08005a33
 8005a00:	08005a23 	.word	0x08005a23
 8005a04:	08005a33 	.word	0x08005a33
 8005a08:	08005a33 	.word	0x08005a33
 8005a0c:	08005a33 	.word	0x08005a33
 8005a10:	08005a2b 	.word	0x08005a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a14:	f7fe fa90 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8005a18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a1a:	e010      	b.n	8005a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a1c:	4b9e      	ldr	r3, [pc, #632]	; (8005c98 <UART_SetConfig+0x5c0>)
 8005a1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a20:	e00d      	b.n	8005a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a22:	f7fe f9f1 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8005a26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a28:	e009      	b.n	8005a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a30:	e005      	b.n	8005a3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8130 	beq.w	8005ca6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	4a94      	ldr	r2, [pc, #592]	; (8005c9c <UART_SetConfig+0x5c4>)
 8005a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a50:	461a      	mov	r2, r3
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d305      	bcc.n	8005a76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d903      	bls.n	8005a7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a7c:	e113      	b.n	8005ca6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	2200      	movs	r2, #0
 8005a82:	60bb      	str	r3, [r7, #8]
 8005a84:	60fa      	str	r2, [r7, #12]
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	4a84      	ldr	r2, [pc, #528]	; (8005c9c <UART_SetConfig+0x5c4>)
 8005a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2200      	movs	r2, #0
 8005a94:	603b      	str	r3, [r7, #0]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005aa0:	f7fb f81c 	bl	8000adc <__aeabi_uldivmod>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4610      	mov	r0, r2
 8005aaa:	4619      	mov	r1, r3
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	020b      	lsls	r3, r1, #8
 8005ab6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005aba:	0202      	lsls	r2, r0, #8
 8005abc:	6979      	ldr	r1, [r7, #20]
 8005abe:	6849      	ldr	r1, [r1, #4]
 8005ac0:	0849      	lsrs	r1, r1, #1
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	eb12 0804 	adds.w	r8, r2, r4
 8005acc:	eb43 0905 	adc.w	r9, r3, r5
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	469a      	mov	sl, r3
 8005ad8:	4693      	mov	fp, r2
 8005ada:	4652      	mov	r2, sl
 8005adc:	465b      	mov	r3, fp
 8005ade:	4640      	mov	r0, r8
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	f7fa fffb 	bl	8000adc <__aeabi_uldivmod>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4613      	mov	r3, r2
 8005aec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005af4:	d308      	bcc.n	8005b08 <UART_SetConfig+0x430>
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005afc:	d204      	bcs.n	8005b08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6a3a      	ldr	r2, [r7, #32]
 8005b04:	60da      	str	r2, [r3, #12]
 8005b06:	e0ce      	b.n	8005ca6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b0e:	e0ca      	b.n	8005ca6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b18:	d166      	bne.n	8005be8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b1e:	2b08      	cmp	r3, #8
 8005b20:	d827      	bhi.n	8005b72 <UART_SetConfig+0x49a>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <UART_SetConfig+0x450>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b4d 	.word	0x08005b4d
 8005b2c:	08005b55 	.word	0x08005b55
 8005b30:	08005b5d 	.word	0x08005b5d
 8005b34:	08005b73 	.word	0x08005b73
 8005b38:	08005b63 	.word	0x08005b63
 8005b3c:	08005b73 	.word	0x08005b73
 8005b40:	08005b73 	.word	0x08005b73
 8005b44:	08005b73 	.word	0x08005b73
 8005b48:	08005b6b 	.word	0x08005b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b4c:	f7fe f9f4 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8005b50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b52:	e014      	b.n	8005b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b54:	f7fe fa06 	bl	8003f64 <HAL_RCC_GetPCLK2Freq>
 8005b58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b5a:	e010      	b.n	8005b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b5c:	4b4e      	ldr	r3, [pc, #312]	; (8005c98 <UART_SetConfig+0x5c0>)
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b60:	e00d      	b.n	8005b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b62:	f7fe f951 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8005b66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b68:	e009      	b.n	8005b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b70:	e005      	b.n	8005b7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8090 	beq.w	8005ca6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8a:	4a44      	ldr	r2, [pc, #272]	; (8005c9c <UART_SetConfig+0x5c4>)
 8005b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b90:	461a      	mov	r2, r3
 8005b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b98:	005a      	lsls	r2, r3, #1
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	085b      	lsrs	r3, r3, #1
 8005ba0:	441a      	add	r2, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005baa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	2b0f      	cmp	r3, #15
 8005bb0:	d916      	bls.n	8005be0 <UART_SetConfig+0x508>
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb8:	d212      	bcs.n	8005be0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f023 030f 	bic.w	r3, r3, #15
 8005bc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	085b      	lsrs	r3, r3, #1
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	8bfb      	ldrh	r3, [r7, #30]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	8bfa      	ldrh	r2, [r7, #30]
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	e062      	b.n	8005ca6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005be6:	e05e      	b.n	8005ca6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005be8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bec:	2b08      	cmp	r3, #8
 8005bee:	d828      	bhi.n	8005c42 <UART_SetConfig+0x56a>
 8005bf0:	a201      	add	r2, pc, #4	; (adr r2, 8005bf8 <UART_SetConfig+0x520>)
 8005bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf6:	bf00      	nop
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c2d 	.word	0x08005c2d
 8005c04:	08005c43 	.word	0x08005c43
 8005c08:	08005c33 	.word	0x08005c33
 8005c0c:	08005c43 	.word	0x08005c43
 8005c10:	08005c43 	.word	0x08005c43
 8005c14:	08005c43 	.word	0x08005c43
 8005c18:	08005c3b 	.word	0x08005c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c1c:	f7fe f98c 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 8005c20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c22:	e014      	b.n	8005c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c24:	f7fe f99e 	bl	8003f64 <HAL_RCC_GetPCLK2Freq>
 8005c28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c2a:	e010      	b.n	8005c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c2c:	4b1a      	ldr	r3, [pc, #104]	; (8005c98 <UART_SetConfig+0x5c0>)
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c30:	e00d      	b.n	8005c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c32:	f7fe f8e9 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8005c36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c38:	e009      	b.n	8005c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c40:	e005      	b.n	8005c4e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c4c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d028      	beq.n	8005ca6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	4a10      	ldr	r2, [pc, #64]	; (8005c9c <UART_SetConfig+0x5c4>)
 8005c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c62:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	085b      	lsrs	r3, r3, #1
 8005c6c:	441a      	add	r2, r3
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c76:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c78:	6a3b      	ldr	r3, [r7, #32]
 8005c7a:	2b0f      	cmp	r3, #15
 8005c7c:	d910      	bls.n	8005ca0 <UART_SetConfig+0x5c8>
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c84:	d20c      	bcs.n	8005ca0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	60da      	str	r2, [r3, #12]
 8005c90:	e009      	b.n	8005ca6 <UART_SetConfig+0x5ce>
 8005c92:	bf00      	nop
 8005c94:	40008000 	.word	0x40008000
 8005c98:	00f42400 	.word	0x00f42400
 8005c9c:	0800ae3c 	.word	0x0800ae3c
      }
      else
      {
        ret = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3730      	adds	r7, #48	; 0x30
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00a      	beq.n	8005cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00a      	beq.n	8005d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	f003 0304 	and.w	r3, r3, #4
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00a      	beq.n	8005d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	430a      	orrs	r2, r1
 8005d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00a      	beq.n	8005d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00a      	beq.n	8005d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d01a      	beq.n	8005de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005dce:	d10a      	bne.n	8005de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	430a      	orrs	r2, r1
 8005de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	605a      	str	r2, [r3, #4]
  }
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e24:	f7fb f920 	bl	8001068 <HAL_GetTick>
 8005e28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 0308 	and.w	r3, r3, #8
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d10e      	bne.n	8005e56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 f82f 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e025      	b.n	8005ea2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d10e      	bne.n	8005e82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f819 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e00f      	b.n	8005ea2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b09c      	sub	sp, #112	; 0x70
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	603b      	str	r3, [r7, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eba:	e0a9      	b.n	8006010 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec2:	f000 80a5 	beq.w	8006010 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ec6:	f7fb f8cf 	bl	8001068 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d302      	bcc.n	8005edc <UART_WaitOnFlagUntilTimeout+0x32>
 8005ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d140      	bne.n	8005f5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ef0:	667b      	str	r3, [r7, #100]	; 0x64
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005efc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e6      	bne.n	8005edc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3308      	adds	r3, #8
 8005f14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f20:	f023 0301 	bic.w	r3, r3, #1
 8005f24:	663b      	str	r3, [r7, #96]	; 0x60
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1e5      	bne.n	8005f0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e069      	b.n	8006032 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d051      	beq.n	8006010 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f7a:	d149      	bne.n	8006010 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	e853 3f00 	ldrex	r3, [r3]
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fa6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fac:	e841 2300 	strex	r3, r2, [r1]
 8005fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1e6      	bne.n	8005f86 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005fd8:	623a      	str	r2, [r7, #32]
 8005fda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	69f9      	ldr	r1, [r7, #28]
 8005fde:	6a3a      	ldr	r2, [r7, #32]
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e5      	bne.n	8005fb8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e010      	b.n	8006032 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	69da      	ldr	r2, [r3, #28]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	4013      	ands	r3, r2
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	429a      	cmp	r2, r3
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	461a      	mov	r2, r3
 8006028:	79fb      	ldrb	r3, [r7, #7]
 800602a:	429a      	cmp	r2, r3
 800602c:	f43f af46 	beq.w	8005ebc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3770      	adds	r7, #112	; 0x70
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_UARTEx_DisableFifoMode+0x16>
 800604c:	2302      	movs	r3, #2
 800604e:	e027      	b.n	80060a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2224      	movs	r2, #36	; 0x24
 800605c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800607e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2220      	movs	r2, #32
 8006092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d101      	bne.n	80060c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060c0:	2302      	movs	r3, #2
 80060c2:	e02d      	b.n	8006120 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2224      	movs	r2, #36	; 0x24
 80060d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0201 	bic.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f84f 	bl	80061a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006138:	2b01      	cmp	r3, #1
 800613a:	d101      	bne.n	8006140 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800613c:	2302      	movs	r3, #2
 800613e:	e02d      	b.n	800619c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2224      	movs	r2, #36	; 0x24
 800614c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f000 f811 	bl	80061a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d108      	bne.n	80061c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061c4:	e031      	b.n	800622a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061c6:	2308      	movs	r3, #8
 80061c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061ca:	2308      	movs	r3, #8
 80061cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	0e5b      	lsrs	r3, r3, #25
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 0307 	and.w	r3, r3, #7
 80061dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	0f5b      	lsrs	r3, r3, #29
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061ee:	7bbb      	ldrb	r3, [r7, #14]
 80061f0:	7b3a      	ldrb	r2, [r7, #12]
 80061f2:	4911      	ldr	r1, [pc, #68]	; (8006238 <UARTEx_SetNbDataToProcess+0x94>)
 80061f4:	5c8a      	ldrb	r2, [r1, r2]
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061fa:	7b3a      	ldrb	r2, [r7, #12]
 80061fc:	490f      	ldr	r1, [pc, #60]	; (800623c <UARTEx_SetNbDataToProcess+0x98>)
 80061fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006200:	fb93 f3f2 	sdiv	r3, r3, r2
 8006204:	b29a      	uxth	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	7b7a      	ldrb	r2, [r7, #13]
 8006210:	4909      	ldr	r1, [pc, #36]	; (8006238 <UARTEx_SetNbDataToProcess+0x94>)
 8006212:	5c8a      	ldrb	r2, [r1, r2]
 8006214:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006218:	7b7a      	ldrb	r2, [r7, #13]
 800621a:	4908      	ldr	r1, [pc, #32]	; (800623c <UARTEx_SetNbDataToProcess+0x98>)
 800621c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800621e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006222:	b29a      	uxth	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	0800ae54 	.word	0x0800ae54
 800623c:	0800ae5c 	.word	0x0800ae5c

08006240 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	4603      	mov	r3, r0
 8006248:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800624e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006252:	2b84      	cmp	r3, #132	; 0x84
 8006254:	d005      	beq.n	8006262 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006256:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4413      	add	r3, r2
 800625e:	3303      	adds	r3, #3
 8006260:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006262:	68fb      	ldr	r3, [r7, #12]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006276:	f3ef 8305 	mrs	r3, IPSR
 800627a:	607b      	str	r3, [r7, #4]
  return(result);
 800627c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800627e:	2b00      	cmp	r3, #0
 8006280:	bf14      	ite	ne
 8006282:	2301      	movne	r3, #1
 8006284:	2300      	moveq	r3, #0
 8006286:	b2db      	uxtb	r3, r3
}
 8006288:	4618      	mov	r0, r3
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006298:	f001 f910 	bl	80074bc <vTaskStartScheduler>
  
  return osOK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80062a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a4:	b089      	sub	sp, #36	; 0x24
 80062a6:	af04      	add	r7, sp, #16
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d020      	beq.n	80062f6 <osThreadCreate+0x54>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d01c      	beq.n	80062f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685c      	ldr	r4, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681d      	ldr	r5, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691e      	ldr	r6, [r3, #16]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff ffb6 	bl	8006240 <makeFreeRtosPriority>
 80062d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062de:	9202      	str	r2, [sp, #8]
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	9100      	str	r1, [sp, #0]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	4632      	mov	r2, r6
 80062e8:	4629      	mov	r1, r5
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 ff1e 	bl	800712c <xTaskCreateStatic>
 80062f0:	4603      	mov	r3, r0
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	e01c      	b.n	8006330 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	685c      	ldr	r4, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006302:	b29e      	uxth	r6, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff ff98 	bl	8006240 <makeFreeRtosPriority>
 8006310:	4602      	mov	r2, r0
 8006312:	f107 030c 	add.w	r3, r7, #12
 8006316:	9301      	str	r3, [sp, #4]
 8006318:	9200      	str	r2, [sp, #0]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	4632      	mov	r2, r6
 800631e:	4629      	mov	r1, r5
 8006320:	4620      	mov	r0, r4
 8006322:	f000 ff60 	bl	80071e6 <xTaskCreate>
 8006326:	4603      	mov	r3, r0
 8006328:	2b01      	cmp	r3, #1
 800632a:	d001      	beq.n	8006330 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800632c:	2300      	movs	r3, #0
 800632e:	e000      	b.n	8006332 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006330:	68fb      	ldr	r3, [r7, #12]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800633a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <osDelay+0x16>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	e000      	b.n	8006352 <osDelay+0x18>
 8006350:	2301      	movs	r3, #1
 8006352:	4618      	mov	r0, r3
 8006354:	f001 f87e 	bl	8007454 <vTaskDelay>
  
  return osOK;
 8006358:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006362:	b580      	push	{r7, lr}
 8006364:	b086      	sub	sp, #24
 8006366:	af02      	add	r7, sp, #8
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00f      	beq.n	8006394 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d10a      	bne.n	8006390 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2203      	movs	r2, #3
 8006380:	9200      	str	r2, [sp, #0]
 8006382:	2200      	movs	r2, #0
 8006384:	2100      	movs	r1, #0
 8006386:	2001      	movs	r0, #1
 8006388:	f000 f9be 	bl	8006708 <xQueueGenericCreateStatic>
 800638c:	4603      	mov	r3, r0
 800638e:	e016      	b.n	80063be <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006390:	2300      	movs	r3, #0
 8006392:	e014      	b.n	80063be <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d110      	bne.n	80063bc <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800639a:	2203      	movs	r2, #3
 800639c:	2100      	movs	r1, #0
 800639e:	2001      	movs	r0, #1
 80063a0:	f000 fa2a 	bl	80067f8 <xQueueGenericCreate>
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <osSemaphoreCreate+0x56>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2200      	movs	r2, #0
 80063b0:	2100      	movs	r1, #0
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 fa7a 	bl	80068ac <xQueueGenericSend>
      return sema;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	e000      	b.n	80063be <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80063bc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80063d2:	2300      	movs	r3, #0
 80063d4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	e03a      	b.n	8006456 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ea:	d103      	bne.n	80063f4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80063ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	e009      	b.n	8006408 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d006      	beq.n	8006408 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <osSemaphoreWait+0x40>
      ticks = 1;
 8006404:	2301      	movs	r3, #1
 8006406:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006408:	f7ff ff32 	bl	8006270 <inHandlerMode>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d017      	beq.n	8006442 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006412:	f107 0308 	add.w	r3, r7, #8
 8006416:	461a      	mov	r2, r3
 8006418:	2100      	movs	r1, #0
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fcde 	bl	8006ddc <xQueueReceiveFromISR>
 8006420:	4603      	mov	r3, r0
 8006422:	2b01      	cmp	r3, #1
 8006424:	d001      	beq.n	800642a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006426:	23ff      	movs	r3, #255	; 0xff
 8006428:	e015      	b.n	8006456 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d011      	beq.n	8006454 <osSemaphoreWait+0x8c>
 8006430:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <osSemaphoreWait+0x98>)
 8006432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006436:	601a      	str	r2, [r3, #0]
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	e008      	b.n	8006454 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fbbd 	bl	8006bc4 <xQueueSemaphoreTake>
 800644a:	4603      	mov	r3, r0
 800644c:	2b01      	cmp	r3, #1
 800644e:	d001      	beq.n	8006454 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006450:	23ff      	movs	r3, #255	; 0xff
 8006452:	e000      	b.n	8006456 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	e000ed04 	.word	0xe000ed04

08006464 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006470:	2300      	movs	r3, #0
 8006472:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006474:	f7ff fefc 	bl	8006270 <inHandlerMode>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d016      	beq.n	80064ac <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800647e:	f107 0308 	add.w	r3, r7, #8
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fb0f 	bl	8006aa8 <xQueueGiveFromISR>
 800648a:	4603      	mov	r3, r0
 800648c:	2b01      	cmp	r3, #1
 800648e:	d001      	beq.n	8006494 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006490:	23ff      	movs	r3, #255	; 0xff
 8006492:	e017      	b.n	80064c4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d013      	beq.n	80064c2 <osSemaphoreRelease+0x5e>
 800649a:	4b0c      	ldr	r3, [pc, #48]	; (80064cc <osSemaphoreRelease+0x68>)
 800649c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064a0:	601a      	str	r2, [r3, #0]
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	e00a      	b.n	80064c2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80064ac:	2300      	movs	r3, #0
 80064ae:	2200      	movs	r2, #0
 80064b0:	2100      	movs	r1, #0
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f9fa 	bl	80068ac <xQueueGenericSend>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d001      	beq.n	80064c2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80064be:	23ff      	movs	r3, #255	; 0xff
 80064c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80064c2:	68fb      	ldr	r3, [r7, #12]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	e000ed04 	.word	0xe000ed04

080064d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f103 0208 	add.w	r2, r3, #8
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f103 0208 	add.w	r2, r3, #8
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f103 0208 	add.w	r2, r3, #8
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800651e:	bf00      	nop
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	601a      	str	r2, [r3, #0]
}
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr

08006572 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006572:	b480      	push	{r7}
 8006574:	b085      	sub	sp, #20
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006588:	d103      	bne.n	8006592 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	60fb      	str	r3, [r7, #12]
 8006590:	e00c      	b.n	80065ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	3308      	adds	r3, #8
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	e002      	b.n	80065a0 <vListInsert+0x2e>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	60fb      	str	r3, [r7, #12]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d2f6      	bcs.n	800659a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	683a      	ldr	r2, [r7, #0]
 80065c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	601a      	str	r2, [r3, #0]
}
 80065d8:	bf00      	nop
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	6892      	ldr	r2, [r2, #8]
 80065fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6852      	ldr	r2, [r2, #4]
 8006604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	429a      	cmp	r2, r3
 800660e:	d103      	bne.n	8006618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	1e5a      	subs	r2, r3, #1
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800664c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006650:	f383 8811 	msr	BASEPRI, r3
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	f3bf 8f4f 	dsb	sy
 800665c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800665e:	bf00      	nop
 8006660:	e7fe      	b.n	8006660 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006662:	f001 fe77 	bl	8008354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666e:	68f9      	ldr	r1, [r7, #12]
 8006670:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006672:	fb01 f303 	mul.w	r3, r1, r3
 8006676:	441a      	add	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	3b01      	subs	r3, #1
 8006694:	68f9      	ldr	r1, [r7, #12]
 8006696:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006698:	fb01 f303 	mul.w	r3, r1, r3
 800669c:	441a      	add	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	22ff      	movs	r2, #255	; 0xff
 80066a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	22ff      	movs	r2, #255	; 0xff
 80066ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d114      	bne.n	80066e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d01a      	beq.n	80066f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3310      	adds	r3, #16
 80066c4:	4618      	mov	r0, r3
 80066c6:	f001 f93b 	bl	8007940 <xTaskRemoveFromEventList>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d012      	beq.n	80066f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <xQueueGenericReset+0xcc>)
 80066d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	e009      	b.n	80066f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3310      	adds	r3, #16
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fef2 	bl	80064d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3324      	adds	r3, #36	; 0x24
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff feed 	bl	80064d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066f6:	f001 fe5d 	bl	80083b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066fa:	2301      	movs	r3, #1
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006708:	b580      	push	{r7, lr}
 800670a:	b08e      	sub	sp, #56	; 0x38
 800670c:	af02      	add	r7, sp, #8
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d002      	beq.n	800675a <xQueueGenericCreateStatic+0x52>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <xQueueGenericCreateStatic+0x56>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <xQueueGenericCreateStatic+0x58>
 800675e:	2300      	movs	r3, #0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	623b      	str	r3, [r7, #32]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d102      	bne.n	8006786 <xQueueGenericCreateStatic+0x7e>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <xQueueGenericCreateStatic+0x82>
 8006786:	2301      	movs	r3, #1
 8006788:	e000      	b.n	800678c <xQueueGenericCreateStatic+0x84>
 800678a:	2300      	movs	r3, #0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	61fb      	str	r3, [r7, #28]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80067a6:	2348      	movs	r3, #72	; 0x48
 80067a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2b48      	cmp	r3, #72	; 0x48
 80067ae:	d00a      	beq.n	80067c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	61bb      	str	r3, [r7, #24]
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80067c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00d      	beq.n	80067ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80067d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80067de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	4613      	mov	r3, r2
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f83f 	bl	800686c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3730      	adds	r7, #48	; 0x30
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af02      	add	r7, sp, #8
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	4613      	mov	r3, r2
 8006804:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <xQueueGenericCreate+0x2a>
	__asm volatile
 800680c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006810:	f383 8811 	msr	BASEPRI, r3
 8006814:	f3bf 8f6f 	isb	sy
 8006818:	f3bf 8f4f 	dsb	sy
 800681c:	613b      	str	r3, [r7, #16]
}
 800681e:	bf00      	nop
 8006820:	e7fe      	b.n	8006820 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	fb02 f303 	mul.w	r3, r2, r3
 800682a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	3348      	adds	r3, #72	; 0x48
 8006830:	4618      	mov	r0, r3
 8006832:	f001 feb1 	bl	8008598 <pvPortMalloc>
 8006836:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d011      	beq.n	8006862 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	3348      	adds	r3, #72	; 0x48
 8006846:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006850:	79fa      	ldrb	r2, [r7, #7]
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	4613      	mov	r3, r2
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	68b9      	ldr	r1, [r7, #8]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f000 f805 	bl	800686c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006862:	69bb      	ldr	r3, [r7, #24]
	}
 8006864:	4618      	mov	r0, r3
 8006866:	3720      	adds	r7, #32
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d103      	bne.n	8006888 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e002      	b.n	800688e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800689a:	2101      	movs	r1, #1
 800689c:	69b8      	ldr	r0, [r7, #24]
 800689e:	f7ff fecb 	bl	8006638 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068a2:	bf00      	nop
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
	...

080068ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b08e      	sub	sp, #56	; 0x38
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
 80068b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068ba:	2300      	movs	r3, #0
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xQueueGenericSend+0x32>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <xQueueGenericSend+0x40>
 80068e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <xQueueGenericSend+0x44>
 80068ec:	2301      	movs	r3, #1
 80068ee:	e000      	b.n	80068f2 <xQueueGenericSend+0x46>
 80068f0:	2300      	movs	r3, #0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <xQueueGenericSend+0x60>
	__asm volatile
 80068f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006908:	bf00      	nop
 800690a:	e7fe      	b.n	800690a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b02      	cmp	r3, #2
 8006910:	d103      	bne.n	800691a <xQueueGenericSend+0x6e>
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <xQueueGenericSend+0x72>
 800691a:	2301      	movs	r3, #1
 800691c:	e000      	b.n	8006920 <xQueueGenericSend+0x74>
 800691e:	2300      	movs	r3, #0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <xQueueGenericSend+0x8e>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	623b      	str	r3, [r7, #32]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800693a:	f001 f9bd 	bl	8007cb8 <xTaskGetSchedulerState>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d102      	bne.n	800694a <xQueueGenericSend+0x9e>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d101      	bne.n	800694e <xQueueGenericSend+0xa2>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <xQueueGenericSend+0xa4>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <xQueueGenericSend+0xbe>
	__asm volatile
 8006954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006958:	f383 8811 	msr	BASEPRI, r3
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	f3bf 8f4f 	dsb	sy
 8006964:	61fb      	str	r3, [r7, #28]
}
 8006966:	bf00      	nop
 8006968:	e7fe      	b.n	8006968 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800696a:	f001 fcf3 	bl	8008354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006976:	429a      	cmp	r2, r3
 8006978:	d302      	bcc.n	8006980 <xQueueGenericSend+0xd4>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b02      	cmp	r3, #2
 800697e:	d129      	bne.n	80069d4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006986:	f000 fac1 	bl	8006f0c <prvCopyDataToQueue>
 800698a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	2b00      	cmp	r3, #0
 8006992:	d010      	beq.n	80069b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	3324      	adds	r3, #36	; 0x24
 8006998:	4618      	mov	r0, r3
 800699a:	f000 ffd1 	bl	8007940 <xTaskRemoveFromEventList>
 800699e:	4603      	mov	r3, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d013      	beq.n	80069cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069a4:	4b3f      	ldr	r3, [pc, #252]	; (8006aa4 <xQueueGenericSend+0x1f8>)
 80069a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	e00a      	b.n	80069cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d007      	beq.n	80069cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069bc:	4b39      	ldr	r3, [pc, #228]	; (8006aa4 <xQueueGenericSend+0x1f8>)
 80069be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069cc:	f001 fcf2 	bl	80083b4 <vPortExitCritical>
				return pdPASS;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e063      	b.n	8006a9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d103      	bne.n	80069e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069da:	f001 fceb 	bl	80083b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	e05c      	b.n	8006a9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d106      	bne.n	80069f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069e8:	f107 0314 	add.w	r3, r7, #20
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 f809 	bl	8007a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069f2:	2301      	movs	r3, #1
 80069f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069f6:	f001 fcdd 	bl	80083b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069fa:	f000 fdbf 	bl	800757c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069fe:	f001 fca9 	bl	8008354 <vPortEnterCritical>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a08:	b25b      	sxtb	r3, r3
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a0e:	d103      	bne.n	8006a18 <xQueueGenericSend+0x16c>
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a1e:	b25b      	sxtb	r3, r3
 8006a20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a24:	d103      	bne.n	8006a2e <xQueueGenericSend+0x182>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a2e:	f001 fcc1 	bl	80083b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a32:	1d3a      	adds	r2, r7, #4
 8006a34:	f107 0314 	add.w	r3, r7, #20
 8006a38:	4611      	mov	r1, r2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fff8 	bl	8007a30 <xTaskCheckForTimeOut>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d124      	bne.n	8006a90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a48:	f000 fb58 	bl	80070fc <prvIsQueueFull>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d018      	beq.n	8006a84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	3310      	adds	r3, #16
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 ff4c 	bl	80078f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a62:	f000 fae3 	bl	800702c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a66:	f000 fd97 	bl	8007598 <xTaskResumeAll>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f47f af7c 	bne.w	800696a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a72:	4b0c      	ldr	r3, [pc, #48]	; (8006aa4 <xQueueGenericSend+0x1f8>)
 8006a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	e772      	b.n	800696a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a86:	f000 fad1 	bl	800702c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a8a:	f000 fd85 	bl	8007598 <xTaskResumeAll>
 8006a8e:	e76c      	b.n	800696a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a92:	f000 facb 	bl	800702c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a96:	f000 fd7f 	bl	8007598 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3738      	adds	r7, #56	; 0x38
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	e000ed04 	.word	0xe000ed04

08006aa8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08e      	sub	sp, #56	; 0x38
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	623b      	str	r3, [r7, #32]
}
 8006ace:	bf00      	nop
 8006ad0:	e7fe      	b.n	8006ad0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00a      	beq.n	8006af0 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	61fb      	str	r3, [r7, #28]
}
 8006aec:	bf00      	nop
 8006aee:	e7fe      	b.n	8006aee <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d103      	bne.n	8006b00 <xQueueGiveFromISR+0x58>
 8006af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <xQueueGiveFromISR+0x5c>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <xQueueGiveFromISR+0x5e>
 8006b04:	2300      	movs	r3, #0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10a      	bne.n	8006b20 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	61bb      	str	r3, [r7, #24]
}
 8006b1c:	bf00      	nop
 8006b1e:	e7fe      	b.n	8006b1e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b20:	f001 fcfa 	bl	8008518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b24:	f3ef 8211 	mrs	r2, BASEPRI
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	617a      	str	r2, [r7, #20]
 8006b3a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b3c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d22b      	bcs.n	8006ba8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b6a:	d112      	bne.n	8006b92 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d016      	beq.n	8006ba2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	3324      	adds	r3, #36	; 0x24
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f000 fee1 	bl	8007940 <xTaskRemoveFromEventList>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00e      	beq.n	8006ba2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00b      	beq.n	8006ba2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	e007      	b.n	8006ba2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b96:	3301      	adds	r3, #1
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	b25a      	sxtb	r2, r3
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ba6:	e001      	b.n	8006bac <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	637b      	str	r3, [r7, #52]	; 0x34
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bae:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bb6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3738      	adds	r7, #56	; 0x38
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
	...

08006bc4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08e      	sub	sp, #56	; 0x38
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10a      	bne.n	8006bf6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	623b      	str	r3, [r7, #32]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	61fb      	str	r3, [r7, #28]
}
 8006c10:	bf00      	nop
 8006c12:	e7fe      	b.n	8006c12 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c14:	f001 f850 	bl	8007cb8 <xTaskGetSchedulerState>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d102      	bne.n	8006c24 <xQueueSemaphoreTake+0x60>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <xQueueSemaphoreTake+0x64>
 8006c24:	2301      	movs	r3, #1
 8006c26:	e000      	b.n	8006c2a <xQueueSemaphoreTake+0x66>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	61bb      	str	r3, [r7, #24]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c44:	f001 fb86 	bl	8008354 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d024      	beq.n	8006c9e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	1e5a      	subs	r2, r3, #1
 8006c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d104      	bne.n	8006c6e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006c64:	f001 f9d0 	bl	8008008 <pvTaskIncrementMutexHeldCount>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00f      	beq.n	8006c96 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c78:	3310      	adds	r3, #16
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fe60 	bl	8007940 <xTaskRemoveFromEventList>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d007      	beq.n	8006c96 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c86:	4b54      	ldr	r3, [pc, #336]	; (8006dd8 <xQueueSemaphoreTake+0x214>)
 8006c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c96:	f001 fb8d 	bl	80083b4 <vPortExitCritical>
				return pdPASS;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e097      	b.n	8006dce <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d111      	bne.n	8006cc8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	617b      	str	r3, [r7, #20]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006cc0:	f001 fb78 	bl	80083b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e082      	b.n	8006dce <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d106      	bne.n	8006cdc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cce:	f107 030c 	add.w	r3, r7, #12
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fe96 	bl	8007a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cdc:	f001 fb6a 	bl	80083b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ce0:	f000 fc4c 	bl	800757c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ce4:	f001 fb36 	bl	8008354 <vPortEnterCritical>
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cee:	b25b      	sxtb	r3, r3
 8006cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cf4:	d103      	bne.n	8006cfe <xQueueSemaphoreTake+0x13a>
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d04:	b25b      	sxtb	r3, r3
 8006d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d0a:	d103      	bne.n	8006d14 <xQueueSemaphoreTake+0x150>
 8006d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d14:	f001 fb4e 	bl	80083b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d18:	463a      	mov	r2, r7
 8006d1a:	f107 030c 	add.w	r3, r7, #12
 8006d1e:	4611      	mov	r1, r2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fe85 	bl	8007a30 <xTaskCheckForTimeOut>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d132      	bne.n	8006d92 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d2e:	f000 f9cf 	bl	80070d0 <prvIsQueueEmpty>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d026      	beq.n	8006d86 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006d40:	f001 fb08 	bl	8008354 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 ffd3 	bl	8007cf4 <xTaskPriorityInherit>
 8006d4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006d50:	f001 fb30 	bl	80083b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	3324      	adds	r3, #36	; 0x24
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 fdcb 	bl	80078f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d64:	f000 f962 	bl	800702c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d68:	f000 fc16 	bl	8007598 <xTaskResumeAll>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f47f af68 	bne.w	8006c44 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006d74:	4b18      	ldr	r3, [pc, #96]	; (8006dd8 <xQueueSemaphoreTake+0x214>)
 8006d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	e75e      	b.n	8006c44 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d88:	f000 f950 	bl	800702c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d8c:	f000 fc04 	bl	8007598 <xTaskResumeAll>
 8006d90:	e758      	b.n	8006c44 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d94:	f000 f94a 	bl	800702c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d98:	f000 fbfe 	bl	8007598 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d9e:	f000 f997 	bl	80070d0 <prvIsQueueEmpty>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f43f af4d 	beq.w	8006c44 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00d      	beq.n	8006dcc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006db0:	f001 fad0 	bl	8008354 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006db4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006db6:	f000 f891 	bl	8006edc <prvGetDisinheritPriorityAfterTimeout>
 8006dba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 f892 	bl	8007eec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006dc8:	f001 faf4 	bl	80083b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3738      	adds	r7, #56	; 0x38
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b08e      	sub	sp, #56	; 0x38
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10a      	bne.n	8006e08 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	623b      	str	r3, [r7, #32]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <xQueueReceiveFromISR+0x3a>
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <xQueueReceiveFromISR+0x3e>
 8006e16:	2301      	movs	r3, #1
 8006e18:	e000      	b.n	8006e1c <xQueueReceiveFromISR+0x40>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10a      	bne.n	8006e36 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	61fb      	str	r3, [r7, #28]
}
 8006e32:	bf00      	nop
 8006e34:	e7fe      	b.n	8006e34 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006e36:	f001 fb6f 	bl	8008518 <vPortValidateInterruptPriority>
	__asm volatile
 8006e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	61ba      	str	r2, [r7, #24]
 8006e50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006e52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d02f      	beq.n	8006ec2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e70:	f000 f8b6 	bl	8006fe0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e76:	1e5a      	subs	r2, r3, #1
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006e7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e84:	d112      	bne.n	8006eac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d016      	beq.n	8006ebc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	3310      	adds	r3, #16
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fd54 	bl	8007940 <xTaskRemoveFromEventList>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00e      	beq.n	8006ebc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00b      	beq.n	8006ebc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	e007      	b.n	8006ebc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	b25a      	sxtb	r2, r3
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec0:	e001      	b.n	8006ec6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f383 8811 	msr	BASEPRI, r3
}
 8006ed0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3738      	adds	r7, #56	; 0x38
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d006      	beq.n	8006efa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f1c3 0307 	rsb	r3, r3, #7
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e001      	b.n	8006efe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006efe:	68fb      	ldr	r3, [r7, #12]
	}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10d      	bne.n	8006f46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d14d      	bne.n	8006fce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 ff52 	bl	8007de0 <xTaskPriorityDisinherit>
 8006f3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	e043      	b.n	8006fce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d119      	bne.n	8006f80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6858      	ldr	r0, [r3, #4]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f54:	461a      	mov	r2, r3
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	f003 fa82 	bl	800a460 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f64:	441a      	add	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d32b      	bcc.n	8006fce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	e026      	b.n	8006fce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68d8      	ldr	r0, [r3, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	f003 fa68 	bl	800a460 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	425b      	negs	r3, r3
 8006f9a:	441a      	add	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d207      	bcs.n	8006fbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	425b      	negs	r3, r3
 8006fb6:	441a      	add	r2, r3
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2b02      	cmp	r3, #2
 8006fc0:	d105      	bne.n	8006fce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fd6:	697b      	ldr	r3, [r7, #20]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3718      	adds	r7, #24
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d018      	beq.n	8007024 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	441a      	add	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	429a      	cmp	r2, r3
 800700a:	d303      	bcc.n	8007014 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68d9      	ldr	r1, [r3, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	461a      	mov	r2, r3
 800701e:	6838      	ldr	r0, [r7, #0]
 8007020:	f003 fa1e 	bl	800a460 <memcpy>
	}
}
 8007024:	bf00      	nop
 8007026:	3708      	adds	r7, #8
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007034:	f001 f98e 	bl	8008354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800703e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007040:	e011      	b.n	8007066 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	2b00      	cmp	r3, #0
 8007048:	d012      	beq.n	8007070 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	3324      	adds	r3, #36	; 0x24
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fc76 	bl	8007940 <xTaskRemoveFromEventList>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800705a:	f000 fd4b 	bl	8007af4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	3b01      	subs	r3, #1
 8007062:	b2db      	uxtb	r3, r3
 8007064:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800706a:	2b00      	cmp	r3, #0
 800706c:	dce9      	bgt.n	8007042 <prvUnlockQueue+0x16>
 800706e:	e000      	b.n	8007072 <prvUnlockQueue+0x46>
					break;
 8007070:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	22ff      	movs	r2, #255	; 0xff
 8007076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800707a:	f001 f99b 	bl	80083b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800707e:	f001 f969 	bl	8008354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007088:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800708a:	e011      	b.n	80070b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d012      	beq.n	80070ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3310      	adds	r3, #16
 8007098:	4618      	mov	r0, r3
 800709a:	f000 fc51 	bl	8007940 <xTaskRemoveFromEventList>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070a4:	f000 fd26 	bl	8007af4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070a8:	7bbb      	ldrb	r3, [r7, #14]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dce9      	bgt.n	800708c <prvUnlockQueue+0x60>
 80070b8:	e000      	b.n	80070bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	22ff      	movs	r2, #255	; 0xff
 80070c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070c4:	f001 f976 	bl	80083b4 <vPortExitCritical>
}
 80070c8:	bf00      	nop
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070d8:	f001 f93c 	bl	8008354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d102      	bne.n	80070ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e001      	b.n	80070ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ee:	f001 f961 	bl	80083b4 <vPortExitCritical>

	return xReturn;
 80070f2:	68fb      	ldr	r3, [r7, #12]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007104:	f001 f926 	bl	8008354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007110:	429a      	cmp	r2, r3
 8007112:	d102      	bne.n	800711a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e001      	b.n	800711e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800711a:	2300      	movs	r3, #0
 800711c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800711e:	f001 f949 	bl	80083b4 <vPortExitCritical>

	return xReturn;
 8007122:	68fb      	ldr	r3, [r7, #12]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08e      	sub	sp, #56	; 0x38
 8007130:	af04      	add	r7, sp, #16
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800713a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10a      	bne.n	8007156 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	623b      	str	r3, [r7, #32]
}
 8007152:	bf00      	nop
 8007154:	e7fe      	b.n	8007154 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <xTaskCreateStatic+0x46>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	61fb      	str	r3, [r7, #28]
}
 800716e:	bf00      	nop
 8007170:	e7fe      	b.n	8007170 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007172:	2354      	movs	r3, #84	; 0x54
 8007174:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b54      	cmp	r3, #84	; 0x54
 800717a:	d00a      	beq.n	8007192 <xTaskCreateStatic+0x66>
	__asm volatile
 800717c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007180:	f383 8811 	msr	BASEPRI, r3
 8007184:	f3bf 8f6f 	isb	sy
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	61bb      	str	r3, [r7, #24]
}
 800718e:	bf00      	nop
 8007190:	e7fe      	b.n	8007190 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007192:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01e      	beq.n	80071d8 <xTaskCreateStatic+0xac>
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	2b00      	cmp	r3, #0
 800719e:	d01b      	beq.n	80071d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ac:	2202      	movs	r2, #2
 80071ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071b2:	2300      	movs	r3, #0
 80071b4:	9303      	str	r3, [sp, #12]
 80071b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b8:	9302      	str	r3, [sp, #8]
 80071ba:	f107 0314 	add.w	r3, r7, #20
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f850 	bl	8007270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071d2:	f000 f8d5 	bl	8007380 <prvAddNewTaskToReadyList>
 80071d6:	e001      	b.n	80071dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80071dc:	697b      	ldr	r3, [r7, #20]
	}
 80071de:	4618      	mov	r0, r3
 80071e0:	3728      	adds	r7, #40	; 0x28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b08c      	sub	sp, #48	; 0x30
 80071ea:	af04      	add	r7, sp, #16
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	603b      	str	r3, [r7, #0]
 80071f2:	4613      	mov	r3, r2
 80071f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80071f6:	88fb      	ldrh	r3, [r7, #6]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	4618      	mov	r0, r3
 80071fc:	f001 f9cc 	bl	8008598 <pvPortMalloc>
 8007200:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00e      	beq.n	8007226 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007208:	2054      	movs	r0, #84	; 0x54
 800720a:	f001 f9c5 	bl	8008598 <pvPortMalloc>
 800720e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
 800721c:	e005      	b.n	800722a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800721e:	6978      	ldr	r0, [r7, #20]
 8007220:	f001 fa86 	bl	8008730 <vPortFree>
 8007224:	e001      	b.n	800722a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007226:	2300      	movs	r3, #0
 8007228:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d017      	beq.n	8007260 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007238:	88fa      	ldrh	r2, [r7, #6]
 800723a:	2300      	movs	r3, #0
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	69fb      	ldr	r3, [r7, #28]
 8007240:	9302      	str	r3, [sp, #8]
 8007242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f80e 	bl	8007270 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007254:	69f8      	ldr	r0, [r7, #28]
 8007256:	f000 f893 	bl	8007380 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800725a:	2301      	movs	r3, #1
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e002      	b.n	8007266 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007260:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007264:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007266:	69bb      	ldr	r3, [r7, #24]
	}
 8007268:	4618      	mov	r0, r3
 800726a:	3720      	adds	r7, #32
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007288:	3b01      	subs	r3, #1
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	f023 0307 	bic.w	r3, r3, #7
 8007296:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	f003 0307 	and.w	r3, r3, #7
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80072a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a6:	f383 8811 	msr	BASEPRI, r3
 80072aa:	f3bf 8f6f 	isb	sy
 80072ae:	f3bf 8f4f 	dsb	sy
 80072b2:	617b      	str	r3, [r7, #20]
}
 80072b4:	bf00      	nop
 80072b6:	e7fe      	b.n	80072b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d01f      	beq.n	80072fe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072be:	2300      	movs	r3, #0
 80072c0:	61fb      	str	r3, [r7, #28]
 80072c2:	e012      	b.n	80072ea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	7819      	ldrb	r1, [r3, #0]
 80072cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	4413      	add	r3, r2
 80072d2:	3334      	adds	r3, #52	; 0x34
 80072d4:	460a      	mov	r2, r1
 80072d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	4413      	add	r3, r2
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d006      	beq.n	80072f2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	3301      	adds	r3, #1
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	2b0f      	cmp	r3, #15
 80072ee:	d9e9      	bls.n	80072c4 <prvInitialiseNewTask+0x54>
 80072f0:	e000      	b.n	80072f4 <prvInitialiseNewTask+0x84>
			{
				break;
 80072f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f6:	2200      	movs	r2, #0
 80072f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80072fc:	e003      	b.n	8007306 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	2b06      	cmp	r3, #6
 800730a:	d901      	bls.n	8007310 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800730c:	2306      	movs	r3, #6
 800730e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007314:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800731a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800731c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800731e:	2200      	movs	r2, #0
 8007320:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	3304      	adds	r3, #4
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff f8f2 	bl	8006510 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	3318      	adds	r3, #24
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff f8ed 	bl	8006510 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800733a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	f1c3 0207 	rsb	r2, r3, #7
 8007342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007344:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	2200      	movs	r2, #0
 8007350:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	68f9      	ldr	r1, [r7, #12]
 800735e:	69b8      	ldr	r0, [r7, #24]
 8007360:	f000 fecc 	bl	80080fc <pxPortInitialiseStack>
 8007364:	4602      	mov	r2, r0
 8007366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007368:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800736a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007376:	bf00      	nop
 8007378:	3720      	adds	r7, #32
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
	...

08007380 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007388:	f000 ffe4 	bl	8008354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800738c:	4b2a      	ldr	r3, [pc, #168]	; (8007438 <prvAddNewTaskToReadyList+0xb8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3301      	adds	r3, #1
 8007392:	4a29      	ldr	r2, [pc, #164]	; (8007438 <prvAddNewTaskToReadyList+0xb8>)
 8007394:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007396:	4b29      	ldr	r3, [pc, #164]	; (800743c <prvAddNewTaskToReadyList+0xbc>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800739e:	4a27      	ldr	r2, [pc, #156]	; (800743c <prvAddNewTaskToReadyList+0xbc>)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80073a4:	4b24      	ldr	r3, [pc, #144]	; (8007438 <prvAddNewTaskToReadyList+0xb8>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d110      	bne.n	80073ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80073ac:	f000 fbc6 	bl	8007b3c <prvInitialiseTaskLists>
 80073b0:	e00d      	b.n	80073ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80073b2:	4b23      	ldr	r3, [pc, #140]	; (8007440 <prvAddNewTaskToReadyList+0xc0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d109      	bne.n	80073ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80073ba:	4b20      	ldr	r3, [pc, #128]	; (800743c <prvAddNewTaskToReadyList+0xbc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d802      	bhi.n	80073ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073c8:	4a1c      	ldr	r2, [pc, #112]	; (800743c <prvAddNewTaskToReadyList+0xbc>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073ce:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <prvAddNewTaskToReadyList+0xc4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	3301      	adds	r3, #1
 80073d4:	4a1b      	ldr	r2, [pc, #108]	; (8007444 <prvAddNewTaskToReadyList+0xc4>)
 80073d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073dc:	2201      	movs	r2, #1
 80073de:	409a      	lsls	r2, r3
 80073e0:	4b19      	ldr	r3, [pc, #100]	; (8007448 <prvAddNewTaskToReadyList+0xc8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	4a18      	ldr	r2, [pc, #96]	; (8007448 <prvAddNewTaskToReadyList+0xc8>)
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4a15      	ldr	r2, [pc, #84]	; (800744c <prvAddNewTaskToReadyList+0xcc>)
 80073f8:	441a      	add	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3304      	adds	r3, #4
 80073fe:	4619      	mov	r1, r3
 8007400:	4610      	mov	r0, r2
 8007402:	f7ff f892 	bl	800652a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007406:	f000 ffd5 	bl	80083b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800740a:	4b0d      	ldr	r3, [pc, #52]	; (8007440 <prvAddNewTaskToReadyList+0xc0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00e      	beq.n	8007430 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007412:	4b0a      	ldr	r3, [pc, #40]	; (800743c <prvAddNewTaskToReadyList+0xbc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	429a      	cmp	r2, r3
 800741e:	d207      	bcs.n	8007430 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007420:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <prvAddNewTaskToReadyList+0xd0>)
 8007422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	20000258 	.word	0x20000258
 800743c:	20000158 	.word	0x20000158
 8007440:	20000264 	.word	0x20000264
 8007444:	20000274 	.word	0x20000274
 8007448:	20000260 	.word	0x20000260
 800744c:	2000015c 	.word	0x2000015c
 8007450:	e000ed04 	.word	0xe000ed04

08007454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d017      	beq.n	8007496 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007466:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <vTaskDelay+0x60>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <vTaskDelay+0x30>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	60bb      	str	r3, [r7, #8]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007484:	f000 f87a 	bl	800757c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007488:	2100      	movs	r1, #0
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fdd0 	bl	8008030 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007490:	f000 f882 	bl	8007598 <xTaskResumeAll>
 8007494:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d107      	bne.n	80074ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <vTaskDelay+0x64>)
 800749e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	f3bf 8f4f 	dsb	sy
 80074a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80074ac:	bf00      	nop
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000280 	.word	0x20000280
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08a      	sub	sp, #40	; 0x28
 80074c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074c2:	2300      	movs	r3, #0
 80074c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074ca:	463a      	mov	r2, r7
 80074cc:	1d39      	adds	r1, r7, #4
 80074ce:	f107 0308 	add.w	r3, r7, #8
 80074d2:	4618      	mov	r0, r3
 80074d4:	f001 fa4a 	bl	800896c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	9202      	str	r2, [sp, #8]
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	2300      	movs	r3, #0
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	2300      	movs	r3, #0
 80074e8:	460a      	mov	r2, r1
 80074ea:	491e      	ldr	r1, [pc, #120]	; (8007564 <vTaskStartScheduler+0xa8>)
 80074ec:	481e      	ldr	r0, [pc, #120]	; (8007568 <vTaskStartScheduler+0xac>)
 80074ee:	f7ff fe1d 	bl	800712c <xTaskCreateStatic>
 80074f2:	4603      	mov	r3, r0
 80074f4:	4a1d      	ldr	r2, [pc, #116]	; (800756c <vTaskStartScheduler+0xb0>)
 80074f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074f8:	4b1c      	ldr	r3, [pc, #112]	; (800756c <vTaskStartScheduler+0xb0>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d002      	beq.n	8007506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007500:	2301      	movs	r3, #1
 8007502:	617b      	str	r3, [r7, #20]
 8007504:	e001      	b.n	800750a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007506:	2300      	movs	r3, #0
 8007508:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d116      	bne.n	800753e <vTaskStartScheduler+0x82>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	613b      	str	r3, [r7, #16]
}
 8007522:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007524:	4b12      	ldr	r3, [pc, #72]	; (8007570 <vTaskStartScheduler+0xb4>)
 8007526:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800752a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800752c:	4b11      	ldr	r3, [pc, #68]	; (8007574 <vTaskStartScheduler+0xb8>)
 800752e:	2201      	movs	r2, #1
 8007530:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007532:	4b11      	ldr	r3, [pc, #68]	; (8007578 <vTaskStartScheduler+0xbc>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007538:	f000 fe6a 	bl	8008210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800753c:	e00e      	b.n	800755c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007544:	d10a      	bne.n	800755c <vTaskStartScheduler+0xa0>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60fb      	str	r3, [r7, #12]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <vTaskStartScheduler+0x9e>
}
 800755c:	bf00      	nop
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	0800ad64 	.word	0x0800ad64
 8007568:	08007b0d 	.word	0x08007b0d
 800756c:	2000027c 	.word	0x2000027c
 8007570:	20000278 	.word	0x20000278
 8007574:	20000264 	.word	0x20000264
 8007578:	2000025c 	.word	0x2000025c

0800757c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007580:	4b04      	ldr	r3, [pc, #16]	; (8007594 <vTaskSuspendAll+0x18>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3301      	adds	r3, #1
 8007586:	4a03      	ldr	r2, [pc, #12]	; (8007594 <vTaskSuspendAll+0x18>)
 8007588:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800758a:	bf00      	nop
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr
 8007594:	20000280 	.word	0x20000280

08007598 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075a6:	4b41      	ldr	r3, [pc, #260]	; (80076ac <xTaskResumeAll+0x114>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80075ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	603b      	str	r3, [r7, #0]
}
 80075c0:	bf00      	nop
 80075c2:	e7fe      	b.n	80075c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075c4:	f000 fec6 	bl	8008354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075c8:	4b38      	ldr	r3, [pc, #224]	; (80076ac <xTaskResumeAll+0x114>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3b01      	subs	r3, #1
 80075ce:	4a37      	ldr	r2, [pc, #220]	; (80076ac <xTaskResumeAll+0x114>)
 80075d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d2:	4b36      	ldr	r3, [pc, #216]	; (80076ac <xTaskResumeAll+0x114>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d161      	bne.n	800769e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075da:	4b35      	ldr	r3, [pc, #212]	; (80076b0 <xTaskResumeAll+0x118>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d05d      	beq.n	800769e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075e2:	e02e      	b.n	8007642 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075e4:	4b33      	ldr	r3, [pc, #204]	; (80076b4 <xTaskResumeAll+0x11c>)
 80075e6:	68db      	ldr	r3, [r3, #12]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3318      	adds	r3, #24
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe fff7 	bl	80065e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fff2 	bl	80065e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007604:	2201      	movs	r2, #1
 8007606:	409a      	lsls	r2, r3
 8007608:	4b2b      	ldr	r3, [pc, #172]	; (80076b8 <xTaskResumeAll+0x120>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4313      	orrs	r3, r2
 800760e:	4a2a      	ldr	r2, [pc, #168]	; (80076b8 <xTaskResumeAll+0x120>)
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	4a27      	ldr	r2, [pc, #156]	; (80076bc <xTaskResumeAll+0x124>)
 8007620:	441a      	add	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	3304      	adds	r3, #4
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f7fe ff7e 	bl	800652a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007632:	4b23      	ldr	r3, [pc, #140]	; (80076c0 <xTaskResumeAll+0x128>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007638:	429a      	cmp	r2, r3
 800763a:	d302      	bcc.n	8007642 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800763c:	4b21      	ldr	r3, [pc, #132]	; (80076c4 <xTaskResumeAll+0x12c>)
 800763e:	2201      	movs	r2, #1
 8007640:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007642:	4b1c      	ldr	r3, [pc, #112]	; (80076b4 <xTaskResumeAll+0x11c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1cc      	bne.n	80075e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007650:	f000 fb12 	bl	8007c78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007654:	4b1c      	ldr	r3, [pc, #112]	; (80076c8 <xTaskResumeAll+0x130>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d010      	beq.n	8007682 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007660:	f000 f836 	bl	80076d0 <xTaskIncrementTick>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800766a:	4b16      	ldr	r3, [pc, #88]	; (80076c4 <xTaskResumeAll+0x12c>)
 800766c:	2201      	movs	r2, #1
 800766e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3b01      	subs	r3, #1
 8007674:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1f1      	bne.n	8007660 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800767c:	4b12      	ldr	r3, [pc, #72]	; (80076c8 <xTaskResumeAll+0x130>)
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007682:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <xTaskResumeAll+0x12c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800768a:	2301      	movs	r3, #1
 800768c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800768e:	4b0f      	ldr	r3, [pc, #60]	; (80076cc <xTaskResumeAll+0x134>)
 8007690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007694:	601a      	str	r2, [r3, #0]
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800769e:	f000 fe89 	bl	80083b4 <vPortExitCritical>

	return xAlreadyYielded;
 80076a2:	68bb      	ldr	r3, [r7, #8]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3710      	adds	r7, #16
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	20000280 	.word	0x20000280
 80076b0:	20000258 	.word	0x20000258
 80076b4:	20000218 	.word	0x20000218
 80076b8:	20000260 	.word	0x20000260
 80076bc:	2000015c 	.word	0x2000015c
 80076c0:	20000158 	.word	0x20000158
 80076c4:	2000026c 	.word	0x2000026c
 80076c8:	20000268 	.word	0x20000268
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076da:	4b4e      	ldr	r3, [pc, #312]	; (8007814 <xTaskIncrementTick+0x144>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f040 808e 	bne.w	8007800 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076e4:	4b4c      	ldr	r3, [pc, #304]	; (8007818 <xTaskIncrementTick+0x148>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076ec:	4a4a      	ldr	r2, [pc, #296]	; (8007818 <xTaskIncrementTick+0x148>)
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d120      	bne.n	800773a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80076f8:	4b48      	ldr	r3, [pc, #288]	; (800781c <xTaskIncrementTick+0x14c>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <xTaskIncrementTick+0x48>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	603b      	str	r3, [r7, #0]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <xTaskIncrementTick+0x46>
 8007718:	4b40      	ldr	r3, [pc, #256]	; (800781c <xTaskIncrementTick+0x14c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	4b40      	ldr	r3, [pc, #256]	; (8007820 <xTaskIncrementTick+0x150>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a3e      	ldr	r2, [pc, #248]	; (800781c <xTaskIncrementTick+0x14c>)
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	4a3e      	ldr	r2, [pc, #248]	; (8007820 <xTaskIncrementTick+0x150>)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	4b3d      	ldr	r3, [pc, #244]	; (8007824 <xTaskIncrementTick+0x154>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3301      	adds	r3, #1
 8007732:	4a3c      	ldr	r2, [pc, #240]	; (8007824 <xTaskIncrementTick+0x154>)
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	f000 fa9f 	bl	8007c78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800773a:	4b3b      	ldr	r3, [pc, #236]	; (8007828 <xTaskIncrementTick+0x158>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	429a      	cmp	r2, r3
 8007742:	d348      	bcc.n	80077d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007744:	4b35      	ldr	r3, [pc, #212]	; (800781c <xTaskIncrementTick+0x14c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774e:	4b36      	ldr	r3, [pc, #216]	; (8007828 <xTaskIncrementTick+0x158>)
 8007750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007754:	601a      	str	r2, [r3, #0]
					break;
 8007756:	e03e      	b.n	80077d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007758:	4b30      	ldr	r3, [pc, #192]	; (800781c <xTaskIncrementTick+0x14c>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	429a      	cmp	r2, r3
 800776e:	d203      	bcs.n	8007778 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007770:	4a2d      	ldr	r2, [pc, #180]	; (8007828 <xTaskIncrementTick+0x158>)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007776:	e02e      	b.n	80077d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3304      	adds	r3, #4
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe ff31 	bl	80065e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	2b00      	cmp	r3, #0
 8007788:	d004      	beq.n	8007794 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	3318      	adds	r3, #24
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe ff28 	bl	80065e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007798:	2201      	movs	r2, #1
 800779a:	409a      	lsls	r2, r3
 800779c:	4b23      	ldr	r3, [pc, #140]	; (800782c <xTaskIncrementTick+0x15c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	4a22      	ldr	r2, [pc, #136]	; (800782c <xTaskIncrementTick+0x15c>)
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077aa:	4613      	mov	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	4413      	add	r3, r2
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	4a1f      	ldr	r2, [pc, #124]	; (8007830 <xTaskIncrementTick+0x160>)
 80077b4:	441a      	add	r2, r3
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	3304      	adds	r3, #4
 80077ba:	4619      	mov	r1, r3
 80077bc:	4610      	mov	r0, r2
 80077be:	f7fe feb4 	bl	800652a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c6:	4b1b      	ldr	r3, [pc, #108]	; (8007834 <xTaskIncrementTick+0x164>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d3b9      	bcc.n	8007744 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80077d0:	2301      	movs	r3, #1
 80077d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077d4:	e7b6      	b.n	8007744 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077d6:	4b17      	ldr	r3, [pc, #92]	; (8007834 <xTaskIncrementTick+0x164>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077dc:	4914      	ldr	r1, [pc, #80]	; (8007830 <xTaskIncrementTick+0x160>)
 80077de:	4613      	mov	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	440b      	add	r3, r1
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d901      	bls.n	80077f2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80077ee:	2301      	movs	r3, #1
 80077f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80077f2:	4b11      	ldr	r3, [pc, #68]	; (8007838 <xTaskIncrementTick+0x168>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80077fa:	2301      	movs	r3, #1
 80077fc:	617b      	str	r3, [r7, #20]
 80077fe:	e004      	b.n	800780a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007800:	4b0e      	ldr	r3, [pc, #56]	; (800783c <xTaskIncrementTick+0x16c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	3301      	adds	r3, #1
 8007806:	4a0d      	ldr	r2, [pc, #52]	; (800783c <xTaskIncrementTick+0x16c>)
 8007808:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800780a:	697b      	ldr	r3, [r7, #20]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3718      	adds	r7, #24
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	20000280 	.word	0x20000280
 8007818:	2000025c 	.word	0x2000025c
 800781c:	20000210 	.word	0x20000210
 8007820:	20000214 	.word	0x20000214
 8007824:	20000270 	.word	0x20000270
 8007828:	20000278 	.word	0x20000278
 800782c:	20000260 	.word	0x20000260
 8007830:	2000015c 	.word	0x2000015c
 8007834:	20000158 	.word	0x20000158
 8007838:	2000026c 	.word	0x2000026c
 800783c:	20000268 	.word	0x20000268

08007840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007840:	b480      	push	{r7}
 8007842:	b087      	sub	sp, #28
 8007844:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007846:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <vTaskSwitchContext+0xa4>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800784e:	4b26      	ldr	r3, [pc, #152]	; (80078e8 <vTaskSwitchContext+0xa8>)
 8007850:	2201      	movs	r2, #1
 8007852:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007854:	e03f      	b.n	80078d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007856:	4b24      	ldr	r3, [pc, #144]	; (80078e8 <vTaskSwitchContext+0xa8>)
 8007858:	2200      	movs	r2, #0
 800785a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800785c:	4b23      	ldr	r3, [pc, #140]	; (80078ec <vTaskSwitchContext+0xac>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	fab3 f383 	clz	r3, r3
 8007868:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800786a:	7afb      	ldrb	r3, [r7, #11]
 800786c:	f1c3 031f 	rsb	r3, r3, #31
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	491f      	ldr	r1, [pc, #124]	; (80078f0 <vTaskSwitchContext+0xb0>)
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	440b      	add	r3, r1
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	607b      	str	r3, [r7, #4]
}
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <vTaskSwitchContext+0x5a>
 800789c:	697a      	ldr	r2, [r7, #20]
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4a12      	ldr	r2, [pc, #72]	; (80078f0 <vTaskSwitchContext+0xb0>)
 80078a8:	4413      	add	r3, r2
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	685a      	ldr	r2, [r3, #4]
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	605a      	str	r2, [r3, #4]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	3308      	adds	r3, #8
 80078be:	429a      	cmp	r2, r3
 80078c0:	d104      	bne.n	80078cc <vTaskSwitchContext+0x8c>
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	605a      	str	r2, [r3, #4]
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	4a08      	ldr	r2, [pc, #32]	; (80078f4 <vTaskSwitchContext+0xb4>)
 80078d4:	6013      	str	r3, [r2, #0]
}
 80078d6:	bf00      	nop
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000280 	.word	0x20000280
 80078e8:	2000026c 	.word	0x2000026c
 80078ec:	20000260 	.word	0x20000260
 80078f0:	2000015c 	.word	0x2000015c
 80078f4:	20000158 	.word	0x20000158

080078f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10a      	bne.n	800791e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790c:	f383 8811 	msr	BASEPRI, r3
 8007910:	f3bf 8f6f 	isb	sy
 8007914:	f3bf 8f4f 	dsb	sy
 8007918:	60fb      	str	r3, [r7, #12]
}
 800791a:	bf00      	nop
 800791c:	e7fe      	b.n	800791c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800791e:	4b07      	ldr	r3, [pc, #28]	; (800793c <vTaskPlaceOnEventList+0x44>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3318      	adds	r3, #24
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fe fe23 	bl	8006572 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800792c:	2101      	movs	r1, #1
 800792e:	6838      	ldr	r0, [r7, #0]
 8007930:	f000 fb7e 	bl	8008030 <prvAddCurrentTaskToDelayedList>
}
 8007934:	bf00      	nop
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	20000158 	.word	0x20000158

08007940 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d10a      	bne.n	800796c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	60fb      	str	r3, [r7, #12]
}
 8007968:	bf00      	nop
 800796a:	e7fe      	b.n	800796a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	3318      	adds	r3, #24
 8007970:	4618      	mov	r0, r3
 8007972:	f7fe fe37 	bl	80065e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007976:	4b1d      	ldr	r3, [pc, #116]	; (80079ec <xTaskRemoveFromEventList+0xac>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d11c      	bne.n	80079b8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	3304      	adds	r3, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f7fe fe2e 	bl	80065e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798c:	2201      	movs	r2, #1
 800798e:	409a      	lsls	r2, r3
 8007990:	4b17      	ldr	r3, [pc, #92]	; (80079f0 <xTaskRemoveFromEventList+0xb0>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4313      	orrs	r3, r2
 8007996:	4a16      	ldr	r2, [pc, #88]	; (80079f0 <xTaskRemoveFromEventList+0xb0>)
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799e:	4613      	mov	r3, r2
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4a13      	ldr	r2, [pc, #76]	; (80079f4 <xTaskRemoveFromEventList+0xb4>)
 80079a8:	441a      	add	r2, r3
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7fe fdba 	bl	800652a <vListInsertEnd>
 80079b6:	e005      	b.n	80079c4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	3318      	adds	r3, #24
 80079bc:	4619      	mov	r1, r3
 80079be:	480e      	ldr	r0, [pc, #56]	; (80079f8 <xTaskRemoveFromEventList+0xb8>)
 80079c0:	f7fe fdb3 	bl	800652a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c8:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <xTaskRemoveFromEventList+0xbc>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d905      	bls.n	80079de <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80079d2:	2301      	movs	r3, #1
 80079d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80079d6:	4b0a      	ldr	r3, [pc, #40]	; (8007a00 <xTaskRemoveFromEventList+0xc0>)
 80079d8:	2201      	movs	r2, #1
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	e001      	b.n	80079e2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80079de:	2300      	movs	r3, #0
 80079e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80079e2:	697b      	ldr	r3, [r7, #20]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	20000280 	.word	0x20000280
 80079f0:	20000260 	.word	0x20000260
 80079f4:	2000015c 	.word	0x2000015c
 80079f8:	20000218 	.word	0x20000218
 80079fc:	20000158 	.word	0x20000158
 8007a00:	2000026c 	.word	0x2000026c

08007a04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a0c:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <vTaskInternalSetTimeOutState+0x24>)
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a14:	4b05      	ldr	r3, [pc, #20]	; (8007a2c <vTaskInternalSetTimeOutState+0x28>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	605a      	str	r2, [r3, #4]
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	20000270 	.word	0x20000270
 8007a2c:	2000025c 	.word	0x2000025c

08007a30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b088      	sub	sp, #32
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	613b      	str	r3, [r7, #16]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	60fb      	str	r3, [r7, #12]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007a72:	f000 fc6f 	bl	8008354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007a76:	4b1d      	ldr	r3, [pc, #116]	; (8007aec <xTaskCheckForTimeOut+0xbc>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	69ba      	ldr	r2, [r7, #24]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a8e:	d102      	bne.n	8007a96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a90:	2300      	movs	r3, #0
 8007a92:	61fb      	str	r3, [r7, #28]
 8007a94:	e023      	b.n	8007ade <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	4b15      	ldr	r3, [pc, #84]	; (8007af0 <xTaskCheckForTimeOut+0xc0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d007      	beq.n	8007ab2 <xTaskCheckForTimeOut+0x82>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d302      	bcc.n	8007ab2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007aac:	2301      	movs	r3, #1
 8007aae:	61fb      	str	r3, [r7, #28]
 8007ab0:	e015      	b.n	8007ade <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d20b      	bcs.n	8007ad4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	1ad2      	subs	r2, r2, r3
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff ff9b 	bl	8007a04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	61fb      	str	r3, [r7, #28]
 8007ad2:	e004      	b.n	8007ade <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007ada:	2301      	movs	r3, #1
 8007adc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007ade:	f000 fc69 	bl	80083b4 <vPortExitCritical>

	return xReturn;
 8007ae2:	69fb      	ldr	r3, [r7, #28]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	2000025c 	.word	0x2000025c
 8007af0:	20000270 	.word	0x20000270

08007af4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007af8:	4b03      	ldr	r3, [pc, #12]	; (8007b08 <vTaskMissedYield+0x14>)
 8007afa:	2201      	movs	r2, #1
 8007afc:	601a      	str	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr
 8007b08:	2000026c 	.word	0x2000026c

08007b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007b14:	f000 f852 	bl	8007bbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007b18:	4b06      	ldr	r3, [pc, #24]	; (8007b34 <prvIdleTask+0x28>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d9f9      	bls.n	8007b14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <prvIdleTask+0x2c>)
 8007b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007b30:	e7f0      	b.n	8007b14 <prvIdleTask+0x8>
 8007b32:	bf00      	nop
 8007b34:	2000015c 	.word	0x2000015c
 8007b38:	e000ed04 	.word	0xe000ed04

08007b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]
 8007b46:	e00c      	b.n	8007b62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4a12      	ldr	r2, [pc, #72]	; (8007b9c <prvInitialiseTaskLists+0x60>)
 8007b54:	4413      	add	r3, r2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fe fcba 	bl	80064d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	607b      	str	r3, [r7, #4]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b06      	cmp	r3, #6
 8007b66:	d9ef      	bls.n	8007b48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007b68:	480d      	ldr	r0, [pc, #52]	; (8007ba0 <prvInitialiseTaskLists+0x64>)
 8007b6a:	f7fe fcb1 	bl	80064d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007b6e:	480d      	ldr	r0, [pc, #52]	; (8007ba4 <prvInitialiseTaskLists+0x68>)
 8007b70:	f7fe fcae 	bl	80064d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007b74:	480c      	ldr	r0, [pc, #48]	; (8007ba8 <prvInitialiseTaskLists+0x6c>)
 8007b76:	f7fe fcab 	bl	80064d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007b7a:	480c      	ldr	r0, [pc, #48]	; (8007bac <prvInitialiseTaskLists+0x70>)
 8007b7c:	f7fe fca8 	bl	80064d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b80:	480b      	ldr	r0, [pc, #44]	; (8007bb0 <prvInitialiseTaskLists+0x74>)
 8007b82:	f7fe fca5 	bl	80064d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b86:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <prvInitialiseTaskLists+0x78>)
 8007b88:	4a05      	ldr	r2, [pc, #20]	; (8007ba0 <prvInitialiseTaskLists+0x64>)
 8007b8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b8c:	4b0a      	ldr	r3, [pc, #40]	; (8007bb8 <prvInitialiseTaskLists+0x7c>)
 8007b8e:	4a05      	ldr	r2, [pc, #20]	; (8007ba4 <prvInitialiseTaskLists+0x68>)
 8007b90:	601a      	str	r2, [r3, #0]
}
 8007b92:	bf00      	nop
 8007b94:	3708      	adds	r7, #8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	2000015c 	.word	0x2000015c
 8007ba0:	200001e8 	.word	0x200001e8
 8007ba4:	200001fc 	.word	0x200001fc
 8007ba8:	20000218 	.word	0x20000218
 8007bac:	2000022c 	.word	0x2000022c
 8007bb0:	20000244 	.word	0x20000244
 8007bb4:	20000210 	.word	0x20000210
 8007bb8:	20000214 	.word	0x20000214

08007bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bc2:	e019      	b.n	8007bf8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007bc4:	f000 fbc6 	bl	8008354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bc8:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <prvCheckTasksWaitingTermination+0x50>)
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe fd05 	bl	80065e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007bda:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <prvCheckTasksWaitingTermination+0x54>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	4a0b      	ldr	r2, [pc, #44]	; (8007c10 <prvCheckTasksWaitingTermination+0x54>)
 8007be2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007be4:	4b0b      	ldr	r3, [pc, #44]	; (8007c14 <prvCheckTasksWaitingTermination+0x58>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	4a0a      	ldr	r2, [pc, #40]	; (8007c14 <prvCheckTasksWaitingTermination+0x58>)
 8007bec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007bee:	f000 fbe1 	bl	80083b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f810 	bl	8007c18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bf8:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <prvCheckTasksWaitingTermination+0x58>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e1      	bne.n	8007bc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c00:	bf00      	nop
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000022c 	.word	0x2000022c
 8007c10:	20000258 	.word	0x20000258
 8007c14:	20000240 	.word	0x20000240

08007c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d108      	bne.n	8007c3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fd7e 	bl	8008730 <vPortFree>
				vPortFree( pxTCB );
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 fd7b 	bl	8008730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007c3a:	e018      	b.n	8007c6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d103      	bne.n	8007c4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fd72 	bl	8008730 <vPortFree>
	}
 8007c4c:	e00f      	b.n	8007c6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d00a      	beq.n	8007c6e <prvDeleteTCB+0x56>
	__asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	60fb      	str	r3, [r7, #12]
}
 8007c6a:	bf00      	nop
 8007c6c:	e7fe      	b.n	8007c6c <prvDeleteTCB+0x54>
	}
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
	...

08007c78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c7e:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <prvResetNextTaskUnblockTime+0x38>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d104      	bne.n	8007c92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c88:	4b0a      	ldr	r3, [pc, #40]	; (8007cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8007c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c90:	e008      	b.n	8007ca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c92:	4b07      	ldr	r3, [pc, #28]	; (8007cb0 <prvResetNextTaskUnblockTime+0x38>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	4a04      	ldr	r2, [pc, #16]	; (8007cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8007ca2:	6013      	str	r3, [r2, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	20000210 	.word	0x20000210
 8007cb4:	20000278 	.word	0x20000278

08007cb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007cbe:	4b0b      	ldr	r3, [pc, #44]	; (8007cec <xTaskGetSchedulerState+0x34>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d102      	bne.n	8007ccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	607b      	str	r3, [r7, #4]
 8007cca:	e008      	b.n	8007cde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ccc:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <xTaskGetSchedulerState+0x38>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d102      	bne.n	8007cda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	607b      	str	r3, [r7, #4]
 8007cd8:	e001      	b.n	8007cde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007cde:	687b      	ldr	r3, [r7, #4]
	}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	20000264 	.word	0x20000264
 8007cf0:	20000280 	.word	0x20000280

08007cf4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d05e      	beq.n	8007dc8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d0e:	4b31      	ldr	r3, [pc, #196]	; (8007dd4 <xTaskPriorityInherit+0xe0>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d24e      	bcs.n	8007db6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	db06      	blt.n	8007d2e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d20:	4b2c      	ldr	r3, [pc, #176]	; (8007dd4 <xTaskPriorityInherit+0xe0>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	f1c3 0207 	rsb	r2, r3, #7
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6959      	ldr	r1, [r3, #20]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d36:	4613      	mov	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	4a26      	ldr	r2, [pc, #152]	; (8007dd8 <xTaskPriorityInherit+0xe4>)
 8007d40:	4413      	add	r3, r2
 8007d42:	4299      	cmp	r1, r3
 8007d44:	d12f      	bne.n	8007da6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fc4a 	bl	80065e4 <uxListRemove>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d10a      	bne.n	8007d6c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d60:	43da      	mvns	r2, r3
 8007d62:	4b1e      	ldr	r3, [pc, #120]	; (8007ddc <xTaskPriorityInherit+0xe8>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4013      	ands	r3, r2
 8007d68:	4a1c      	ldr	r2, [pc, #112]	; (8007ddc <xTaskPriorityInherit+0xe8>)
 8007d6a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d6c:	4b19      	ldr	r3, [pc, #100]	; (8007dd4 <xTaskPriorityInherit+0xe0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	409a      	lsls	r2, r3
 8007d7e:	4b17      	ldr	r3, [pc, #92]	; (8007ddc <xTaskPriorityInherit+0xe8>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	4a15      	ldr	r2, [pc, #84]	; (8007ddc <xTaskPriorityInherit+0xe8>)
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4a10      	ldr	r2, [pc, #64]	; (8007dd8 <xTaskPriorityInherit+0xe4>)
 8007d96:	441a      	add	r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4610      	mov	r0, r2
 8007da0:	f7fe fbc3 	bl	800652a <vListInsertEnd>
 8007da4:	e004      	b.n	8007db0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007da6:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <xTaskPriorityInherit+0xe0>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007db0:	2301      	movs	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	e008      	b.n	8007dc8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dba:	4b06      	ldr	r3, [pc, #24]	; (8007dd4 <xTaskPriorityInherit+0xe0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d201      	bcs.n	8007dc8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
	}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20000158 	.word	0x20000158
 8007dd8:	2000015c 	.word	0x2000015c
 8007ddc:	20000260 	.word	0x20000260

08007de0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d06e      	beq.n	8007ed4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007df6:	4b3a      	ldr	r3, [pc, #232]	; (8007ee0 <xTaskPriorityDisinherit+0x100>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d00a      	beq.n	8007e16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	60fb      	str	r3, [r7, #12]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10a      	bne.n	8007e34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	60bb      	str	r3, [r7, #8]
}
 8007e30:	bf00      	nop
 8007e32:	e7fe      	b.n	8007e32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e38:	1e5a      	subs	r2, r3, #1
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d044      	beq.n	8007ed4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d140      	bne.n	8007ed4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	3304      	adds	r3, #4
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fbc4 	bl	80065e4 <uxListRemove>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d115      	bne.n	8007e8e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e66:	491f      	ldr	r1, [pc, #124]	; (8007ee4 <xTaskPriorityDisinherit+0x104>)
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	440b      	add	r3, r1
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10a      	bne.n	8007e8e <xTaskPriorityDisinherit+0xae>
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e82:	43da      	mvns	r2, r3
 8007e84:	4b18      	ldr	r3, [pc, #96]	; (8007ee8 <xTaskPriorityDisinherit+0x108>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	4a17      	ldr	r2, [pc, #92]	; (8007ee8 <xTaskPriorityDisinherit+0x108>)
 8007e8c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9a:	f1c3 0207 	rsb	r2, r3, #7
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	409a      	lsls	r2, r3
 8007eaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ee8 <xTaskPriorityDisinherit+0x108>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	4a0d      	ldr	r2, [pc, #52]	; (8007ee8 <xTaskPriorityDisinherit+0x108>)
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eb8:	4613      	mov	r3, r2
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	4a08      	ldr	r2, [pc, #32]	; (8007ee4 <xTaskPriorityDisinherit+0x104>)
 8007ec2:	441a      	add	r2, r3
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f7fe fb2d 	bl	800652a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ed4:	697b      	ldr	r3, [r7, #20]
	}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20000158 	.word	0x20000158
 8007ee4:	2000015c 	.word	0x2000015c
 8007ee8:	20000260 	.word	0x20000260

08007eec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007efa:	2301      	movs	r3, #1
 8007efc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d077      	beq.n	8007ff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10a      	bne.n	8007f22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	60fb      	str	r3, [r7, #12]
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d902      	bls.n	8007f32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	61fb      	str	r3, [r7, #28]
 8007f30:	e002      	b.n	8007f38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3c:	69fa      	ldr	r2, [r7, #28]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d058      	beq.n	8007ff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d153      	bne.n	8007ff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007f4c:	4b2b      	ldr	r3, [pc, #172]	; (8007ffc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	69ba      	ldr	r2, [r7, #24]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d10a      	bne.n	8007f6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	60bb      	str	r3, [r7, #8]
}
 8007f68:	bf00      	nop
 8007f6a:	e7fe      	b.n	8007f6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	db04      	blt.n	8007f8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f1c3 0207 	rsb	r2, r3, #7
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	6959      	ldr	r1, [r3, #20]
 8007f8e:	693a      	ldr	r2, [r7, #16]
 8007f90:	4613      	mov	r3, r2
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	4413      	add	r3, r2
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	4a19      	ldr	r2, [pc, #100]	; (8008000 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007f9a:	4413      	add	r3, r2
 8007f9c:	4299      	cmp	r1, r3
 8007f9e:	d129      	bne.n	8007ff4 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fe fb1d 	bl	80065e4 <uxListRemove>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fba:	43da      	mvns	r2, r3
 8007fbc:	4b11      	ldr	r3, [pc, #68]	; (8008004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4013      	ands	r3, r2
 8007fc2:	4a10      	ldr	r2, [pc, #64]	; (8008004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007fc4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	2201      	movs	r2, #1
 8007fcc:	409a      	lsls	r2, r3
 8007fce:	4b0d      	ldr	r3, [pc, #52]	; (8008004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	4a0b      	ldr	r2, [pc, #44]	; (8008004 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fdc:	4613      	mov	r3, r2
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	4413      	add	r3, r2
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	4a06      	ldr	r2, [pc, #24]	; (8008000 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007fe6:	441a      	add	r2, r3
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4619      	mov	r1, r3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	f7fe fa9b 	bl	800652a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ff4:	bf00      	nop
 8007ff6:	3720      	adds	r7, #32
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}
 8007ffc:	20000158 	.word	0x20000158
 8008000:	2000015c 	.word	0x2000015c
 8008004:	20000260 	.word	0x20000260

08008008 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800800c:	4b07      	ldr	r3, [pc, #28]	; (800802c <pvTaskIncrementMutexHeldCount+0x24>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d004      	beq.n	800801e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <pvTaskIncrementMutexHeldCount+0x24>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800801a:	3201      	adds	r2, #1
 800801c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800801e:	4b03      	ldr	r3, [pc, #12]	; (800802c <pvTaskIncrementMutexHeldCount+0x24>)
 8008020:	681b      	ldr	r3, [r3, #0]
	}
 8008022:	4618      	mov	r0, r3
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr
 800802c:	20000158 	.word	0x20000158

08008030 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800803a:	4b29      	ldr	r3, [pc, #164]	; (80080e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008040:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3304      	adds	r3, #4
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe facc 	bl	80065e4 <uxListRemove>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10b      	bne.n	800806a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008052:	4b24      	ldr	r3, [pc, #144]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	2201      	movs	r2, #1
 800805a:	fa02 f303 	lsl.w	r3, r2, r3
 800805e:	43da      	mvns	r2, r3
 8008060:	4b21      	ldr	r3, [pc, #132]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4013      	ands	r3, r2
 8008066:	4a20      	ldr	r2, [pc, #128]	; (80080e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008068:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008070:	d10a      	bne.n	8008088 <prvAddCurrentTaskToDelayedList+0x58>
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d007      	beq.n	8008088 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008078:	4b1a      	ldr	r3, [pc, #104]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	3304      	adds	r3, #4
 800807e:	4619      	mov	r1, r3
 8008080:	481a      	ldr	r0, [pc, #104]	; (80080ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8008082:	f7fe fa52 	bl	800652a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008086:	e026      	b.n	80080d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008090:	4b14      	ldr	r3, [pc, #80]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008098:	68ba      	ldr	r2, [r7, #8]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	429a      	cmp	r2, r3
 800809e:	d209      	bcs.n	80080b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080a0:	4b13      	ldr	r3, [pc, #76]	; (80080f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	4b0f      	ldr	r3, [pc, #60]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3304      	adds	r3, #4
 80080aa:	4619      	mov	r1, r3
 80080ac:	4610      	mov	r0, r2
 80080ae:	f7fe fa60 	bl	8006572 <vListInsert>
}
 80080b2:	e010      	b.n	80080d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080b4:	4b0f      	ldr	r3, [pc, #60]	; (80080f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3304      	adds	r3, #4
 80080be:	4619      	mov	r1, r3
 80080c0:	4610      	mov	r0, r2
 80080c2:	f7fe fa56 	bl	8006572 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80080c6:	4b0c      	ldr	r3, [pc, #48]	; (80080f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d202      	bcs.n	80080d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80080d0:	4a09      	ldr	r2, [pc, #36]	; (80080f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	6013      	str	r3, [r2, #0]
}
 80080d6:	bf00      	nop
 80080d8:	3710      	adds	r7, #16
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	2000025c 	.word	0x2000025c
 80080e4:	20000158 	.word	0x20000158
 80080e8:	20000260 	.word	0x20000260
 80080ec:	20000244 	.word	0x20000244
 80080f0:	20000214 	.word	0x20000214
 80080f4:	20000210 	.word	0x20000210
 80080f8:	20000278 	.word	0x20000278

080080fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	3b04      	subs	r3, #4
 800810c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008114:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3b04      	subs	r3, #4
 800811a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	f023 0201 	bic.w	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3b04      	subs	r3, #4
 800812a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800812c:	4a0c      	ldr	r2, [pc, #48]	; (8008160 <pxPortInitialiseStack+0x64>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	3b14      	subs	r3, #20
 8008136:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3b04      	subs	r3, #4
 8008142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f06f 0202 	mvn.w	r2, #2
 800814a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3b20      	subs	r3, #32
 8008150:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008152:	68fb      	ldr	r3, [r7, #12]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	08008165 	.word	0x08008165

08008164 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800816e:	4b12      	ldr	r3, [pc, #72]	; (80081b8 <prvTaskExitError+0x54>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008176:	d00a      	beq.n	800818e <prvTaskExitError+0x2a>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	60fb      	str	r3, [r7, #12]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <prvTaskExitError+0x28>
	__asm volatile
 800818e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	60bb      	str	r3, [r7, #8]
}
 80081a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081a2:	bf00      	nop
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0fc      	beq.n	80081a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081aa:	bf00      	nop
 80081ac:	bf00      	nop
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	2000003c 	.word	0x2000003c
 80081bc:	00000000 	.word	0x00000000

080081c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <pxCurrentTCBConst2>)
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	6808      	ldr	r0, [r1, #0]
 80081c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	f380 8809 	msr	PSP, r0
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f04f 0000 	mov.w	r0, #0
 80081d6:	f380 8811 	msr	BASEPRI, r0
 80081da:	4770      	bx	lr
 80081dc:	f3af 8000 	nop.w

080081e0 <pxCurrentTCBConst2>:
 80081e0:	20000158 	.word	0x20000158
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081e8:	4808      	ldr	r0, [pc, #32]	; (800820c <prvPortStartFirstTask+0x24>)
 80081ea:	6800      	ldr	r0, [r0, #0]
 80081ec:	6800      	ldr	r0, [r0, #0]
 80081ee:	f380 8808 	msr	MSP, r0
 80081f2:	f04f 0000 	mov.w	r0, #0
 80081f6:	f380 8814 	msr	CONTROL, r0
 80081fa:	b662      	cpsie	i
 80081fc:	b661      	cpsie	f
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	df00      	svc	0
 8008208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800820a:	bf00      	nop
 800820c:	e000ed08 	.word	0xe000ed08

08008210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008216:	4b46      	ldr	r3, [pc, #280]	; (8008330 <xPortStartScheduler+0x120>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a46      	ldr	r2, [pc, #280]	; (8008334 <xPortStartScheduler+0x124>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d10a      	bne.n	8008236 <xPortStartScheduler+0x26>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	613b      	str	r3, [r7, #16]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008236:	4b3e      	ldr	r3, [pc, #248]	; (8008330 <xPortStartScheduler+0x120>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a3f      	ldr	r2, [pc, #252]	; (8008338 <xPortStartScheduler+0x128>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d10a      	bne.n	8008256 <xPortStartScheduler+0x46>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	60fb      	str	r3, [r7, #12]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008256:	4b39      	ldr	r3, [pc, #228]	; (800833c <xPortStartScheduler+0x12c>)
 8008258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	22ff      	movs	r2, #255	; 0xff
 8008266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008278:	b2da      	uxtb	r2, r3
 800827a:	4b31      	ldr	r3, [pc, #196]	; (8008340 <xPortStartScheduler+0x130>)
 800827c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800827e:	4b31      	ldr	r3, [pc, #196]	; (8008344 <xPortStartScheduler+0x134>)
 8008280:	2207      	movs	r2, #7
 8008282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008284:	e009      	b.n	800829a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008286:	4b2f      	ldr	r3, [pc, #188]	; (8008344 <xPortStartScheduler+0x134>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	3b01      	subs	r3, #1
 800828c:	4a2d      	ldr	r2, [pc, #180]	; (8008344 <xPortStartScheduler+0x134>)
 800828e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	b2db      	uxtb	r3, r3
 8008298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a2:	2b80      	cmp	r3, #128	; 0x80
 80082a4:	d0ef      	beq.n	8008286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082a6:	4b27      	ldr	r3, [pc, #156]	; (8008344 <xPortStartScheduler+0x134>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f1c3 0307 	rsb	r3, r3, #7
 80082ae:	2b04      	cmp	r3, #4
 80082b0:	d00a      	beq.n	80082c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	60bb      	str	r3, [r7, #8]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082c8:	4b1e      	ldr	r3, [pc, #120]	; (8008344 <xPortStartScheduler+0x134>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	021b      	lsls	r3, r3, #8
 80082ce:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <xPortStartScheduler+0x134>)
 80082d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082d2:	4b1c      	ldr	r3, [pc, #112]	; (8008344 <xPortStartScheduler+0x134>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082da:	4a1a      	ldr	r2, [pc, #104]	; (8008344 <xPortStartScheduler+0x134>)
 80082dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082e6:	4b18      	ldr	r3, [pc, #96]	; (8008348 <xPortStartScheduler+0x138>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a17      	ldr	r2, [pc, #92]	; (8008348 <xPortStartScheduler+0x138>)
 80082ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80082f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <xPortStartScheduler+0x138>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a14      	ldr	r2, [pc, #80]	; (8008348 <xPortStartScheduler+0x138>)
 80082f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80082fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082fe:	f000 f8dd 	bl	80084bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <xPortStartScheduler+0x13c>)
 8008304:	2200      	movs	r2, #0
 8008306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008308:	f000 f8fc 	bl	8008504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800830c:	4b10      	ldr	r3, [pc, #64]	; (8008350 <xPortStartScheduler+0x140>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a0f      	ldr	r2, [pc, #60]	; (8008350 <xPortStartScheduler+0x140>)
 8008312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008318:	f7ff ff66 	bl	80081e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800831c:	f7ff fa90 	bl	8007840 <vTaskSwitchContext>
	prvTaskExitError();
 8008320:	f7ff ff20 	bl	8008164 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3718      	adds	r7, #24
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	e000ed00 	.word	0xe000ed00
 8008334:	410fc271 	.word	0x410fc271
 8008338:	410fc270 	.word	0x410fc270
 800833c:	e000e400 	.word	0xe000e400
 8008340:	20000284 	.word	0x20000284
 8008344:	20000288 	.word	0x20000288
 8008348:	e000ed20 	.word	0xe000ed20
 800834c:	2000003c 	.word	0x2000003c
 8008350:	e000ef34 	.word	0xe000ef34

08008354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008354:	b480      	push	{r7}
 8008356:	b083      	sub	sp, #12
 8008358:	af00      	add	r7, sp, #0
	__asm volatile
 800835a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800835e:	f383 8811 	msr	BASEPRI, r3
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	607b      	str	r3, [r7, #4]
}
 800836c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <vPortEnterCritical+0x58>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	4a0d      	ldr	r2, [pc, #52]	; (80083ac <vPortEnterCritical+0x58>)
 8008376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008378:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <vPortEnterCritical+0x58>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d10f      	bne.n	80083a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008380:	4b0b      	ldr	r3, [pc, #44]	; (80083b0 <vPortEnterCritical+0x5c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00a      	beq.n	80083a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	603b      	str	r3, [r7, #0]
}
 800839c:	bf00      	nop
 800839e:	e7fe      	b.n	800839e <vPortEnterCritical+0x4a>
	}
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	2000003c 	.word	0x2000003c
 80083b0:	e000ed04 	.word	0xe000ed04

080083b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083ba:	4b12      	ldr	r3, [pc, #72]	; (8008404 <vPortExitCritical+0x50>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <vPortExitCritical+0x24>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	607b      	str	r3, [r7, #4]
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083d8:	4b0a      	ldr	r3, [pc, #40]	; (8008404 <vPortExitCritical+0x50>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3b01      	subs	r3, #1
 80083de:	4a09      	ldr	r2, [pc, #36]	; (8008404 <vPortExitCritical+0x50>)
 80083e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083e2:	4b08      	ldr	r3, [pc, #32]	; (8008404 <vPortExitCritical+0x50>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d105      	bne.n	80083f6 <vPortExitCritical+0x42>
 80083ea:	2300      	movs	r3, #0
 80083ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	f383 8811 	msr	BASEPRI, r3
}
 80083f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083f6:	bf00      	nop
 80083f8:	370c      	adds	r7, #12
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	2000003c 	.word	0x2000003c
	...

08008410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008410:	f3ef 8009 	mrs	r0, PSP
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4b15      	ldr	r3, [pc, #84]	; (8008470 <pxCurrentTCBConst>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	f01e 0f10 	tst.w	lr, #16
 8008420:	bf08      	it	eq
 8008422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	6010      	str	r0, [r2, #0]
 800842c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008434:	f380 8811 	msr	BASEPRI, r0
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f7ff f9fe 	bl	8007840 <vTaskSwitchContext>
 8008444:	f04f 0000 	mov.w	r0, #0
 8008448:	f380 8811 	msr	BASEPRI, r0
 800844c:	bc09      	pop	{r0, r3}
 800844e:	6819      	ldr	r1, [r3, #0]
 8008450:	6808      	ldr	r0, [r1, #0]
 8008452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008456:	f01e 0f10 	tst.w	lr, #16
 800845a:	bf08      	it	eq
 800845c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008460:	f380 8809 	msr	PSP, r0
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst>:
 8008470:	20000158 	.word	0x20000158
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	607b      	str	r3, [r7, #4]
}
 8008490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008492:	f7ff f91d 	bl	80076d0 <xTaskIncrementTick>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800849c:	4b06      	ldr	r3, [pc, #24]	; (80084b8 <SysTick_Handler+0x40>)
 800849e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	2300      	movs	r3, #0
 80084a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f383 8811 	msr	BASEPRI, r3
}
 80084ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084c0:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <vPortSetupTimerInterrupt+0x34>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084c6:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <vPortSetupTimerInterrupt+0x38>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084cc:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <vPortSetupTimerInterrupt+0x3c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <vPortSetupTimerInterrupt+0x40>)
 80084d2:	fba2 2303 	umull	r2, r3, r2, r3
 80084d6:	099b      	lsrs	r3, r3, #6
 80084d8:	4a09      	ldr	r2, [pc, #36]	; (8008500 <vPortSetupTimerInterrupt+0x44>)
 80084da:	3b01      	subs	r3, #1
 80084dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084de:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <vPortSetupTimerInterrupt+0x34>)
 80084e0:	2207      	movs	r2, #7
 80084e2:	601a      	str	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	e000e010 	.word	0xe000e010
 80084f4:	e000e018 	.word	0xe000e018
 80084f8:	200000d0 	.word	0x200000d0
 80084fc:	10624dd3 	.word	0x10624dd3
 8008500:	e000e014 	.word	0xe000e014

08008504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008514 <vPortEnableVFP+0x10>
 8008508:	6801      	ldr	r1, [r0, #0]
 800850a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800850e:	6001      	str	r1, [r0, #0]
 8008510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008512:	bf00      	nop
 8008514:	e000ed88 	.word	0xe000ed88

08008518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800851e:	f3ef 8305 	mrs	r3, IPSR
 8008522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d914      	bls.n	8008554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800852a:	4a17      	ldr	r2, [pc, #92]	; (8008588 <vPortValidateInterruptPriority+0x70>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008534:	4b15      	ldr	r3, [pc, #84]	; (800858c <vPortValidateInterruptPriority+0x74>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	7afa      	ldrb	r2, [r7, #11]
 800853a:	429a      	cmp	r2, r3
 800853c:	d20a      	bcs.n	8008554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	607b      	str	r3, [r7, #4]
}
 8008550:	bf00      	nop
 8008552:	e7fe      	b.n	8008552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008554:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <vPortValidateInterruptPriority+0x78>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800855c:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <vPortValidateInterruptPriority+0x7c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	429a      	cmp	r2, r3
 8008562:	d90a      	bls.n	800857a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	603b      	str	r3, [r7, #0]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <vPortValidateInterruptPriority+0x60>
	}
 800857a:	bf00      	nop
 800857c:	3714      	adds	r7, #20
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop
 8008588:	e000e3f0 	.word	0xe000e3f0
 800858c:	20000284 	.word	0x20000284
 8008590:	e000ed0c 	.word	0xe000ed0c
 8008594:	20000288 	.word	0x20000288

08008598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08a      	sub	sp, #40	; 0x28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085a0:	2300      	movs	r3, #0
 80085a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085a4:	f7fe ffea 	bl	800757c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085a8:	4b5b      	ldr	r3, [pc, #364]	; (8008718 <pvPortMalloc+0x180>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085b0:	f000 f920 	bl	80087f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085b4:	4b59      	ldr	r3, [pc, #356]	; (800871c <pvPortMalloc+0x184>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f040 8093 	bne.w	80086e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d01d      	beq.n	8008604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80085c8:	2208      	movs	r2, #8
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4413      	add	r3, r2
 80085ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d014      	beq.n	8008604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f023 0307 	bic.w	r3, r3, #7
 80085e0:	3308      	adds	r3, #8
 80085e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <pvPortMalloc+0x6c>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	617b      	str	r3, [r7, #20]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d06e      	beq.n	80086e8 <pvPortMalloc+0x150>
 800860a:	4b45      	ldr	r3, [pc, #276]	; (8008720 <pvPortMalloc+0x188>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	429a      	cmp	r2, r3
 8008612:	d869      	bhi.n	80086e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008614:	4b43      	ldr	r3, [pc, #268]	; (8008724 <pvPortMalloc+0x18c>)
 8008616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008618:	4b42      	ldr	r3, [pc, #264]	; (8008724 <pvPortMalloc+0x18c>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800861e:	e004      	b.n	800862a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	429a      	cmp	r2, r3
 8008632:	d903      	bls.n	800863c <pvPortMalloc+0xa4>
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d1f1      	bne.n	8008620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800863c:	4b36      	ldr	r3, [pc, #216]	; (8008718 <pvPortMalloc+0x180>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008642:	429a      	cmp	r2, r3
 8008644:	d050      	beq.n	80086e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2208      	movs	r2, #8
 800864c:	4413      	add	r3, r2
 800864e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	1ad2      	subs	r2, r2, r3
 8008660:	2308      	movs	r3, #8
 8008662:	005b      	lsls	r3, r3, #1
 8008664:	429a      	cmp	r2, r3
 8008666:	d91f      	bls.n	80086a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4413      	add	r3, r2
 800866e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <pvPortMalloc+0xf8>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	613b      	str	r3, [r7, #16]
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	1ad2      	subs	r2, r2, r3
 8008698:	69bb      	ldr	r3, [r7, #24]
 800869a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086a2:	69b8      	ldr	r0, [r7, #24]
 80086a4:	f000 f908 	bl	80088b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086a8:	4b1d      	ldr	r3, [pc, #116]	; (8008720 <pvPortMalloc+0x188>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	4a1b      	ldr	r2, [pc, #108]	; (8008720 <pvPortMalloc+0x188>)
 80086b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086b6:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <pvPortMalloc+0x188>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <pvPortMalloc+0x190>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d203      	bcs.n	80086ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086c2:	4b17      	ldr	r3, [pc, #92]	; (8008720 <pvPortMalloc+0x188>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a18      	ldr	r2, [pc, #96]	; (8008728 <pvPortMalloc+0x190>)
 80086c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	4b13      	ldr	r3, [pc, #76]	; (800871c <pvPortMalloc+0x184>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	431a      	orrs	r2, r3
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086de:	4b13      	ldr	r3, [pc, #76]	; (800872c <pvPortMalloc+0x194>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3301      	adds	r3, #1
 80086e4:	4a11      	ldr	r2, [pc, #68]	; (800872c <pvPortMalloc+0x194>)
 80086e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086e8:	f7fe ff56 	bl	8007598 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	f003 0307 	and.w	r3, r3, #7
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <pvPortMalloc+0x174>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	60fb      	str	r3, [r7, #12]
}
 8008708:	bf00      	nop
 800870a:	e7fe      	b.n	800870a <pvPortMalloc+0x172>
	return pvReturn;
 800870c:	69fb      	ldr	r3, [r7, #28]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3728      	adds	r7, #40	; 0x28
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000e4c 	.word	0x20000e4c
 800871c:	20000e60 	.word	0x20000e60
 8008720:	20000e50 	.word	0x20000e50
 8008724:	20000e44 	.word	0x20000e44
 8008728:	20000e54 	.word	0x20000e54
 800872c:	20000e58 	.word	0x20000e58

08008730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b086      	sub	sp, #24
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d04d      	beq.n	80087de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008742:	2308      	movs	r3, #8
 8008744:	425b      	negs	r3, r3
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	4413      	add	r3, r2
 800874a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008750:	693b      	ldr	r3, [r7, #16]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	4b24      	ldr	r3, [pc, #144]	; (80087e8 <vPortFree+0xb8>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4013      	ands	r3, r2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10a      	bne.n	8008774 <vPortFree+0x44>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	60fb      	str	r3, [r7, #12]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00a      	beq.n	8008792 <vPortFree+0x62>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60bb      	str	r3, [r7, #8]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	685a      	ldr	r2, [r3, #4]
 8008796:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <vPortFree+0xb8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4013      	ands	r3, r2
 800879c:	2b00      	cmp	r3, #0
 800879e:	d01e      	beq.n	80087de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d11a      	bne.n	80087de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	4b0e      	ldr	r3, [pc, #56]	; (80087e8 <vPortFree+0xb8>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	43db      	mvns	r3, r3
 80087b2:	401a      	ands	r2, r3
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087b8:	f7fe fee0 	bl	800757c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <vPortFree+0xbc>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4413      	add	r3, r2
 80087c6:	4a09      	ldr	r2, [pc, #36]	; (80087ec <vPortFree+0xbc>)
 80087c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087ca:	6938      	ldr	r0, [r7, #16]
 80087cc:	f000 f874 	bl	80088b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <vPortFree+0xc0>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <vPortFree+0xc0>)
 80087d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087da:	f7fe fedd 	bl	8007598 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087de:	bf00      	nop
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	20000e60 	.word	0x20000e60
 80087ec:	20000e50 	.word	0x20000e50
 80087f0:	20000e5c 	.word	0x20000e5c

080087f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80087fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008800:	4b27      	ldr	r3, [pc, #156]	; (80088a0 <prvHeapInit+0xac>)
 8008802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00c      	beq.n	8008828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3307      	adds	r3, #7
 8008812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0307 	bic.w	r3, r3, #7
 800881a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	4a1f      	ldr	r2, [pc, #124]	; (80088a0 <prvHeapInit+0xac>)
 8008824:	4413      	add	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800882c:	4a1d      	ldr	r2, [pc, #116]	; (80088a4 <prvHeapInit+0xb0>)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008832:	4b1c      	ldr	r3, [pc, #112]	; (80088a4 <prvHeapInit+0xb0>)
 8008834:	2200      	movs	r2, #0
 8008836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008840:	2208      	movs	r2, #8
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0307 	bic.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a15      	ldr	r2, [pc, #84]	; (80088a8 <prvHeapInit+0xb4>)
 8008854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008856:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <prvHeapInit+0xb4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2200      	movs	r2, #0
 800885c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <prvHeapInit+0xb4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008874:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <prvHeapInit+0xb4>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <prvHeapInit+0xb8>)
 8008882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <prvHeapInit+0xbc>)
 800888a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800888c:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <prvHeapInit+0xc0>)
 800888e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008892:	601a      	str	r2, [r3, #0]
}
 8008894:	bf00      	nop
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	2000028c 	.word	0x2000028c
 80088a4:	20000e44 	.word	0x20000e44
 80088a8:	20000e4c 	.word	0x20000e4c
 80088ac:	20000e54 	.word	0x20000e54
 80088b0:	20000e50 	.word	0x20000e50
 80088b4:	20000e60 	.word	0x20000e60

080088b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088c0:	4b28      	ldr	r3, [pc, #160]	; (8008964 <prvInsertBlockIntoFreeList+0xac>)
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	e002      	b.n	80088cc <prvInsertBlockIntoFreeList+0x14>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d8f7      	bhi.n	80088c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	4413      	add	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d108      	bne.n	80088fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	441a      	add	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d118      	bne.n	8008940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	4b15      	ldr	r3, [pc, #84]	; (8008968 <prvInsertBlockIntoFreeList+0xb0>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d00d      	beq.n	8008936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	441a      	add	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e008      	b.n	8008948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008936:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <prvInsertBlockIntoFreeList+0xb0>)
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	e003      	b.n	8008948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	d002      	beq.n	8008956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008956:	bf00      	nop
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20000e44 	.word	0x20000e44
 8008968:	20000e4c 	.word	0x20000e4c

0800896c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	4a07      	ldr	r2, [pc, #28]	; (8008998 <vApplicationGetIdleTaskMemory+0x2c>)
 800897c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	4a06      	ldr	r2, [pc, #24]	; (800899c <vApplicationGetIdleTaskMemory+0x30>)
 8008982:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2280      	movs	r2, #128	; 0x80
 8008988:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800898a:	bf00      	nop
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
 8008996:	bf00      	nop
 8008998:	20000e64 	.word	0x20000e64
 800899c:	20000eb8 	.word	0x20000eb8

080089a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80089a0:	b5b0      	push	{r4, r5, r7, lr}
 80089a2:	b090      	sub	sp, #64	; 0x40
 80089a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80089a6:	f7f8 fb33 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80089aa:	f000 f865 	bl	8008a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80089ae:	f000 f9fb 	bl	8008da8 <MX_GPIO_Init>
  MX_I2C2_Init();
 80089b2:	f000 f8e7 	bl	8008b84 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80089b6:	f000 f9ab 	bl	8008d10 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 80089ba:	f000 f8af 	bl	8008b1c <MX_DAC1_Init>
  MX_TIM2_Init();
 80089be:	f000 f959 	bl	8008c74 <MX_TIM2_Init>
  MX_OCTOSPI1_Init();
 80089c2:	f000 f91f 	bl	8008c04 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 80089c6:	f000 fd91 	bl	80094ec <BSP_ACCELERO_Init>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80089ca:	2100      	movs	r1, #0
 80089cc:	4823      	ldr	r0, [pc, #140]	; (8008a5c <main+0xbc>)
 80089ce:	f7f8 fc7f 	bl	80012d0 <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000);
 80089d2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80089d6:	2200      	movs	r2, #0
 80089d8:	2100      	movs	r1, #0
 80089da:	4820      	ldr	r0, [pc, #128]	; (8008a5c <main+0xbc>)
 80089dc:	f7f8 fd24 	bl	8001428 <HAL_DAC_SetValue>
  HAL_TIM_Base_Start_IT(&htim2);
 80089e0:	481f      	ldr	r0, [pc, #124]	; (8008a60 <main+0xc0>)
 80089e2:	f7fc f937 	bl	8004c54 <HAL_TIM_Base_Start_IT>
  BSP_QSPI_Init();
 80089e6:	f000 fdd7 	bl	8009598 <BSP_QSPI_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of BinSem */
  osSemaphoreDef(BinSem);
 80089ea:	2300      	movs	r3, #0
 80089ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80089ee:	2300      	movs	r3, #0
 80089f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  BinSemHandle = osSemaphoreCreate(osSemaphore(BinSem), 1);
 80089f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089f6:	2101      	movs	r1, #1
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fd fcb2 	bl	8006362 <osSemaphoreCreate>
 80089fe:	4603      	mov	r3, r0
 8008a00:	4a18      	ldr	r2, [pc, #96]	; (8008a64 <main+0xc4>)
 8008a02:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008a04:	4b18      	ldr	r3, [pc, #96]	; (8008a68 <main+0xc8>)
 8008a06:	f107 041c 	add.w	r4, r7, #28
 8008a0a:	461d      	mov	r5, r3
 8008a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008a18:	f107 031c 	add.w	r3, r7, #28
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fd fc3f 	bl	80062a2 <osThreadCreate>
 8008a24:	4603      	mov	r3, r0
 8008a26:	4a11      	ldr	r2, [pc, #68]	; (8008a6c <main+0xcc>)
 8008a28:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8008a2a:	4b11      	ldr	r3, [pc, #68]	; (8008a70 <main+0xd0>)
 8008a2c:	463c      	mov	r4, r7
 8008a2e:	461d      	mov	r5, r3
 8008a30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008a34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8008a3c:	463b      	mov	r3, r7
 8008a3e:	2100      	movs	r1, #0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fd fc2e 	bl	80062a2 <osThreadCreate>
 8008a46:	4603      	mov	r3, r0
 8008a48:	4a0a      	ldr	r2, [pc, #40]	; (8008a74 <main+0xd4>)
 8008a4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008a4c:	f7fd fc22 	bl	8006294 <osKernelStart>
//	  	  	HAL_Delay(delay);
//	  	  	  }
//
//	  memset(str_tmp,0,sizeof(str_tmp));
//
	  HAL_Delay(10000);
 8008a50:	f242 7010 	movw	r0, #10000	; 0x2710
 8008a54:	f7f8 fb14 	bl	8001080 <HAL_Delay>
 8008a58:	e7fa      	b.n	8008a50 <main+0xb0>
 8008a5a:	bf00      	nop
 8008a5c:	200010b8 	.word	0x200010b8
 8008a60:	20001170 	.word	0x20001170
 8008a64:	20001254 	.word	0x20001254
 8008a68:	0800ad84 	.word	0x0800ad84
 8008a6c:	2000124c 	.word	0x2000124c
 8008a70:	0800ada0 	.word	0x0800ada0
 8008a74:	20001250 	.word	0x20001250

08008a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b096      	sub	sp, #88	; 0x58
 8008a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008a7e:	f107 0314 	add.w	r3, r7, #20
 8008a82:	2244      	movs	r2, #68	; 0x44
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f001 fcf8 	bl	800a47c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a8c:	463b      	mov	r3, r7
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
 8008a92:	605a      	str	r2, [r3, #4]
 8008a94:	609a      	str	r2, [r3, #8]
 8008a96:	60da      	str	r2, [r3, #12]
 8008a98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f7fa fbbc 	bl	8003218 <HAL_PWREx_ControlVoltageScaling>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <SystemClock_Config+0x32>
  {
    Error_Handler();
 8008aa6:	f000 fbcb 	bl	8009240 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008aaa:	2310      	movs	r3, #16
 8008aac:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008ab6:	2360      	movs	r3, #96	; 0x60
 8008ab8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008aba:	2302      	movs	r3, #2
 8008abc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8008ac6:	233c      	movs	r3, #60	; 0x3c
 8008ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008aca:	2302      	movs	r3, #2
 8008acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008ace:	2302      	movs	r3, #2
 8008ad0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008ad6:	f107 0314 	add.w	r3, r7, #20
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fa fc40 	bl	8003360 <HAL_RCC_OscConfig>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <SystemClock_Config+0x72>
  {
    Error_Handler();
 8008ae6:	f000 fbab 	bl	8009240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008aea:	230f      	movs	r3, #15
 8008aec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008aee:	2303      	movs	r3, #3
 8008af0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008af2:	2300      	movs	r3, #0
 8008af4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008afa:	2300      	movs	r3, #0
 8008afc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008afe:	463b      	mov	r3, r7
 8008b00:	2105      	movs	r1, #5
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fb f846 	bl	8003b94 <HAL_RCC_ClockConfig>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d001      	beq.n	8008b12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008b0e:	f000 fb97 	bl	8009240 <Error_Handler>
  }
}
 8008b12:	bf00      	nop
 8008b14:	3758      	adds	r7, #88	; 0x58
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
	...

08008b1c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08a      	sub	sp, #40	; 0x28
 8008b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8008b22:	463b      	mov	r3, r7
 8008b24:	2228      	movs	r2, #40	; 0x28
 8008b26:	2100      	movs	r1, #0
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f001 fca7 	bl	800a47c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8008b2e:	4b13      	ldr	r3, [pc, #76]	; (8008b7c <MX_DAC1_Init+0x60>)
 8008b30:	4a13      	ldr	r2, [pc, #76]	; (8008b80 <MX_DAC1_Init+0x64>)
 8008b32:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8008b34:	4811      	ldr	r0, [pc, #68]	; (8008b7c <MX_DAC1_Init+0x60>)
 8008b36:	f7f8 fba9 	bl	800128c <HAL_DAC_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8008b40:	f000 fb7e 	bl	8009240 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8008b44:	2300      	movs	r3, #0
 8008b46:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008b4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b50:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8008b56:	2300      	movs	r3, #0
 8008b58:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008b5e:	463b      	mov	r3, r7
 8008b60:	2200      	movs	r2, #0
 8008b62:	4619      	mov	r1, r3
 8008b64:	4805      	ldr	r0, [pc, #20]	; (8008b7c <MX_DAC1_Init+0x60>)
 8008b66:	f7f8 fc8f 	bl	8001488 <HAL_DAC_ConfigChannel>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d001      	beq.n	8008b74 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8008b70:	f000 fb66 	bl	8009240 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8008b74:	bf00      	nop
 8008b76:	3728      	adds	r7, #40	; 0x28
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	200010b8 	.word	0x200010b8
 8008b80:	40007400 	.word	0x40007400

08008b84 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008b88:	4b1b      	ldr	r3, [pc, #108]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008b8a:	4a1c      	ldr	r2, [pc, #112]	; (8008bfc <MX_I2C2_Init+0x78>)
 8008b8c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8008b8e:	4b1a      	ldr	r3, [pc, #104]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008b90:	4a1b      	ldr	r2, [pc, #108]	; (8008c00 <MX_I2C2_Init+0x7c>)
 8008b92:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008b94:	4b18      	ldr	r3, [pc, #96]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b9a:	4b17      	ldr	r3, [pc, #92]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008ba0:	4b15      	ldr	r3, [pc, #84]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008ba6:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008bac:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008bb2:	4b11      	ldr	r3, [pc, #68]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008bb8:	4b0f      	ldr	r3, [pc, #60]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008bbe:	480e      	ldr	r0, [pc, #56]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008bc0:	f7f9 f848 	bl	8001c54 <HAL_I2C_Init>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8008bca:	f000 fb39 	bl	8009240 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008bce:	2100      	movs	r1, #0
 8008bd0:	4809      	ldr	r0, [pc, #36]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008bd2:	f7f9 fdd1 	bl	8002778 <HAL_I2CEx_ConfigAnalogFilter>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d001      	beq.n	8008be0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8008bdc:	f000 fb30 	bl	8009240 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008be0:	2100      	movs	r1, #0
 8008be2:	4805      	ldr	r0, [pc, #20]	; (8008bf8 <MX_I2C2_Init+0x74>)
 8008be4:	f7f9 fe13 	bl	800280e <HAL_I2CEx_ConfigDigitalFilter>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8008bee:	f000 fb27 	bl	8009240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008bf2:	bf00      	nop
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	200010cc 	.word	0x200010cc
 8008bfc:	40005800 	.word	0x40005800
 8008c00:	307075b1 	.word	0x307075b1

08008c04 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8008c08:	4b18      	ldr	r3, [pc, #96]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c0a:	4a19      	ldr	r2, [pc, #100]	; (8008c70 <MX_OCTOSPI1_Init+0x6c>)
 8008c0c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8008c0e:	4b17      	ldr	r3, [pc, #92]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c10:	2201      	movs	r2, #1
 8008c12:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8008c14:	4b15      	ldr	r3, [pc, #84]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8008c1a:	4b14      	ldr	r3, [pc, #80]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8008c20:	4b12      	ldr	r3, [pc, #72]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c22:	2220      	movs	r2, #32
 8008c24:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8008c26:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c28:	2201      	movs	r2, #1
 8008c2a:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8008c2c:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8008c32:	4b0e      	ldr	r3, [pc, #56]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8008c38:	4b0c      	ldr	r3, [pc, #48]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8008c3e:	4b0b      	ldr	r3, [pc, #44]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8008c44:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8008c4a:	4b08      	ldr	r3, [pc, #32]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8008c50:	4b06      	ldr	r3, [pc, #24]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c52:	2208      	movs	r2, #8
 8008c54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8008c56:	4805      	ldr	r0, [pc, #20]	; (8008c6c <MX_OCTOSPI1_Init+0x68>)
 8008c58:	f7f9 fe26 	bl	80028a8 <HAL_OSPI_Init>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <MX_OCTOSPI1_Init+0x62>
  {
    Error_Handler();
 8008c62:	f000 faed 	bl	8009240 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8008c66:	bf00      	nop
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20001120 	.word	0x20001120
 8008c70:	a0001000 	.word	0xa0001000

08008c74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c7a:	f107 0310 	add.w	r3, r7, #16
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	605a      	str	r2, [r3, #4]
 8008c84:	609a      	str	r2, [r3, #8]
 8008c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c88:	1d3b      	adds	r3, r7, #4
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]
 8008c8e:	605a      	str	r2, [r3, #4]
 8008c90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008c92:	4b1e      	ldr	r3, [pc, #120]	; (8008d0c <MX_TIM2_Init+0x98>)
 8008c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008c98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008c9a:	4b1c      	ldr	r3, [pc, #112]	; (8008d0c <MX_TIM2_Init+0x98>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ca0:	4b1a      	ldr	r3, [pc, #104]	; (8008d0c <MX_TIM2_Init+0x98>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3000;
 8008ca6:	4b19      	ldr	r3, [pc, #100]	; (8008d0c <MX_TIM2_Init+0x98>)
 8008ca8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008cac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cae:	4b17      	ldr	r3, [pc, #92]	; (8008d0c <MX_TIM2_Init+0x98>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cb4:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <MX_TIM2_Init+0x98>)
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008cba:	4814      	ldr	r0, [pc, #80]	; (8008d0c <MX_TIM2_Init+0x98>)
 8008cbc:	f7fb ff72 	bl	8004ba4 <HAL_TIM_Base_Init>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d001      	beq.n	8008cca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008cc6:	f000 fabb 	bl	8009240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008cd0:	f107 0310 	add.w	r3, r7, #16
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	480d      	ldr	r0, [pc, #52]	; (8008d0c <MX_TIM2_Init+0x98>)
 8008cd8:	f7fc f94b 	bl	8004f72 <HAL_TIM_ConfigClockSource>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008ce2:	f000 faad 	bl	8009240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cea:	2300      	movs	r3, #0
 8008cec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008cee:	1d3b      	adds	r3, r7, #4
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	4806      	ldr	r0, [pc, #24]	; (8008d0c <MX_TIM2_Init+0x98>)
 8008cf4:	f7fc fb62 	bl	80053bc <HAL_TIMEx_MasterConfigSynchronization>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8008cfe:	f000 fa9f 	bl	8009240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008d02:	bf00      	nop
 8008d04:	3720      	adds	r7, #32
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	20001170 	.word	0x20001170

08008d10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008d14:	4b22      	ldr	r3, [pc, #136]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d16:	4a23      	ldr	r2, [pc, #140]	; (8008da4 <MX_USART1_UART_Init+0x94>)
 8008d18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008d1a:	4b21      	ldr	r3, [pc, #132]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008d20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d22:	4b1f      	ldr	r3, [pc, #124]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d24:	2200      	movs	r2, #0
 8008d26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008d28:	4b1d      	ldr	r3, [pc, #116]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008d2e:	4b1c      	ldr	r3, [pc, #112]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d30:	2200      	movs	r2, #0
 8008d32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d34:	4b1a      	ldr	r3, [pc, #104]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d36:	220c      	movs	r2, #12
 8008d38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d3a:	4b19      	ldr	r3, [pc, #100]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d40:	4b17      	ldr	r3, [pc, #92]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008d46:	4b16      	ldr	r3, [pc, #88]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008d4c:	4b14      	ldr	r3, [pc, #80]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008d52:	4b13      	ldr	r3, [pc, #76]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d58:	4811      	ldr	r0, [pc, #68]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d5a:	f7fc fbd5 	bl	8005508 <HAL_UART_Init>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8008d64:	f000 fa6c 	bl	8009240 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008d68:	2100      	movs	r1, #0
 8008d6a:	480d      	ldr	r0, [pc, #52]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d6c:	f7fd f99e 	bl	80060ac <HAL_UARTEx_SetTxFifoThreshold>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8008d76:	f000 fa63 	bl	8009240 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	4808      	ldr	r0, [pc, #32]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d7e:	f7fd f9d3 	bl	8006128 <HAL_UARTEx_SetRxFifoThreshold>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8008d88:	f000 fa5a 	bl	8009240 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008d8c:	4804      	ldr	r0, [pc, #16]	; (8008da0 <MX_USART1_UART_Init+0x90>)
 8008d8e:	f7fd f954 	bl	800603a <HAL_UARTEx_DisableFifoMode>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8008d98:	f000 fa52 	bl	8009240 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008d9c:	bf00      	nop
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	200011bc 	.word	0x200011bc
 8008da4:	40013800 	.word	0x40013800

08008da8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dae:	f107 030c 	add.w	r3, r7, #12
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
 8008db6:	605a      	str	r2, [r3, #4]
 8008db8:	609a      	str	r2, [r3, #8]
 8008dba:	60da      	str	r2, [r3, #12]
 8008dbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008dbe:	4b1f      	ldr	r3, [pc, #124]	; (8008e3c <MX_GPIO_Init+0x94>)
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc2:	4a1e      	ldr	r2, [pc, #120]	; (8008e3c <MX_GPIO_Init+0x94>)
 8008dc4:	f043 0304 	orr.w	r3, r3, #4
 8008dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dca:	4b1c      	ldr	r3, [pc, #112]	; (8008e3c <MX_GPIO_Init+0x94>)
 8008dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dce:	f003 0304 	and.w	r3, r3, #4
 8008dd2:	60bb      	str	r3, [r7, #8]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dd6:	4b19      	ldr	r3, [pc, #100]	; (8008e3c <MX_GPIO_Init+0x94>)
 8008dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dda:	4a18      	ldr	r2, [pc, #96]	; (8008e3c <MX_GPIO_Init+0x94>)
 8008ddc:	f043 0301 	orr.w	r3, r3, #1
 8008de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008de2:	4b16      	ldr	r3, [pc, #88]	; (8008e3c <MX_GPIO_Init+0x94>)
 8008de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de6:	f003 0301 	and.w	r3, r3, #1
 8008dea:	607b      	str	r3, [r7, #4]
 8008dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dee:	4b13      	ldr	r3, [pc, #76]	; (8008e3c <MX_GPIO_Init+0x94>)
 8008df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df2:	4a12      	ldr	r2, [pc, #72]	; (8008e3c <MX_GPIO_Init+0x94>)
 8008df4:	f043 0302 	orr.w	r3, r3, #2
 8008df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dfa:	4b10      	ldr	r3, [pc, #64]	; (8008e3c <MX_GPIO_Init+0x94>)
 8008dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	603b      	str	r3, [r7, #0]
 8008e04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8008e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008e0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8008e10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e16:	f107 030c 	add.w	r3, r7, #12
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4808      	ldr	r0, [pc, #32]	; (8008e40 <MX_GPIO_Init+0x98>)
 8008e1e:	f7f8 fc7d 	bl	800171c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8008e22:	2200      	movs	r2, #0
 8008e24:	2105      	movs	r1, #5
 8008e26:	2028      	movs	r0, #40	; 0x28
 8008e28:	f7f8 fa06 	bl	8001238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008e2c:	2028      	movs	r0, #40	; 0x28
 8008e2e:	f7f8 fa1f 	bl	8001270 <HAL_NVIC_EnableIRQ>

}
 8008e32:	bf00      	nop
 8008e34:	3720      	adds	r7, #32
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	40021000 	.word	0x40021000
 8008e40:	48000800 	.word	0x48000800

08008e44 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b09e      	sub	sp, #120	; 0x78
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	80fb      	strh	r3, [r7, #6]
//	if (BSP_QSPI_Read((uint8_t *) tone, toneAddr, toneSamples) != QSPI_OK) {
//		Error_Handler();
//	}
	sprintf(str_tmp, "button\r\n");
 8008e4e:	4919      	ldr	r1, [pc, #100]	; (8008eb4 <HAL_GPIO_EXTI_Callback+0x70>)
 8008e50:	4819      	ldr	r0, [pc, #100]	; (8008eb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8008e52:	f001 fb1b 	bl	800a48c <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, sizeof(str_tmp),10000);
 8008e56:	f242 7310 	movw	r3, #10000	; 0x2710
 8008e5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008e5e:	4916      	ldr	r1, [pc, #88]	; (8008eb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8008e60:	4816      	ldr	r0, [pc, #88]	; (8008ebc <HAL_GPIO_EXTI_Callback+0x78>)
 8008e62:	f7fc fba1 	bl	80055a8 <HAL_UART_Transmit>
	memset(str_tmp,0,sizeof(str_tmp));
 8008e66:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	4812      	ldr	r0, [pc, #72]	; (8008eb8 <HAL_GPIO_EXTI_Callback+0x74>)
 8008e6e:	f001 fb05 	bl	800a47c <memset>
	uint8_t pData[100];
	pData[0] = 6;
 8008e72:	2306      	movs	r3, #6
 8008e74:	723b      	strb	r3, [r7, #8]
	uint32_t WriteAddr;
	uint32_t Size = 100;
 8008e76:	2364      	movs	r3, #100	; 0x64
 8008e78:	677b      	str	r3, [r7, #116]	; 0x74
//	int result = BSP_QSPI_Write(pData, 0, Size);
	if (BSP_QSPI_Write(pData, 0, Size) != QSPI_OK) {
 8008e7a:	f107 0308 	add.w	r3, r7, #8
 8008e7e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fc58 	bl	8009738 <BSP_QSPI_Write>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <HAL_GPIO_EXTI_Callback+0x4e>
			Error_Handler();
 8008e8e:	f000 f9d7 	bl	8009240 <Error_Handler>
		}
	pData[0] = 0;
 8008e92:	2300      	movs	r3, #0
 8008e94:	723b      	strb	r3, [r7, #8]
	int stat = BSP_QSPI_Read(pData, 0, Size);
 8008e96:	f107 0308 	add.w	r3, r7, #8
 8008e9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008e9c:	2100      	movs	r1, #0
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 fbf8 	bl	8009694 <BSP_QSPI_Read>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	673b      	str	r3, [r7, #112]	; 0x70

	int i = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	66fb      	str	r3, [r7, #108]	; 0x6c

}
 8008eac:	bf00      	nop
 8008eae:	3778      	adds	r7, #120	; 0x78
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	0800adbc 	.word	0x0800adbc
 8008eb8:	20001258 	.word	0x20001258
 8008ebc:	200011bc 	.word	0x200011bc

08008ec0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008ec8:	2001      	movs	r0, #1
 8008eca:	f7fd fa36 	bl	800633a <osDelay>
    osSemaphoreWait(BinSemHandle, osWaitForever);
 8008ece:	4b08      	ldr	r3, [pc, #32]	; (8008ef0 <StartDefaultTask+0x30>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fd fa76 	bl	80063c8 <osSemaphoreWait>
	BSP_ACCELERO_AccGetXYZ(accel);
 8008edc:	4805      	ldr	r0, [pc, #20]	; (8008ef4 <StartDefaultTask+0x34>)
 8008ede:	f000 fb43 	bl	8009568 <BSP_ACCELERO_AccGetXYZ>
	osSemaphoreRelease(BinSemHandle);
 8008ee2:	4b03      	ldr	r3, [pc, #12]	; (8008ef0 <StartDefaultTask+0x30>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fd fabc 	bl	8006464 <osSemaphoreRelease>
    osDelay(1);
 8008eec:	e7ec      	b.n	8008ec8 <StartDefaultTask+0x8>
 8008eee:	bf00      	nop
 8008ef0:	20001254 	.word	0x20001254
 8008ef4:	20001384 	.word	0x20001384

08008ef8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 8008f00:	200a      	movs	r0, #10
 8008f02:	f7fd fa1a 	bl	800633a <osDelay>
    osSemaphoreWait(BinSemHandle, osWaitForever);
 8008f06:	4b7e      	ldr	r3, [pc, #504]	; (8009100 <StartTask02+0x208>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fd fa5a 	bl	80063c8 <osSemaphoreWait>



    if ((int) accel[0] > thres) {
 8008f14:	4b7b      	ldr	r3, [pc, #492]	; (8009104 <StartTask02+0x20c>)
 8008f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	4b7a      	ldr	r3, [pc, #488]	; (8009108 <StartTask02+0x210>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	dd1d      	ble.n	8008f60 <StartTask02+0x68>
    	if (note_selector < 27){
 8008f24:	4b79      	ldr	r3, [pc, #484]	; (800910c <StartTask02+0x214>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b1a      	cmp	r3, #26
 8008f2a:	dc04      	bgt.n	8008f36 <StartTask02+0x3e>
   			  note_selector += 1;
 8008f2c:	4b77      	ldr	r3, [pc, #476]	; (800910c <StartTask02+0x214>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3301      	adds	r3, #1
 8008f32:	4a76      	ldr	r2, [pc, #472]	; (800910c <StartTask02+0x214>)
 8008f34:	6013      	str	r3, [r2, #0]
   		}
   		sprintf(str_tmp, "X-RIGHT NOTE:%d \n \r", note_selector);
 8008f36:	4b75      	ldr	r3, [pc, #468]	; (800910c <StartTask02+0x214>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	4974      	ldr	r1, [pc, #464]	; (8009110 <StartTask02+0x218>)
 8008f3e:	4875      	ldr	r0, [pc, #468]	; (8009114 <StartTask02+0x21c>)
 8008f40:	f001 faa4 	bl	800a48c <siprintf>
   		HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, sizeof(str_tmp),10000);
 8008f44:	f242 7310 	movw	r3, #10000	; 0x2710
 8008f48:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008f4c:	4971      	ldr	r1, [pc, #452]	; (8009114 <StartTask02+0x21c>)
 8008f4e:	4872      	ldr	r0, [pc, #456]	; (8009118 <StartTask02+0x220>)
 8008f50:	f7fc fb2a 	bl	80055a8 <HAL_UART_Transmit>
   		osDelay(delay);
 8008f54:	4b71      	ldr	r3, [pc, #452]	; (800911c <StartTask02+0x224>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fd f9ee 	bl	800633a <osDelay>
 8008f5e:	e0c2      	b.n	80090e6 <StartTask02+0x1ee>
   	}

    else if ((int) accel[0] < -thres) {
 8008f60:	4b68      	ldr	r3, [pc, #416]	; (8009104 <StartTask02+0x20c>)
 8008f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f66:	461a      	mov	r2, r3
 8008f68:	4b67      	ldr	r3, [pc, #412]	; (8009108 <StartTask02+0x210>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	425b      	negs	r3, r3
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	da1d      	bge.n	8008fae <StartTask02+0xb6>
   		  if (note_selector > 0){
 8008f72:	4b66      	ldr	r3, [pc, #408]	; (800910c <StartTask02+0x214>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	dd04      	ble.n	8008f84 <StartTask02+0x8c>
   				note_selector -= 1;
 8008f7a:	4b64      	ldr	r3, [pc, #400]	; (800910c <StartTask02+0x214>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	4a62      	ldr	r2, [pc, #392]	; (800910c <StartTask02+0x214>)
 8008f82:	6013      	str	r3, [r2, #0]
   		  }
   		  sprintf(str_tmp, "X-LEFT NOTE:%d\n \r", note_selector);
 8008f84:	4b61      	ldr	r3, [pc, #388]	; (800910c <StartTask02+0x214>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	4965      	ldr	r1, [pc, #404]	; (8009120 <StartTask02+0x228>)
 8008f8c:	4861      	ldr	r0, [pc, #388]	; (8009114 <StartTask02+0x21c>)
 8008f8e:	f001 fa7d 	bl	800a48c <siprintf>
   		  HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, sizeof(str_tmp),10000);
 8008f92:	f242 7310 	movw	r3, #10000	; 0x2710
 8008f96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008f9a:	495e      	ldr	r1, [pc, #376]	; (8009114 <StartTask02+0x21c>)
 8008f9c:	485e      	ldr	r0, [pc, #376]	; (8009118 <StartTask02+0x220>)
 8008f9e:	f7fc fb03 	bl	80055a8 <HAL_UART_Transmit>
   		  osDelay(delay);
 8008fa2:	4b5e      	ldr	r3, [pc, #376]	; (800911c <StartTask02+0x224>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fd f9c7 	bl	800633a <osDelay>
 8008fac:	e09b      	b.n	80090e6 <StartTask02+0x1ee>
   	  }

    else if ((int) accel[1] > thres) {
 8008fae:	4b55      	ldr	r3, [pc, #340]	; (8009104 <StartTask02+0x20c>)
 8008fb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	4b54      	ldr	r3, [pc, #336]	; (8009108 <StartTask02+0x210>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	dd1d      	ble.n	8008ffa <StartTask02+0x102>
   		  if (note_selector + 7 < 27) {
 8008fbe:	4b53      	ldr	r3, [pc, #332]	; (800910c <StartTask02+0x214>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b13      	cmp	r3, #19
 8008fc4:	dc04      	bgt.n	8008fd0 <StartTask02+0xd8>
   			  note_selector += 7;
 8008fc6:	4b51      	ldr	r3, [pc, #324]	; (800910c <StartTask02+0x214>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	3307      	adds	r3, #7
 8008fcc:	4a4f      	ldr	r2, [pc, #316]	; (800910c <StartTask02+0x214>)
 8008fce:	6013      	str	r3, [r2, #0]
   		  }
   		  sprintf(str_tmp, "Y_FOWARD NOTE:%d\n \r", note_selector);
 8008fd0:	4b4e      	ldr	r3, [pc, #312]	; (800910c <StartTask02+0x214>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	4953      	ldr	r1, [pc, #332]	; (8009124 <StartTask02+0x22c>)
 8008fd8:	484e      	ldr	r0, [pc, #312]	; (8009114 <StartTask02+0x21c>)
 8008fda:	f001 fa57 	bl	800a48c <siprintf>
   		  HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, sizeof(str_tmp),10000);
 8008fde:	f242 7310 	movw	r3, #10000	; 0x2710
 8008fe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008fe6:	494b      	ldr	r1, [pc, #300]	; (8009114 <StartTask02+0x21c>)
 8008fe8:	484b      	ldr	r0, [pc, #300]	; (8009118 <StartTask02+0x220>)
 8008fea:	f7fc fadd 	bl	80055a8 <HAL_UART_Transmit>
   		  osDelay(delay);
 8008fee:	4b4b      	ldr	r3, [pc, #300]	; (800911c <StartTask02+0x224>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fd f9a1 	bl	800633a <osDelay>
 8008ff8:	e075      	b.n	80090e6 <StartTask02+0x1ee>
   	  }

    else if ((int) accel[1] < -thres) {
 8008ffa:	4b42      	ldr	r3, [pc, #264]	; (8009104 <StartTask02+0x20c>)
 8008ffc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009000:	461a      	mov	r2, r3
 8009002:	4b41      	ldr	r3, [pc, #260]	; (8009108 <StartTask02+0x210>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	425b      	negs	r3, r3
 8009008:	429a      	cmp	r2, r3
 800900a:	da1d      	bge.n	8009048 <StartTask02+0x150>
   		  if (note_selector - 7 > 0) {
 800900c:	4b3f      	ldr	r3, [pc, #252]	; (800910c <StartTask02+0x214>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b07      	cmp	r3, #7
 8009012:	dd04      	ble.n	800901e <StartTask02+0x126>
   			  note_selector -= 7;
 8009014:	4b3d      	ldr	r3, [pc, #244]	; (800910c <StartTask02+0x214>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3b07      	subs	r3, #7
 800901a:	4a3c      	ldr	r2, [pc, #240]	; (800910c <StartTask02+0x214>)
 800901c:	6013      	str	r3, [r2, #0]
   	  	  }
   	  	  sprintf(str_tmp, "Y_BACK NOTE:%d\n \r", note_selector);
 800901e:	4b3b      	ldr	r3, [pc, #236]	; (800910c <StartTask02+0x214>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	4940      	ldr	r1, [pc, #256]	; (8009128 <StartTask02+0x230>)
 8009026:	483b      	ldr	r0, [pc, #236]	; (8009114 <StartTask02+0x21c>)
 8009028:	f001 fa30 	bl	800a48c <siprintf>
   	  	  HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, sizeof(str_tmp),10000);
 800902c:	f242 7310 	movw	r3, #10000	; 0x2710
 8009030:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009034:	4937      	ldr	r1, [pc, #220]	; (8009114 <StartTask02+0x21c>)
 8009036:	4838      	ldr	r0, [pc, #224]	; (8009118 <StartTask02+0x220>)
 8009038:	f7fc fab6 	bl	80055a8 <HAL_UART_Transmit>
   	  	  osDelay(delay);
 800903c:	4b37      	ldr	r3, [pc, #220]	; (800911c <StartTask02+0x224>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4618      	mov	r0, r3
 8009042:	f7fd f97a 	bl	800633a <osDelay>
 8009046:	e04e      	b.n	80090e6 <StartTask02+0x1ee>
   	  }

    else if ((int) accel[2] > 1000+thres) {
 8009048:	4b2e      	ldr	r3, [pc, #184]	; (8009104 <StartTask02+0x20c>)
 800904a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800904e:	461a      	mov	r2, r3
 8009050:	4b2d      	ldr	r3, [pc, #180]	; (8009108 <StartTask02+0x210>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8009058:	429a      	cmp	r2, r3
 800905a:	dd1d      	ble.n	8009098 <StartTask02+0x1a0>
   		  if (volume_selector < 3){
 800905c:	4b33      	ldr	r3, [pc, #204]	; (800912c <StartTask02+0x234>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b02      	cmp	r3, #2
 8009062:	dc04      	bgt.n	800906e <StartTask02+0x176>
   			  volume_selector += 1;
 8009064:	4b31      	ldr	r3, [pc, #196]	; (800912c <StartTask02+0x234>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3301      	adds	r3, #1
 800906a:	4a30      	ldr	r2, [pc, #192]	; (800912c <StartTask02+0x234>)
 800906c:	6013      	str	r3, [r2, #0]
   		  }
   		  sprintf(str_tmp, "Z_UP NOTE:%d\n \r", volume_selector);
 800906e:	4b2f      	ldr	r3, [pc, #188]	; (800912c <StartTask02+0x234>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	492e      	ldr	r1, [pc, #184]	; (8009130 <StartTask02+0x238>)
 8009076:	4827      	ldr	r0, [pc, #156]	; (8009114 <StartTask02+0x21c>)
 8009078:	f001 fa08 	bl	800a48c <siprintf>
   		  HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, sizeof(str_tmp),10000);
 800907c:	f242 7310 	movw	r3, #10000	; 0x2710
 8009080:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009084:	4923      	ldr	r1, [pc, #140]	; (8009114 <StartTask02+0x21c>)
 8009086:	4824      	ldr	r0, [pc, #144]	; (8009118 <StartTask02+0x220>)
 8009088:	f7fc fa8e 	bl	80055a8 <HAL_UART_Transmit>
   		  osDelay(delay);
 800908c:	4b23      	ldr	r3, [pc, #140]	; (800911c <StartTask02+0x224>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4618      	mov	r0, r3
 8009092:	f7fd f952 	bl	800633a <osDelay>
 8009096:	e026      	b.n	80090e6 <StartTask02+0x1ee>
   	  }

    else if ((int) accel[2] < 1000-thres) {
 8009098:	4b1a      	ldr	r3, [pc, #104]	; (8009104 <StartTask02+0x20c>)
 800909a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800909e:	461a      	mov	r2, r3
 80090a0:	4b19      	ldr	r3, [pc, #100]	; (8009108 <StartTask02+0x210>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 80090a8:	429a      	cmp	r2, r3
 80090aa:	da1c      	bge.n	80090e6 <StartTask02+0x1ee>
   		  if (volume_selector > 0){
 80090ac:	4b1f      	ldr	r3, [pc, #124]	; (800912c <StartTask02+0x234>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	dd04      	ble.n	80090be <StartTask02+0x1c6>
   			  volume_selector -= 1;
 80090b4:	4b1d      	ldr	r3, [pc, #116]	; (800912c <StartTask02+0x234>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	4a1c      	ldr	r2, [pc, #112]	; (800912c <StartTask02+0x234>)
 80090bc:	6013      	str	r3, [r2, #0]
   		  }
   		  sprintf(str_tmp, "Z_DOWN NOTE:%d\n \r", volume_selector);
 80090be:	4b1b      	ldr	r3, [pc, #108]	; (800912c <StartTask02+0x234>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	461a      	mov	r2, r3
 80090c4:	491b      	ldr	r1, [pc, #108]	; (8009134 <StartTask02+0x23c>)
 80090c6:	4813      	ldr	r0, [pc, #76]	; (8009114 <StartTask02+0x21c>)
 80090c8:	f001 f9e0 	bl	800a48c <siprintf>
   	  	  HAL_UART_Transmit(&huart1, (uint8_t *)str_tmp, sizeof(str_tmp),10000);
 80090cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80090d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80090d4:	490f      	ldr	r1, [pc, #60]	; (8009114 <StartTask02+0x21c>)
 80090d6:	4810      	ldr	r0, [pc, #64]	; (8009118 <StartTask02+0x220>)
 80090d8:	f7fc fa66 	bl	80055a8 <HAL_UART_Transmit>
   	  	  osDelay(delay);
 80090dc:	4b0f      	ldr	r3, [pc, #60]	; (800911c <StartTask02+0x224>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7fd f92a 	bl	800633a <osDelay>
   	 }
   	  memset(str_tmp,0,sizeof(str_tmp));
 80090e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80090ea:	2100      	movs	r1, #0
 80090ec:	4809      	ldr	r0, [pc, #36]	; (8009114 <StartTask02+0x21c>)
 80090ee:	f001 f9c5 	bl	800a47c <memset>
   	  osSemaphoreRelease(BinSemHandle);
 80090f2:	4b03      	ldr	r3, [pc, #12]	; (8009100 <StartTask02+0x208>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fd f9b4 	bl	8006464 <osSemaphoreRelease>
    osDelay(10);
 80090fc:	e700      	b.n	8008f00 <StartTask02+0x8>
 80090fe:	bf00      	nop
 8009100:	20001254 	.word	0x20001254
 8009104:	20001384 	.word	0x20001384
 8009108:	20000040 	.word	0x20000040
 800910c:	20000048 	.word	0x20000048
 8009110:	0800adc8 	.word	0x0800adc8
 8009114:	20001258 	.word	0x20001258
 8009118:	200011bc 	.word	0x200011bc
 800911c:	20000044 	.word	0x20000044
 8009120:	0800addc 	.word	0x0800addc
 8009124:	0800adf0 	.word	0x0800adf0
 8009128:	0800ae04 	.word	0x0800ae04
 800912c:	200000cc 	.word	0x200000cc
 8009130:	0800ae18 	.word	0x0800ae18
 8009134:	0800ae28 	.word	0x0800ae28

08009138 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009138:	b5b0      	push	{r4, r5, r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a36      	ldr	r2, [pc, #216]	; (8009220 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d101      	bne.n	800914e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800914a:	f7f7 ff79 	bl	8001040 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2){
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009156:	d158      	bne.n	800920a <HAL_TIM_PeriodElapsedCallback+0xd2>
  //		HAL_IncTick();

  		float x = M_PI /20 * sound_wave_input * array[note_selector]/1000;
 8009158:	4b32      	ldr	r3, [pc, #200]	; (8009224 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4618      	mov	r0, r3
 800915e:	f7f7 f9f1 	bl	8000544 <__aeabi_i2d>
 8009162:	a32d      	add	r3, pc, #180	; (adr r3, 8009218 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f7f7 fa56 	bl	8000618 <__aeabi_dmul>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4614      	mov	r4, r2
 8009172:	461d      	mov	r5, r3
 8009174:	4b2c      	ldr	r3, [pc, #176]	; (8009228 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a2c      	ldr	r2, [pc, #176]	; (800922c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4618      	mov	r0, r3
 8009182:	f7f7 f9f1 	bl	8000568 <__aeabi_f2d>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4620      	mov	r0, r4
 800918c:	4629      	mov	r1, r5
 800918e:	f7f7 fa43 	bl	8000618 <__aeabi_dmul>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	4610      	mov	r0, r2
 8009198:	4619      	mov	r1, r3
 800919a:	f04f 0200 	mov.w	r2, #0
 800919e:	4b24      	ldr	r3, [pc, #144]	; (8009230 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80091a0:	f7f7 fb64 	bl	800086c <__aeabi_ddiv>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4610      	mov	r0, r2
 80091aa:	4619      	mov	r1, r3
 80091ac:	f7f7 fc46 	bl	8000a3c <__aeabi_d2f>
 80091b0:	4603      	mov	r3, r0
 80091b2:	60fb      	str	r3, [r7, #12]
  		float e6 = arm_sin_f32(x) + 1;
 80091b4:	ed97 0a03 	vldr	s0, [r7, #12]
 80091b8:	f001 f8e2 	bl	800a380 <arm_sin_f32>
 80091bc:	eef0 7a40 	vmov.f32	s15, s0
 80091c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091c8:	edc7 7a02 	vstr	s15, [r7, #8]
  		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, e6*volume[volume_selector]/(2)); // 2^resolution / peak value  = 2^12/15
 80091cc:	4b19      	ldr	r3, [pc, #100]	; (8009234 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a19      	ldr	r2, [pc, #100]	; (8009238 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80091d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091de:	edd7 7a02 	vldr	s15, [r7, #8]
 80091e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80091e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80091ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091f2:	ee17 3a90 	vmov	r3, s15
 80091f6:	2200      	movs	r2, #0
 80091f8:	2100      	movs	r1, #0
 80091fa:	4810      	ldr	r0, [pc, #64]	; (800923c <HAL_TIM_PeriodElapsedCallback+0x104>)
 80091fc:	f7f8 f914 	bl	8001428 <HAL_DAC_SetValue>
  		sound_wave_input++;
 8009200:	4b08      	ldr	r3, [pc, #32]	; (8009224 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3301      	adds	r3, #1
 8009206:	4a07      	ldr	r2, [pc, #28]	; (8009224 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8009208:	6013      	str	r3, [r2, #0]

  	}

  /* USER CODE END Callback 1 */
}
 800920a:	bf00      	nop
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bdb0      	pop	{r4, r5, r7, pc}
 8009212:	bf00      	nop
 8009214:	f3af 8000 	nop.w
 8009218:	769cf0e0 	.word	0x769cf0e0
 800921c:	3fc41b2f 	.word	0x3fc41b2f
 8009220:	40001000 	.word	0x40001000
 8009224:	2000138c 	.word	0x2000138c
 8009228:	20000048 	.word	0x20000048
 800922c:	2000004c 	.word	0x2000004c
 8009230:	408f4000 	.word	0x408f4000
 8009234:	200000cc 	.word	0x200000cc
 8009238:	200000bc 	.word	0x200000bc
 800923c:	200010b8 	.word	0x200010b8

08009240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009244:	b672      	cpsid	i
}
 8009246:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009248:	e7fe      	b.n	8009248 <Error_Handler+0x8>
	...

0800924c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b08a      	sub	sp, #40	; 0x28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8009254:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <I2Cx_MspInit+0xa8>)
 8009256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009258:	4a26      	ldr	r2, [pc, #152]	; (80092f4 <I2Cx_MspInit+0xa8>)
 800925a:	f043 0302 	orr.w	r3, r3, #2
 800925e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009260:	4b24      	ldr	r3, [pc, #144]	; (80092f4 <I2Cx_MspInit+0xa8>)
 8009262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009264:	f003 0302 	and.w	r3, r3, #2
 8009268:	613b      	str	r3, [r7, #16]
 800926a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800926c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009270:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8009272:	2312      	movs	r3, #18
 8009274:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8009276:	2301      	movs	r3, #1
 8009278:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800927a:	2303      	movs	r3, #3
 800927c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800927e:	2304      	movs	r3, #4
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8009282:	f107 0314 	add.w	r3, r7, #20
 8009286:	4619      	mov	r1, r3
 8009288:	481b      	ldr	r0, [pc, #108]	; (80092f8 <I2Cx_MspInit+0xac>)
 800928a:	f7f8 fa47 	bl	800171c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800928e:	f107 0314 	add.w	r3, r7, #20
 8009292:	4619      	mov	r1, r3
 8009294:	4818      	ldr	r0, [pc, #96]	; (80092f8 <I2Cx_MspInit+0xac>)
 8009296:	f7f8 fa41 	bl	800171c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800929a:	4b16      	ldr	r3, [pc, #88]	; (80092f4 <I2Cx_MspInit+0xa8>)
 800929c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800929e:	4a15      	ldr	r2, [pc, #84]	; (80092f4 <I2Cx_MspInit+0xa8>)
 80092a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092a4:	6593      	str	r3, [r2, #88]	; 0x58
 80092a6:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <I2Cx_MspInit+0xa8>)
 80092a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ae:	60fb      	str	r3, [r7, #12]
 80092b0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80092b2:	4b10      	ldr	r3, [pc, #64]	; (80092f4 <I2Cx_MspInit+0xa8>)
 80092b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b6:	4a0f      	ldr	r2, [pc, #60]	; (80092f4 <I2Cx_MspInit+0xa8>)
 80092b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092bc:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80092be:	4b0d      	ldr	r3, [pc, #52]	; (80092f4 <I2Cx_MspInit+0xa8>)
 80092c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c2:	4a0c      	ldr	r2, [pc, #48]	; (80092f4 <I2Cx_MspInit+0xa8>)
 80092c4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80092c8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80092ca:	2200      	movs	r2, #0
 80092cc:	210f      	movs	r1, #15
 80092ce:	2021      	movs	r0, #33	; 0x21
 80092d0:	f7f7 ffb2 	bl	8001238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80092d4:	2021      	movs	r0, #33	; 0x21
 80092d6:	f7f7 ffcb 	bl	8001270 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80092da:	2200      	movs	r2, #0
 80092dc:	210f      	movs	r1, #15
 80092de:	2022      	movs	r0, #34	; 0x22
 80092e0:	f7f7 ffaa 	bl	8001238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80092e4:	2022      	movs	r0, #34	; 0x22
 80092e6:	f7f7 ffc3 	bl	8001270 <HAL_NVIC_EnableIRQ>
}
 80092ea:	bf00      	nop
 80092ec:	3728      	adds	r7, #40	; 0x28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	40021000 	.word	0x40021000
 80092f8:	48000400 	.word	0x48000400

080092fc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a12      	ldr	r2, [pc, #72]	; (8009350 <I2Cx_Init+0x54>)
 8009308:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a11      	ldr	r2, [pc, #68]	; (8009354 <I2Cx_Init+0x58>)
 800930e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7ff ff89 	bl	800924c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f7f8 fc8a 	bl	8001c54 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8009340:	2100      	movs	r1, #0
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7f9 fa18 	bl	8002778 <HAL_I2CEx_ConfigAnalogFilter>
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	40005800 	.word	0x40005800
 8009354:	00702681 	.word	0x00702681

08009358 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b08a      	sub	sp, #40	; 0x28
 800935c:	af04      	add	r7, sp, #16
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	4608      	mov	r0, r1
 8009362:	4611      	mov	r1, r2
 8009364:	461a      	mov	r2, r3
 8009366:	4603      	mov	r3, r0
 8009368:	72fb      	strb	r3, [r7, #11]
 800936a:	460b      	mov	r3, r1
 800936c:	813b      	strh	r3, [r7, #8]
 800936e:	4613      	mov	r3, r2
 8009370:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009376:	7afb      	ldrb	r3, [r7, #11]
 8009378:	b299      	uxth	r1, r3
 800937a:	88f8      	ldrh	r0, [r7, #6]
 800937c:	893a      	ldrh	r2, [r7, #8]
 800937e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009382:	9302      	str	r3, [sp, #8]
 8009384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	4603      	mov	r3, r0
 800938e:	68f8      	ldr	r0, [r7, #12]
 8009390:	f7f8 fe32 	bl	8001ff8 <HAL_I2C_Mem_Read>
 8009394:	4603      	mov	r3, r0
 8009396:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d004      	beq.n	80093a8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800939e:	7afb      	ldrb	r3, [r7, #11]
 80093a0:	4619      	mov	r1, r3
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 f832 	bl	800940c <I2Cx_Error>
  }
  return status;
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b08a      	sub	sp, #40	; 0x28
 80093b6:	af04      	add	r7, sp, #16
 80093b8:	60f8      	str	r0, [r7, #12]
 80093ba:	4608      	mov	r0, r1
 80093bc:	4611      	mov	r1, r2
 80093be:	461a      	mov	r2, r3
 80093c0:	4603      	mov	r3, r0
 80093c2:	72fb      	strb	r3, [r7, #11]
 80093c4:	460b      	mov	r3, r1
 80093c6:	813b      	strh	r3, [r7, #8]
 80093c8:	4613      	mov	r3, r2
 80093ca:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80093d0:	7afb      	ldrb	r3, [r7, #11]
 80093d2:	b299      	uxth	r1, r3
 80093d4:	88f8      	ldrh	r0, [r7, #6]
 80093d6:	893a      	ldrh	r2, [r7, #8]
 80093d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093dc:	9302      	str	r3, [sp, #8]
 80093de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	6a3b      	ldr	r3, [r7, #32]
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	4603      	mov	r3, r0
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f7f8 fcf1 	bl	8001dd0 <HAL_I2C_Mem_Write>
 80093ee:	4603      	mov	r3, r0
 80093f0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80093f2:	7dfb      	ldrb	r3, [r7, #23]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d004      	beq.n	8009402 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80093f8:	7afb      	ldrb	r3, [r7, #11]
 80093fa:	4619      	mov	r1, r3
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f805 	bl	800940c <I2Cx_Error>
  }
  return status;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7f8 fcaa 	bl	8001d72 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff ff6c 	bl	80092fc <I2Cx_Init>
}
 8009424:	bf00      	nop
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8009430:	4802      	ldr	r0, [pc, #8]	; (800943c <SENSOR_IO_Init+0x10>)
 8009432:	f7ff ff63 	bl	80092fc <I2Cx_Init>
}
 8009436:	bf00      	nop
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20001390 	.word	0x20001390

08009440 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af02      	add	r7, sp, #8
 8009446:	4603      	mov	r3, r0
 8009448:	71fb      	strb	r3, [r7, #7]
 800944a:	460b      	mov	r3, r1
 800944c:	71bb      	strb	r3, [r7, #6]
 800944e:	4613      	mov	r3, r2
 8009450:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8009452:	79bb      	ldrb	r3, [r7, #6]
 8009454:	b29a      	uxth	r2, r3
 8009456:	79f9      	ldrb	r1, [r7, #7]
 8009458:	2301      	movs	r3, #1
 800945a:	9301      	str	r3, [sp, #4]
 800945c:	1d7b      	adds	r3, r7, #5
 800945e:	9300      	str	r3, [sp, #0]
 8009460:	2301      	movs	r3, #1
 8009462:	4803      	ldr	r0, [pc, #12]	; (8009470 <SENSOR_IO_Write+0x30>)
 8009464:	f7ff ffa5 	bl	80093b2 <I2Cx_WriteMultiple>
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	20001390 	.word	0x20001390

08009474 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af02      	add	r7, sp, #8
 800947a:	4603      	mov	r3, r0
 800947c:	460a      	mov	r2, r1
 800947e:	71fb      	strb	r3, [r7, #7]
 8009480:	4613      	mov	r3, r2
 8009482:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009488:	79bb      	ldrb	r3, [r7, #6]
 800948a:	b29a      	uxth	r2, r3
 800948c:	79f9      	ldrb	r1, [r7, #7]
 800948e:	2301      	movs	r3, #1
 8009490:	9301      	str	r3, [sp, #4]
 8009492:	f107 030f 	add.w	r3, r7, #15
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	2301      	movs	r3, #1
 800949a:	4804      	ldr	r0, [pc, #16]	; (80094ac <SENSOR_IO_Read+0x38>)
 800949c:	f7ff ff5c 	bl	8009358 <I2Cx_ReadMultiple>

  return read_value;
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20001390 	.word	0x20001390

080094b0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af02      	add	r7, sp, #8
 80094b6:	603a      	str	r2, [r7, #0]
 80094b8:	461a      	mov	r2, r3
 80094ba:	4603      	mov	r3, r0
 80094bc:	71fb      	strb	r3, [r7, #7]
 80094be:	460b      	mov	r3, r1
 80094c0:	71bb      	strb	r3, [r7, #6]
 80094c2:	4613      	mov	r3, r2
 80094c4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80094c6:	79bb      	ldrb	r3, [r7, #6]
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	79f9      	ldrb	r1, [r7, #7]
 80094cc:	88bb      	ldrh	r3, [r7, #4]
 80094ce:	9301      	str	r3, [sp, #4]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	2301      	movs	r3, #1
 80094d6:	4804      	ldr	r0, [pc, #16]	; (80094e8 <SENSOR_IO_ReadMultiple+0x38>)
 80094d8:	f7ff ff3e 	bl	8009358 <I2Cx_ReadMultiple>
 80094dc:	4603      	mov	r3, r0
 80094de:	b29b      	uxth	r3, r3
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20001390 	.word	0x20001390

080094ec <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80094f6:	2300      	movs	r3, #0
 80094f8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80094fa:	4b19      	ldr	r3, [pc, #100]	; (8009560 <BSP_ACCELERO_Init+0x74>)
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	4798      	blx	r3
 8009500:	4603      	mov	r3, r0
 8009502:	2b6a      	cmp	r3, #106	; 0x6a
 8009504:	d002      	beq.n	800950c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	73fb      	strb	r3, [r7, #15]
 800950a:	e024      	b.n	8009556 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800950c:	4b15      	ldr	r3, [pc, #84]	; (8009564 <BSP_ACCELERO_Init+0x78>)
 800950e:	4a14      	ldr	r2, [pc, #80]	; (8009560 <BSP_ACCELERO_Init+0x74>)
 8009510:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8009512:	2330      	movs	r3, #48	; 0x30
 8009514:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800951a:	2300      	movs	r3, #0
 800951c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800951e:	2340      	movs	r3, #64	; 0x40
 8009520:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8009522:	2300      	movs	r3, #0
 8009524:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800952a:	797a      	ldrb	r2, [r7, #5]
 800952c:	7abb      	ldrb	r3, [r7, #10]
 800952e:	4313      	orrs	r3, r2
 8009530:	b2db      	uxtb	r3, r3
 8009532:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8009534:	7a3b      	ldrb	r3, [r7, #8]
 8009536:	f043 0304 	orr.w	r3, r3, #4
 800953a:	b2db      	uxtb	r3, r3
 800953c:	021b      	lsls	r3, r3, #8
 800953e:	b21a      	sxth	r2, r3
 8009540:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009544:	4313      	orrs	r3, r2
 8009546:	b21b      	sxth	r3, r3
 8009548:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800954a:	4b06      	ldr	r3, [pc, #24]	; (8009564 <BSP_ACCELERO_Init+0x78>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	89ba      	ldrh	r2, [r7, #12]
 8009552:	4610      	mov	r0, r2
 8009554:	4798      	blx	r3
  }  

  return ret;
 8009556:	7bfb      	ldrb	r3, [r7, #15]
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	20000000 	.word	0x20000000
 8009564:	200013e4 	.word	0x200013e4

08009568 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b082      	sub	sp, #8
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8009570:	4b08      	ldr	r3, [pc, #32]	; (8009594 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d009      	beq.n	800958c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8009578:	4b06      	ldr	r3, [pc, #24]	; (8009594 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800957e:	2b00      	cmp	r3, #0
 8009580:	d004      	beq.n	800958c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8009582:	4b04      	ldr	r3, [pc, #16]	; (8009594 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	4798      	blx	r3
    }
  }
}
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	200013e4 	.word	0x200013e4

08009598 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 800959e:	4b3b      	ldr	r3, [pc, #236]	; (800968c <BSP_QSPI_Init+0xf4>)
 80095a0:	4a3b      	ldr	r2, [pc, #236]	; (8009690 <BSP_QSPI_Init+0xf8>)
 80095a2:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 80095a4:	4839      	ldr	r0, [pc, #228]	; (800968c <BSP_QSPI_Init+0xf4>)
 80095a6:	f7f9 fa29 	bl	80029fc <HAL_OSPI_DeInit>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80095b0:	2301      	movs	r3, #1
 80095b2:	e067      	b.n	8009684 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80095b4:	f000 f946 	bl	8009844 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 80095b8:	4b34      	ldr	r3, [pc, #208]	; (800968c <BSP_QSPI_Init+0xf4>)
 80095ba:	2204      	movs	r2, #4
 80095bc:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 80095be:	4b33      	ldr	r3, [pc, #204]	; (800968c <BSP_QSPI_Init+0xf4>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80095c4:	4b31      	ldr	r3, [pc, #196]	; (800968c <BSP_QSPI_Init+0xf4>)
 80095c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095ca:	60da      	str	r2, [r3, #12]
 80095cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80095d0:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	fa93 f3a3 	rbit	r3, r3
 80095d8:	607b      	str	r3, [r7, #4]
  return result;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d101      	bne.n	80095e8 <BSP_QSPI_Init+0x50>
    return 32U;
 80095e4:	2320      	movs	r3, #32
 80095e6:	e003      	b.n	80095f0 <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	fab3 f383 	clz	r3, r3
 80095ee:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 80095f0:	461a      	mov	r2, r3
 80095f2:	4b26      	ldr	r3, [pc, #152]	; (800968c <BSP_QSPI_Init+0xf4>)
 80095f4:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 80095f6:	4b25      	ldr	r3, [pc, #148]	; (800968c <BSP_QSPI_Init+0xf4>)
 80095f8:	2201      	movs	r2, #1
 80095fa:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 80095fc:	4b23      	ldr	r3, [pc, #140]	; (800968c <BSP_QSPI_Init+0xf4>)
 80095fe:	2200      	movs	r2, #0
 8009600:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8009602:	4b22      	ldr	r3, [pc, #136]	; (800968c <BSP_QSPI_Init+0xf4>)
 8009604:	2200      	movs	r2, #0
 8009606:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8009608:	4b20      	ldr	r3, [pc, #128]	; (800968c <BSP_QSPI_Init+0xf4>)
 800960a:	2204      	movs	r2, #4
 800960c:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800960e:	4b1f      	ldr	r3, [pc, #124]	; (800968c <BSP_QSPI_Init+0xf4>)
 8009610:	2200      	movs	r2, #0
 8009612:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8009614:	4b1d      	ldr	r3, [pc, #116]	; (800968c <BSP_QSPI_Init+0xf4>)
 8009616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800961a:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 800961c:	4b1b      	ldr	r3, [pc, #108]	; (800968c <BSP_QSPI_Init+0xf4>)
 800961e:	2200      	movs	r2, #0
 8009620:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8009622:	4b1a      	ldr	r3, [pc, #104]	; (800968c <BSP_QSPI_Init+0xf4>)
 8009624:	2200      	movs	r2, #0
 8009626:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8009628:	4818      	ldr	r0, [pc, #96]	; (800968c <BSP_QSPI_Init+0xf4>)
 800962a:	f7f9 f93d 	bl	80028a8 <HAL_OSPI_Init>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e025      	b.n	8009684 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8009638:	4814      	ldr	r0, [pc, #80]	; (800968c <BSP_QSPI_Init+0xf4>)
 800963a:	f000 f943 	bl	80098c4 <QSPI_ResetMemory>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8009644:	2304      	movs	r3, #4
 8009646:	e01d      	b.n	8009684 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8009648:	2101      	movs	r1, #1
 800964a:	4810      	ldr	r0, [pc, #64]	; (800968c <BSP_QSPI_Init+0xf4>)
 800964c:	f000 fa28 	bl	8009aa0 <QSPI_QuadMode>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e014      	b.n	8009684 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800965a:	2101      	movs	r1, #1
 800965c:	480b      	ldr	r0, [pc, #44]	; (800968c <BSP_QSPI_Init+0xf4>)
 800965e:	f000 facb 	bl	8009bf8 <QSPI_HighPerfMode>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e00b      	b.n	8009684 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 800966c:	4b07      	ldr	r3, [pc, #28]	; (800968c <BSP_QSPI_Init+0xf4>)
 800966e:	2202      	movs	r2, #2
 8009670:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8009672:	4806      	ldr	r0, [pc, #24]	; (800968c <BSP_QSPI_Init+0xf4>)
 8009674:	f7f9 f918 	bl	80028a8 <HAL_OSPI_Init>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e000      	b.n	8009684 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	200013e8 	.word	0x200013e8
 8009690:	a0001000 	.word	0xa0001000

08009694 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b098      	sub	sp, #96	; 0x60
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 80096a0:	2300      	movs	r3, #0
 80096a2:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 80096a8:	23eb      	movs	r3, #235	; 0xeb
 80096aa:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 80096ac:	2301      	movs	r3, #1
 80096ae:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 80096b0:	2300      	movs	r3, #0
 80096b2:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80096b4:	2300      	movs	r3, #0
 80096b6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 80096bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80096c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 80096c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096c6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80096c8:	2300      	movs	r3, #0
 80096ca:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 80096cc:	23aa      	movs	r3, #170	; 0xaa
 80096ce:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 80096d0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80096d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 80096d6:	2300      	movs	r3, #0
 80096d8:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 80096da:	2300      	movs	r3, #0
 80096dc:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 80096de:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80096e2:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 80096ec:	2304      	movs	r3, #4
 80096ee:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 80096f0:	2300      	movs	r3, #0
 80096f2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80096f4:	2300      	movs	r3, #0
 80096f6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80096f8:	f107 0310 	add.w	r3, r7, #16
 80096fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009700:	4619      	mov	r1, r3
 8009702:	480c      	ldr	r0, [pc, #48]	; (8009734 <BSP_QSPI_Read+0xa0>)
 8009704:	f7f9 f9a1 	bl	8002a4a <HAL_OSPI_Command>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e00b      	b.n	800972a <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009712:	f241 3288 	movw	r2, #5000	; 0x1388
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	4806      	ldr	r0, [pc, #24]	; (8009734 <BSP_QSPI_Read+0xa0>)
 800971a:	f7f9 fa8a 	bl	8002c32 <HAL_OSPI_Receive>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e000      	b.n	800972a <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3760      	adds	r7, #96	; 0x60
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	200013e8 	.word	0x200013e8

08009738 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b09c      	sub	sp, #112	; 0x70
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800974c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800974e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	429a      	cmp	r2, r3
 8009754:	d901      	bls.n	800975a <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the address variables */
  current_addr = WriteAddr;
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 800975e:	68ba      	ldr	r2, [r7, #8]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4413      	add	r3, r2
 8009764:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009766:	2300      	movs	r3, #0
 8009768:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800976a:	2300      	movs	r3, #0
 800976c:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 800976e:	2338      	movs	r3, #56	; 0x38
 8009770:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009772:	2301      	movs	r3, #1
 8009774:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009776:	2300      	movs	r3, #0
 8009778:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800977a:	2300      	movs	r3, #0
 800977c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800977e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009782:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8009784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009788:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800978a:	2300      	movs	r3, #0
 800978c:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800978e:	2300      	movs	r3, #0
 8009790:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8009792:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009796:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009798:	2300      	movs	r3, #0
 800979a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80097a0:	2300      	movs	r3, #0
 80097a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80097a4:	2300      	movs	r3, #0
 80097a6:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80097a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80097aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 80097ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ae:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80097b0:	4823      	ldr	r0, [pc, #140]	; (8009840 <BSP_QSPI_Write+0x108>)
 80097b2:	f000 f8ce 	bl	8009952 <QSPI_WriteEnable>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e03b      	b.n	8009838 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097c0:	f107 0314 	add.w	r3, r7, #20
 80097c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097c8:	4619      	mov	r1, r3
 80097ca:	481d      	ldr	r0, [pc, #116]	; (8009840 <BSP_QSPI_Write+0x108>)
 80097cc:	f7f9 f93d 	bl	8002a4a <HAL_OSPI_Command>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e02e      	b.n	8009838 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80097da:	f241 3288 	movw	r2, #5000	; 0x1388
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	4817      	ldr	r0, [pc, #92]	; (8009840 <BSP_QSPI_Write+0x108>)
 80097e2:	f7f9 f9b3 	bl	8002b4c <HAL_OSPI_Transmit>
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 80097ec:	2301      	movs	r3, #1
 80097ee:	e023      	b.n	8009838 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80097f0:	f241 3188 	movw	r1, #5000	; 0x1388
 80097f4:	4812      	ldr	r0, [pc, #72]	; (8009840 <BSP_QSPI_Write+0x108>)
 80097f6:	f000 f908 	bl	8009a0a <QSPI_AutoPollingMemReady>
 80097fa:	4603      	mov	r3, r0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d001      	beq.n	8009804 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e019      	b.n	8009838 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8009804:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009808:	4413      	add	r3, r2
 800980a:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009810:	4413      	add	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8009814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009816:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800981a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800981c:	429a      	cmp	r2, r3
 800981e:	d203      	bcs.n	8009828 <BSP_QSPI_Write+0xf0>
 8009820:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009822:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	e001      	b.n	800982c <BSP_QSPI_Write+0xf4>
 8009828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800982c:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800982e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009832:	429a      	cmp	r2, r3
 8009834:	d3b8      	bcc.n	80097a8 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3770      	adds	r7, #112	; 0x70
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	200013e8 	.word	0x200013e8

08009844 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800984a:	4b1c      	ldr	r3, [pc, #112]	; (80098bc <BSP_QSPI_MspInit+0x78>)
 800984c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984e:	4a1b      	ldr	r2, [pc, #108]	; (80098bc <BSP_QSPI_MspInit+0x78>)
 8009850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009854:	6513      	str	r3, [r2, #80]	; 0x50
 8009856:	4b19      	ldr	r3, [pc, #100]	; (80098bc <BSP_QSPI_MspInit+0x78>)
 8009858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800985a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800985e:	60bb      	str	r3, [r7, #8]
 8009860:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8009862:	4b16      	ldr	r3, [pc, #88]	; (80098bc <BSP_QSPI_MspInit+0x78>)
 8009864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009866:	4a15      	ldr	r2, [pc, #84]	; (80098bc <BSP_QSPI_MspInit+0x78>)
 8009868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800986c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800986e:	4b13      	ldr	r3, [pc, #76]	; (80098bc <BSP_QSPI_MspInit+0x78>)
 8009870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009872:	4a12      	ldr	r2, [pc, #72]	; (80098bc <BSP_QSPI_MspInit+0x78>)
 8009874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009878:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800987a:	4b10      	ldr	r3, [pc, #64]	; (80098bc <BSP_QSPI_MspInit+0x78>)
 800987c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800987e:	4a0f      	ldr	r2, [pc, #60]	; (80098bc <BSP_QSPI_MspInit+0x78>)
 8009880:	f043 0310 	orr.w	r3, r3, #16
 8009884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009886:	4b0d      	ldr	r3, [pc, #52]	; (80098bc <BSP_QSPI_MspInit+0x78>)
 8009888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800988a:	f003 0310 	and.w	r3, r3, #16
 800988e:	607b      	str	r3, [r7, #4]
 8009890:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8009892:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8009896:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009898:	2302      	movs	r3, #2
 800989a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80098a0:	2303      	movs	r3, #3
 80098a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80098a4:	230a      	movs	r3, #10
 80098a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80098a8:	f107 030c 	add.w	r3, r7, #12
 80098ac:	4619      	mov	r1, r3
 80098ae:	4804      	ldr	r0, [pc, #16]	; (80098c0 <BSP_QSPI_MspInit+0x7c>)
 80098b0:	f7f7 ff34 	bl	800171c <HAL_GPIO_Init>
}
 80098b4:	bf00      	nop
 80098b6:	3720      	adds	r7, #32
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	40021000 	.word	0x40021000
 80098c0:	48001000 	.word	0x48001000

080098c4 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b096      	sub	sp, #88	; 0x58
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80098cc:	2300      	movs	r3, #0
 80098ce:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80098d0:	2300      	movs	r3, #0
 80098d2:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 80098d4:	2366      	movs	r3, #102	; 0x66
 80098d6:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80098d8:	2301      	movs	r3, #1
 80098da:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80098dc:	2300      	movs	r3, #0
 80098de:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80098e0:	2300      	movs	r3, #0
 80098e2:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80098e4:	2300      	movs	r3, #0
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80098e8:	2300      	movs	r3, #0
 80098ea:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80098ec:	2300      	movs	r3, #0
 80098ee:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80098f0:	2300      	movs	r3, #0
 80098f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80098f4:	2300      	movs	r3, #0
 80098f6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80098f8:	2300      	movs	r3, #0
 80098fa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80098fc:	f107 0308 	add.w	r3, r7, #8
 8009900:	f241 3288 	movw	r2, #5000	; 0x1388
 8009904:	4619      	mov	r1, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7f9 f89f 	bl	8002a4a <HAL_OSPI_Command>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e019      	b.n	800994a <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8009916:	2399      	movs	r3, #153	; 0x99
 8009918:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800991a:	f107 0308 	add.w	r3, r7, #8
 800991e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f7f9 f890 	bl	8002a4a <HAL_OSPI_Command>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e00a      	b.n	800994a <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8009934:	f241 3188 	movw	r1, #5000	; 0x1388
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f000 f866 	bl	8009a0a <QSPI_AutoPollingMemReady>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e000      	b.n	800994a <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	3758      	adds	r7, #88	; 0x58
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b09c      	sub	sp, #112	; 0x70
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800995a:	2300      	movs	r3, #0
 800995c:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800995e:	2300      	movs	r3, #0
 8009960:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8009962:	2306      	movs	r3, #6
 8009964:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009966:	2301      	movs	r3, #1
 8009968:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800996a:	2300      	movs	r3, #0
 800996c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800996e:	2300      	movs	r3, #0
 8009970:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009972:	2300      	movs	r3, #0
 8009974:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009976:	2300      	movs	r3, #0
 8009978:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800997a:	2300      	movs	r3, #0
 800997c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800997e:	2300      	movs	r3, #0
 8009980:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009982:	2300      	movs	r3, #0
 8009984:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009986:	2300      	movs	r3, #0
 8009988:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800998a:	f107 0320 	add.w	r3, r7, #32
 800998e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7f9 f858 	bl	8002a4a <HAL_OSPI_Command>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d001      	beq.n	80099a4 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e02e      	b.n	8009a02 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 80099a4:	2302      	movs	r3, #2
 80099a6:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 80099a8:	2302      	movs	r3, #2
 80099aa:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80099b0:	2310      	movs	r3, #16
 80099b2:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80099b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80099b8:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 80099ba:	2305      	movs	r3, #5
 80099bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 80099be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80099c2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 80099c4:	2301      	movs	r3, #1
 80099c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 80099c8:	2300      	movs	r3, #0
 80099ca:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80099cc:	f107 0320 	add.w	r3, r7, #32
 80099d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7f9 f837 	bl	8002a4a <HAL_OSPI_Command>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e00d      	b.n	8009a02 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80099e6:	f107 030c 	add.w	r3, r7, #12
 80099ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7f9 f9c1 	bl	8002d78 <HAL_OSPI_AutoPolling>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	e000      	b.n	8009a02 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3770      	adds	r7, #112	; 0x70
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b09c      	sub	sp, #112	; 0x70
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009a14:	2300      	movs	r3, #0
 8009a16:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8009a1c:	2305      	movs	r3, #5
 8009a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009a20:	2301      	movs	r3, #1
 8009a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009a24:	2300      	movs	r3, #0
 8009a26:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009a30:	2300      	movs	r3, #0
 8009a32:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8009a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a38:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009a46:	2300      	movs	r3, #0
 8009a48:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8009a52:	2301      	movs	r3, #1
 8009a54:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8009a56:	2300      	movs	r3, #0
 8009a58:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8009a5a:	2310      	movs	r3, #16
 8009a5c:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8009a5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a62:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009a64:	f107 0320 	add.w	r3, r7, #32
 8009a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7f8 ffeb 	bl	8002a4a <HAL_OSPI_Command>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e00c      	b.n	8009a98 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8009a7e:	f107 030c 	add.w	r3, r7, #12
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7f9 f976 	bl	8002d78 <HAL_OSPI_AutoPolling>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e000      	b.n	8009a98 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8009a96:	2300      	movs	r3, #0
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3770      	adds	r7, #112	; 0x70
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b098      	sub	sp, #96	; 0x60
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009aac:	2300      	movs	r3, #0
 8009aae:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8009ab4:	2305      	movs	r3, #5
 8009ab6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009abc:	2300      	movs	r3, #0
 8009abe:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8009acc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8009ada:	2301      	movs	r3, #1
 8009adc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ae6:	f107 0310 	add.w	r3, r7, #16
 8009aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f7f8 ffaa 	bl	8002a4a <HAL_OSPI_Command>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d001      	beq.n	8009b00 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e077      	b.n	8009bf0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b00:	f107 030f 	add.w	r3, r7, #15
 8009b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b08:	4619      	mov	r1, r3
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7f9 f891 	bl	8002c32 <HAL_OSPI_Receive>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8009b16:	2301      	movs	r3, #1
 8009b18:	e06a      	b.n	8009bf0 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f7ff ff19 	bl	8009952 <QSPI_WriteEnable>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	e062      	b.n	8009bf0 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8009b2a:	78fb      	ldrb	r3, [r7, #3]
 8009b2c:	2b01      	cmp	r3, #1
 8009b2e:	d105      	bne.n	8009b3c <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8009b30:	7bfb      	ldrb	r3, [r7, #15]
 8009b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	73fb      	strb	r3, [r7, #15]
 8009b3a:	e004      	b.n	8009b46 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8009b46:	2301      	movs	r3, #1
 8009b48:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b4a:	f107 0310 	add.w	r3, r7, #16
 8009b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f7f8 ff78 	bl	8002a4a <HAL_OSPI_Command>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e045      	b.n	8009bf0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b64:	f107 030f 	add.w	r3, r7, #15
 8009b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7f8 ffec 	bl	8002b4c <HAL_OSPI_Transmit>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e038      	b.n	8009bf0 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8009b7e:	f241 3188 	movw	r1, #5000	; 0x1388
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f7ff ff41 	bl	8009a0a <QSPI_AutoPollingMemReady>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d001      	beq.n	8009b92 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e02e      	b.n	8009bf0 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8009b92:	2305      	movs	r3, #5
 8009b94:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009b96:	f107 0310 	add.w	r3, r7, #16
 8009b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7f8 ff52 	bl	8002a4a <HAL_OSPI_Command>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8009bac:	2301      	movs	r3, #1
 8009bae:	e01f      	b.n	8009bf0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009bb0:	f107 030f 	add.w	r3, r7, #15
 8009bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7f9 f839 	bl	8002c32 <HAL_OSPI_Receive>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e012      	b.n	8009bf0 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d102      	bne.n	8009bda <QSPI_QuadMode+0x13a>
 8009bd4:	78fb      	ldrb	r3, [r7, #3]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d007      	beq.n	8009bea <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d004      	beq.n	8009bee <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d101      	bne.n	8009bee <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e000      	b.n	8009bf0 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3760      	adds	r7, #96	; 0x60
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b098      	sub	sp, #96	; 0x60
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009c04:	2300      	movs	r3, #0
 8009c06:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8009c0c:	2305      	movs	r3, #5
 8009c0e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009c10:	2301      	movs	r3, #1
 8009c12:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009c14:	2300      	movs	r3, #0
 8009c16:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009c20:	2300      	movs	r3, #0
 8009c22:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8009c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c28:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8009c32:	2301      	movs	r3, #1
 8009c34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009c36:	2300      	movs	r3, #0
 8009c38:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c3e:	f107 0310 	add.w	r3, r7, #16
 8009c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f7f8 fefe 	bl	8002a4a <HAL_OSPI_Command>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e09a      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c58:	f107 030c 	add.w	r3, r7, #12
 8009c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c60:	4619      	mov	r1, r3
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7f8 ffe5 	bl	8002c32 <HAL_OSPI_Receive>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e08d      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8009c72:	2315      	movs	r3, #21
 8009c74:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8009c76:	2302      	movs	r3, #2
 8009c78:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c7a:	f107 0310 	add.w	r3, r7, #16
 8009c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c82:	4619      	mov	r1, r3
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7f8 fee0 	bl	8002a4a <HAL_OSPI_Command>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e07c      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009c94:	f107 030c 	add.w	r3, r7, #12
 8009c98:	3301      	adds	r3, #1
 8009c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7f8 ffc6 	bl	8002c32 <HAL_OSPI_Receive>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e06e      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f7ff fe4e 	bl	8009952 <QSPI_WriteEnable>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e066      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8009cc0:	78fb      	ldrb	r3, [r7, #3]
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d105      	bne.n	8009cd2 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	f043 0302 	orr.w	r3, r3, #2
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	73bb      	strb	r3, [r7, #14]
 8009cd0:	e004      	b.n	8009cdc <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	f023 0302 	bic.w	r3, r3, #2
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ce4:	f107 0310 	add.w	r3, r7, #16
 8009ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cec:	4619      	mov	r1, r3
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f7f8 feab 	bl	8002a4a <HAL_OSPI_Command>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e047      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009cfe:	f107 030c 	add.w	r3, r7, #12
 8009d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d06:	4619      	mov	r1, r3
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f7f8 ff1f 	bl	8002b4c <HAL_OSPI_Transmit>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d001      	beq.n	8009d18 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8009d14:	2301      	movs	r3, #1
 8009d16:	e03a      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8009d18:	f241 3188 	movw	r1, #5000	; 0x1388
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff fe74 	bl	8009a0a <QSPI_AutoPollingMemReady>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e030      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8009d2c:	2315      	movs	r3, #21
 8009d2e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8009d30:	2302      	movs	r3, #2
 8009d32:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d34:	f107 0310 	add.w	r3, r7, #16
 8009d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7f8 fe83 	bl	8002a4a <HAL_OSPI_Command>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e01f      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d4e:	f107 030c 	add.w	r3, r7, #12
 8009d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d56:	4619      	mov	r1, r3
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7f8 ff6a 	bl	8002c32 <HAL_OSPI_Receive>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d001      	beq.n	8009d68 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e012      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8009d68:	7b7b      	ldrb	r3, [r7, #13]
 8009d6a:	f003 0302 	and.w	r3, r3, #2
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <QSPI_HighPerfMode+0x180>
 8009d72:	78fb      	ldrb	r3, [r7, #3]
 8009d74:	2b01      	cmp	r3, #1
 8009d76:	d007      	beq.n	8009d88 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8009d78:	7b7b      	ldrb	r3, [r7, #13]
 8009d7a:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d004      	beq.n	8009d8c <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8009d82:	78fb      	ldrb	r3, [r7, #3]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e000      	b.n	8009d8e <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3760      	adds	r7, #96	; 0x60
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d9e:	4b11      	ldr	r3, [pc, #68]	; (8009de4 <HAL_MspInit+0x4c>)
 8009da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009da2:	4a10      	ldr	r2, [pc, #64]	; (8009de4 <HAL_MspInit+0x4c>)
 8009da4:	f043 0301 	orr.w	r3, r3, #1
 8009da8:	6613      	str	r3, [r2, #96]	; 0x60
 8009daa:	4b0e      	ldr	r3, [pc, #56]	; (8009de4 <HAL_MspInit+0x4c>)
 8009dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	607b      	str	r3, [r7, #4]
 8009db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009db6:	4b0b      	ldr	r3, [pc, #44]	; (8009de4 <HAL_MspInit+0x4c>)
 8009db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dba:	4a0a      	ldr	r2, [pc, #40]	; (8009de4 <HAL_MspInit+0x4c>)
 8009dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8009dc2:	4b08      	ldr	r3, [pc, #32]	; (8009de4 <HAL_MspInit+0x4c>)
 8009dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009dce:	2200      	movs	r2, #0
 8009dd0:	210f      	movs	r1, #15
 8009dd2:	f06f 0001 	mvn.w	r0, #1
 8009dd6:	f7f7 fa2f 	bl	8001238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	40021000 	.word	0x40021000

08009de8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08a      	sub	sp, #40	; 0x28
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009df0:	f107 0314 	add.w	r3, r7, #20
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	605a      	str	r2, [r3, #4]
 8009dfa:	609a      	str	r2, [r3, #8]
 8009dfc:	60da      	str	r2, [r3, #12]
 8009dfe:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a19      	ldr	r2, [pc, #100]	; (8009e6c <HAL_DAC_MspInit+0x84>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d12c      	bne.n	8009e64 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8009e0a:	4b19      	ldr	r3, [pc, #100]	; (8009e70 <HAL_DAC_MspInit+0x88>)
 8009e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e0e:	4a18      	ldr	r2, [pc, #96]	; (8009e70 <HAL_DAC_MspInit+0x88>)
 8009e10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e14:	6593      	str	r3, [r2, #88]	; 0x58
 8009e16:	4b16      	ldr	r3, [pc, #88]	; (8009e70 <HAL_DAC_MspInit+0x88>)
 8009e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009e1e:	613b      	str	r3, [r7, #16]
 8009e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e22:	4b13      	ldr	r3, [pc, #76]	; (8009e70 <HAL_DAC_MspInit+0x88>)
 8009e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e26:	4a12      	ldr	r2, [pc, #72]	; (8009e70 <HAL_DAC_MspInit+0x88>)
 8009e28:	f043 0301 	orr.w	r3, r3, #1
 8009e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e2e:	4b10      	ldr	r3, [pc, #64]	; (8009e70 <HAL_DAC_MspInit+0x88>)
 8009e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009e3a:	2310      	movs	r3, #16
 8009e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e42:	2300      	movs	r3, #0
 8009e44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e46:	f107 0314 	add.w	r3, r7, #20
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009e50:	f7f7 fc64 	bl	800171c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8009e54:	2200      	movs	r2, #0
 8009e56:	210f      	movs	r1, #15
 8009e58:	2036      	movs	r0, #54	; 0x36
 8009e5a:	f7f7 f9ed 	bl	8001238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8009e5e:	2036      	movs	r0, #54	; 0x36
 8009e60:	f7f7 fa06 	bl	8001270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8009e64:	bf00      	nop
 8009e66:	3728      	adds	r7, #40	; 0x28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	40007400 	.word	0x40007400
 8009e70:	40021000 	.word	0x40021000

08009e74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b0ae      	sub	sp, #184	; 0xb8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009e80:	2200      	movs	r2, #0
 8009e82:	601a      	str	r2, [r3, #0]
 8009e84:	605a      	str	r2, [r3, #4]
 8009e86:	609a      	str	r2, [r3, #8]
 8009e88:	60da      	str	r2, [r3, #12]
 8009e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009e8c:	f107 0310 	add.w	r3, r7, #16
 8009e90:	2294      	movs	r2, #148	; 0x94
 8009e92:	2100      	movs	r1, #0
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 faf1 	bl	800a47c <memset>
  if(hi2c->Instance==I2C2)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a21      	ldr	r2, [pc, #132]	; (8009f24 <HAL_I2C_MspInit+0xb0>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d13b      	bne.n	8009f1c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009ea4:	2380      	movs	r3, #128	; 0x80
 8009ea6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009eac:	f107 0310 	add.w	r3, r7, #16
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fa f95f 	bl	8004174 <HAL_RCCEx_PeriphCLKConfig>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d001      	beq.n	8009ec0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8009ebc:	f7ff f9c0 	bl	8009240 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ec0:	4b19      	ldr	r3, [pc, #100]	; (8009f28 <HAL_I2C_MspInit+0xb4>)
 8009ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ec4:	4a18      	ldr	r2, [pc, #96]	; (8009f28 <HAL_I2C_MspInit+0xb4>)
 8009ec6:	f043 0302 	orr.w	r3, r3, #2
 8009eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ecc:	4b16      	ldr	r3, [pc, #88]	; (8009f28 <HAL_I2C_MspInit+0xb4>)
 8009ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ed0:	f003 0302 	and.w	r3, r3, #2
 8009ed4:	60fb      	str	r3, [r7, #12]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009ed8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009ee0:	2312      	movs	r3, #18
 8009ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009eec:	2303      	movs	r3, #3
 8009eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009ef2:	2304      	movs	r3, #4
 8009ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ef8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009efc:	4619      	mov	r1, r3
 8009efe:	480b      	ldr	r0, [pc, #44]	; (8009f2c <HAL_I2C_MspInit+0xb8>)
 8009f00:	f7f7 fc0c 	bl	800171c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009f04:	4b08      	ldr	r3, [pc, #32]	; (8009f28 <HAL_I2C_MspInit+0xb4>)
 8009f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f08:	4a07      	ldr	r2, [pc, #28]	; (8009f28 <HAL_I2C_MspInit+0xb4>)
 8009f0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009f0e:	6593      	str	r3, [r2, #88]	; 0x58
 8009f10:	4b05      	ldr	r3, [pc, #20]	; (8009f28 <HAL_I2C_MspInit+0xb4>)
 8009f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f18:	60bb      	str	r3, [r7, #8]
 8009f1a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8009f1c:	bf00      	nop
 8009f1e:	37b8      	adds	r7, #184	; 0xb8
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}
 8009f24:	40005800 	.word	0x40005800
 8009f28:	40021000 	.word	0x40021000
 8009f2c:	48000400 	.word	0x48000400

08009f30 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a0b      	ldr	r2, [pc, #44]	; (8009f6c <HAL_I2C_MspDeInit+0x3c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d10f      	bne.n	8009f62 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8009f42:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <HAL_I2C_MspDeInit+0x40>)
 8009f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f46:	4a0a      	ldr	r2, [pc, #40]	; (8009f70 <HAL_I2C_MspDeInit+0x40>)
 8009f48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009f4c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8009f4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f52:	4808      	ldr	r0, [pc, #32]	; (8009f74 <HAL_I2C_MspDeInit+0x44>)
 8009f54:	f7f7 fd74 	bl	8001a40 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8009f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009f5c:	4805      	ldr	r0, [pc, #20]	; (8009f74 <HAL_I2C_MspDeInit+0x44>)
 8009f5e:	f7f7 fd6f 	bl	8001a40 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8009f62:	bf00      	nop
 8009f64:	3708      	adds	r7, #8
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	40005800 	.word	0x40005800
 8009f70:	40021000 	.word	0x40021000
 8009f74:	48000400 	.word	0x48000400

08009f78 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b0aa      	sub	sp, #168	; 0xa8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009f80:	f107 0314 	add.w	r3, r7, #20
 8009f84:	2294      	movs	r2, #148	; 0x94
 8009f86:	2100      	movs	r1, #0
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 fa77 	bl	800a47c <memset>
  if(hospi->Instance==OCTOSPI1)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a17      	ldr	r2, [pc, #92]	; (8009ff0 <HAL_OSPI_MspInit+0x78>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d127      	bne.n	8009fe8 <HAL_OSPI_MspInit+0x70>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8009f98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f9c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009fa4:	f107 0314 	add.w	r3, r7, #20
 8009fa8:	4618      	mov	r0, r3
 8009faa:	f7fa f8e3 	bl	8004174 <HAL_RCCEx_PeriphCLKConfig>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <HAL_OSPI_MspInit+0x40>
    {
      Error_Handler();
 8009fb4:	f7ff f944 	bl	8009240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8009fb8:	4b0e      	ldr	r3, [pc, #56]	; (8009ff4 <HAL_OSPI_MspInit+0x7c>)
 8009fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fbc:	4a0d      	ldr	r2, [pc, #52]	; (8009ff4 <HAL_OSPI_MspInit+0x7c>)
 8009fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fc4:	4b0b      	ldr	r3, [pc, #44]	; (8009ff4 <HAL_OSPI_MspInit+0x7c>)
 8009fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009fcc:	613b      	str	r3, [r7, #16]
 8009fce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8009fd0:	4b08      	ldr	r3, [pc, #32]	; (8009ff4 <HAL_OSPI_MspInit+0x7c>)
 8009fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd4:	4a07      	ldr	r2, [pc, #28]	; (8009ff4 <HAL_OSPI_MspInit+0x7c>)
 8009fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fda:	6513      	str	r3, [r2, #80]	; 0x50
 8009fdc:	4b05      	ldr	r3, [pc, #20]	; (8009ff4 <HAL_OSPI_MspInit+0x7c>)
 8009fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8009fe8:	bf00      	nop
 8009fea:	37a8      	adds	r7, #168	; 0xa8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	a0001000 	.word	0xa0001000
 8009ff4:	40021000 	.word	0x40021000

08009ff8 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	4a0a      	ldr	r2, [pc, #40]	; (800a030 <HAL_OSPI_MspDeInit+0x38>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d10b      	bne.n	800a022 <HAL_OSPI_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800a00a:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <HAL_OSPI_MspDeInit+0x3c>)
 800a00c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a00e:	4a09      	ldr	r2, [pc, #36]	; (800a034 <HAL_OSPI_MspDeInit+0x3c>)
 800a010:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a014:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800a016:	4b07      	ldr	r3, [pc, #28]	; (800a034 <HAL_OSPI_MspDeInit+0x3c>)
 800a018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01a:	4a06      	ldr	r2, [pc, #24]	; (800a034 <HAL_OSPI_MspDeInit+0x3c>)
 800a01c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a020:	6513      	str	r3, [r2, #80]	; 0x50
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 800a022:	bf00      	nop
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	a0001000 	.word	0xa0001000
 800a034:	40021000 	.word	0x40021000

0800a038 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a048:	d113      	bne.n	800a072 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a04a:	4b0c      	ldr	r3, [pc, #48]	; (800a07c <HAL_TIM_Base_MspInit+0x44>)
 800a04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a04e:	4a0b      	ldr	r2, [pc, #44]	; (800a07c <HAL_TIM_Base_MspInit+0x44>)
 800a050:	f043 0301 	orr.w	r3, r3, #1
 800a054:	6593      	str	r3, [r2, #88]	; 0x58
 800a056:	4b09      	ldr	r3, [pc, #36]	; (800a07c <HAL_TIM_Base_MspInit+0x44>)
 800a058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a05a:	f003 0301 	and.w	r3, r3, #1
 800a05e:	60fb      	str	r3, [r7, #12]
 800a060:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800a062:	2200      	movs	r2, #0
 800a064:	2105      	movs	r1, #5
 800a066:	201c      	movs	r0, #28
 800a068:	f7f7 f8e6 	bl	8001238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a06c:	201c      	movs	r0, #28
 800a06e:	f7f7 f8ff 	bl	8001270 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800a072:	bf00      	nop
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	40021000 	.word	0x40021000

0800a080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b0ae      	sub	sp, #184	; 0xb8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a088:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a08c:	2200      	movs	r2, #0
 800a08e:	601a      	str	r2, [r3, #0]
 800a090:	605a      	str	r2, [r3, #4]
 800a092:	609a      	str	r2, [r3, #8]
 800a094:	60da      	str	r2, [r3, #12]
 800a096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a098:	f107 0310 	add.w	r3, r7, #16
 800a09c:	2294      	movs	r2, #148	; 0x94
 800a09e:	2100      	movs	r1, #0
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 f9eb 	bl	800a47c <memset>
  if(huart->Instance==USART1)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a21      	ldr	r2, [pc, #132]	; (800a130 <HAL_UART_MspInit+0xb0>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d13a      	bne.n	800a126 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a0b8:	f107 0310 	add.w	r3, r7, #16
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7fa f859 	bl	8004174 <HAL_RCCEx_PeriphCLKConfig>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a0c8:	f7ff f8ba 	bl	8009240 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a0cc:	4b19      	ldr	r3, [pc, #100]	; (800a134 <HAL_UART_MspInit+0xb4>)
 800a0ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0d0:	4a18      	ldr	r2, [pc, #96]	; (800a134 <HAL_UART_MspInit+0xb4>)
 800a0d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0d6:	6613      	str	r3, [r2, #96]	; 0x60
 800a0d8:	4b16      	ldr	r3, [pc, #88]	; (800a134 <HAL_UART_MspInit+0xb4>)
 800a0da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0e0:	60fb      	str	r3, [r7, #12]
 800a0e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0e4:	4b13      	ldr	r3, [pc, #76]	; (800a134 <HAL_UART_MspInit+0xb4>)
 800a0e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0e8:	4a12      	ldr	r2, [pc, #72]	; (800a134 <HAL_UART_MspInit+0xb4>)
 800a0ea:	f043 0302 	orr.w	r3, r3, #2
 800a0ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a0f0:	4b10      	ldr	r3, [pc, #64]	; (800a134 <HAL_UART_MspInit+0xb4>)
 800a0f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f4:	f003 0302 	and.w	r3, r3, #2
 800a0f8:	60bb      	str	r3, [r7, #8]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a0fc:	23c0      	movs	r3, #192	; 0xc0
 800a0fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a102:	2302      	movs	r3, #2
 800a104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a108:	2300      	movs	r3, #0
 800a10a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a10e:	2303      	movs	r3, #3
 800a110:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a114:	2307      	movs	r3, #7
 800a116:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a11a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a11e:	4619      	mov	r1, r3
 800a120:	4805      	ldr	r0, [pc, #20]	; (800a138 <HAL_UART_MspInit+0xb8>)
 800a122:	f7f7 fafb 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a126:	bf00      	nop
 800a128:	37b8      	adds	r7, #184	; 0xb8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	40013800 	.word	0x40013800
 800a134:	40021000 	.word	0x40021000
 800a138:	48000400 	.word	0x48000400

0800a13c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08e      	sub	sp, #56	; 0x38
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a14a:	4b34      	ldr	r3, [pc, #208]	; (800a21c <HAL_InitTick+0xe0>)
 800a14c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a14e:	4a33      	ldr	r2, [pc, #204]	; (800a21c <HAL_InitTick+0xe0>)
 800a150:	f043 0310 	orr.w	r3, r3, #16
 800a154:	6593      	str	r3, [r2, #88]	; 0x58
 800a156:	4b31      	ldr	r3, [pc, #196]	; (800a21c <HAL_InitTick+0xe0>)
 800a158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a15a:	f003 0310 	and.w	r3, r3, #16
 800a15e:	60fb      	str	r3, [r7, #12]
 800a160:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a162:	f107 0210 	add.w	r2, r7, #16
 800a166:	f107 0314 	add.w	r3, r7, #20
 800a16a:	4611      	mov	r1, r2
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7f9 ff0f 	bl	8003f90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800a172:	6a3b      	ldr	r3, [r7, #32]
 800a174:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800a176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d103      	bne.n	800a184 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800a17c:	f7f9 fedc 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 800a180:	6378      	str	r0, [r7, #52]	; 0x34
 800a182:	e004      	b.n	800a18e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800a184:	f7f9 fed8 	bl	8003f38 <HAL_RCC_GetPCLK1Freq>
 800a188:	4603      	mov	r3, r0
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a190:	4a23      	ldr	r2, [pc, #140]	; (800a220 <HAL_InitTick+0xe4>)
 800a192:	fba2 2303 	umull	r2, r3, r2, r3
 800a196:	0c9b      	lsrs	r3, r3, #18
 800a198:	3b01      	subs	r3, #1
 800a19a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800a19c:	4b21      	ldr	r3, [pc, #132]	; (800a224 <HAL_InitTick+0xe8>)
 800a19e:	4a22      	ldr	r2, [pc, #136]	; (800a228 <HAL_InitTick+0xec>)
 800a1a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800a1a2:	4b20      	ldr	r3, [pc, #128]	; (800a224 <HAL_InitTick+0xe8>)
 800a1a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a1a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800a1aa:	4a1e      	ldr	r2, [pc, #120]	; (800a224 <HAL_InitTick+0xe8>)
 800a1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800a1b0:	4b1c      	ldr	r3, [pc, #112]	; (800a224 <HAL_InitTick+0xe8>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1b6:	4b1b      	ldr	r3, [pc, #108]	; (800a224 <HAL_InitTick+0xe8>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1bc:	4b19      	ldr	r3, [pc, #100]	; (800a224 <HAL_InitTick+0xe8>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800a1c2:	4818      	ldr	r0, [pc, #96]	; (800a224 <HAL_InitTick+0xe8>)
 800a1c4:	f7fa fcee 	bl	8004ba4 <HAL_TIM_Base_Init>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800a1ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d11b      	bne.n	800a20e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800a1d6:	4813      	ldr	r0, [pc, #76]	; (800a224 <HAL_InitTick+0xe8>)
 800a1d8:	f7fa fd3c 	bl	8004c54 <HAL_TIM_Base_Start_IT>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800a1e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d111      	bne.n	800a20e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a1ea:	2036      	movs	r0, #54	; 0x36
 800a1ec:	f7f7 f840 	bl	8001270 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b0f      	cmp	r3, #15
 800a1f4:	d808      	bhi.n	800a208 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	6879      	ldr	r1, [r7, #4]
 800a1fa:	2036      	movs	r0, #54	; 0x36
 800a1fc:	f7f7 f81c 	bl	8001238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a200:	4a0a      	ldr	r2, [pc, #40]	; (800a22c <HAL_InitTick+0xf0>)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	e002      	b.n	800a20e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800a20e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800a212:	4618      	mov	r0, r3
 800a214:	3738      	adds	r7, #56	; 0x38
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	40021000 	.word	0x40021000
 800a220:	431bde83 	.word	0x431bde83
 800a224:	20001438 	.word	0x20001438
 800a228:	40001000 	.word	0x40001000
 800a22c:	20000034 	.word	0x20000034

0800a230 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a234:	e7fe      	b.n	800a234 <NMI_Handler+0x4>

0800a236 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a236:	b480      	push	{r7}
 800a238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a23a:	e7fe      	b.n	800a23a <HardFault_Handler+0x4>

0800a23c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a23c:	b480      	push	{r7}
 800a23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a240:	e7fe      	b.n	800a240 <MemManage_Handler+0x4>

0800a242 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a242:	b480      	push	{r7}
 800a244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a246:	e7fe      	b.n	800a246 <BusFault_Handler+0x4>

0800a248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a248:	b480      	push	{r7}
 800a24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a24c:	e7fe      	b.n	800a24c <UsageFault_Handler+0x4>

0800a24e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a24e:	b480      	push	{r7}
 800a250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a252:	bf00      	nop
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a260:	4802      	ldr	r0, [pc, #8]	; (800a26c <TIM2_IRQHandler+0x10>)
 800a262:	f7fa fd67 	bl	8004d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a266:	bf00      	nop
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20001170 	.word	0x20001170

0800a270 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800a274:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800a278:	f7f7 fcd4 	bl	8001c24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a27c:	bf00      	nop
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a284:	4803      	ldr	r0, [pc, #12]	; (800a294 <TIM6_DAC_IRQHandler+0x14>)
 800a286:	f7fa fd55 	bl	8004d34 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800a28a:	4803      	ldr	r0, [pc, #12]	; (800a298 <TIM6_DAC_IRQHandler+0x18>)
 800a28c:	f7f7 f872 	bl	8001374 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a290:	bf00      	nop
 800a292:	bd80      	pop	{r7, pc}
 800a294:	20001438 	.word	0x20001438
 800a298:	200010b8 	.word	0x200010b8

0800a29c <_sbrk>:
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	4a14      	ldr	r2, [pc, #80]	; (800a2f8 <_sbrk+0x5c>)
 800a2a6:	4b15      	ldr	r3, [pc, #84]	; (800a2fc <_sbrk+0x60>)
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	617b      	str	r3, [r7, #20]
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	613b      	str	r3, [r7, #16]
 800a2b0:	4b13      	ldr	r3, [pc, #76]	; (800a300 <_sbrk+0x64>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d102      	bne.n	800a2be <_sbrk+0x22>
 800a2b8:	4b11      	ldr	r3, [pc, #68]	; (800a300 <_sbrk+0x64>)
 800a2ba:	4a12      	ldr	r2, [pc, #72]	; (800a304 <_sbrk+0x68>)
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	4b10      	ldr	r3, [pc, #64]	; (800a300 <_sbrk+0x64>)
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d207      	bcs.n	800a2dc <_sbrk+0x40>
 800a2cc:	f000 f89e 	bl	800a40c <__errno>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	220c      	movs	r2, #12
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2da:	e009      	b.n	800a2f0 <_sbrk+0x54>
 800a2dc:	4b08      	ldr	r3, [pc, #32]	; (800a300 <_sbrk+0x64>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	60fb      	str	r3, [r7, #12]
 800a2e2:	4b07      	ldr	r3, [pc, #28]	; (800a300 <_sbrk+0x64>)
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	4a05      	ldr	r2, [pc, #20]	; (800a300 <_sbrk+0x64>)
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	200a0000 	.word	0x200a0000
 800a2fc:	00000400 	.word	0x00000400
 800a300:	20001484 	.word	0x20001484
 800a304:	20001498 	.word	0x20001498

0800a308 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800a308:	b480      	push	{r7}
 800a30a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800a30c:	4b06      	ldr	r3, [pc, #24]	; (800a328 <SystemInit+0x20>)
 800a30e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a312:	4a05      	ldr	r2, [pc, #20]	; (800a328 <SystemInit+0x20>)
 800a314:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a318:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800a31c:	bf00      	nop
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	e000ed00 	.word	0xe000ed00

0800a32c <Reset_Handler>:
 800a32c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a364 <LoopForever+0x2>
 800a330:	f7ff ffea 	bl	800a308 <SystemInit>
 800a334:	480c      	ldr	r0, [pc, #48]	; (800a368 <LoopForever+0x6>)
 800a336:	490d      	ldr	r1, [pc, #52]	; (800a36c <LoopForever+0xa>)
 800a338:	4a0d      	ldr	r2, [pc, #52]	; (800a370 <LoopForever+0xe>)
 800a33a:	2300      	movs	r3, #0
 800a33c:	e002      	b.n	800a344 <LoopCopyDataInit>

0800a33e <CopyDataInit>:
 800a33e:	58d4      	ldr	r4, [r2, r3]
 800a340:	50c4      	str	r4, [r0, r3]
 800a342:	3304      	adds	r3, #4

0800a344 <LoopCopyDataInit>:
 800a344:	18c4      	adds	r4, r0, r3
 800a346:	428c      	cmp	r4, r1
 800a348:	d3f9      	bcc.n	800a33e <CopyDataInit>
 800a34a:	4a0a      	ldr	r2, [pc, #40]	; (800a374 <LoopForever+0x12>)
 800a34c:	4c0a      	ldr	r4, [pc, #40]	; (800a378 <LoopForever+0x16>)
 800a34e:	2300      	movs	r3, #0
 800a350:	e001      	b.n	800a356 <LoopFillZerobss>

0800a352 <FillZerobss>:
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	3204      	adds	r2, #4

0800a356 <LoopFillZerobss>:
 800a356:	42a2      	cmp	r2, r4
 800a358:	d3fb      	bcc.n	800a352 <FillZerobss>
 800a35a:	f000 f85d 	bl	800a418 <__libc_init_array>
 800a35e:	f7fe fb1f 	bl	80089a0 <main>

0800a362 <LoopForever>:
 800a362:	e7fe      	b.n	800a362 <LoopForever>
 800a364:	200a0000 	.word	0x200a0000
 800a368:	20000000 	.word	0x20000000
 800a36c:	20000138 	.word	0x20000138
 800a370:	0800b6f4 	.word	0x0800b6f4
 800a374:	20000138 	.word	0x20000138
 800a378:	20001498 	.word	0x20001498

0800a37c <ADC1_IRQHandler>:
 800a37c:	e7fe      	b.n	800a37c <ADC1_IRQHandler>
	...

0800a380 <arm_sin_f32>:
 800a380:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800a400 <arm_sin_f32+0x80>
 800a384:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a388:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a390:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800a394:	d504      	bpl.n	800a3a0 <arm_sin_f32+0x20>
 800a396:	ee17 3a90 	vmov	r3, s15
 800a39a:	3b01      	subs	r3, #1
 800a39c:	ee07 3a90 	vmov	s15, r3
 800a3a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a3a4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800a404 <arm_sin_f32+0x84>
 800a3a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a3ac:	ee20 0a07 	vmul.f32	s0, s0, s14
 800a3b0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800a3b4:	ee17 3a90 	vmov	r3, s15
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3be:	d21a      	bcs.n	800a3f6 <arm_sin_f32+0x76>
 800a3c0:	ee07 3a90 	vmov	s15, r3
 800a3c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3c8:	1c59      	adds	r1, r3, #1
 800a3ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a3ce:	4a0e      	ldr	r2, [pc, #56]	; (800a408 <arm_sin_f32+0x88>)
 800a3d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a3d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3d8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800a3dc:	ed93 7a00 	vldr	s14, [r3]
 800a3e0:	edd2 6a00 	vldr	s13, [r2]
 800a3e4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a3e8:	ee20 0a26 	vmul.f32	s0, s0, s13
 800a3ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a3f0:	ee37 0a80 	vadd.f32	s0, s15, s0
 800a3f4:	4770      	bx	lr
 800a3f6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a3fa:	2101      	movs	r1, #1
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	e7e6      	b.n	800a3ce <arm_sin_f32+0x4e>
 800a400:	3e22f983 	.word	0x3e22f983
 800a404:	44000000 	.word	0x44000000
 800a408:	0800aeac 	.word	0x0800aeac

0800a40c <__errno>:
 800a40c:	4b01      	ldr	r3, [pc, #4]	; (800a414 <__errno+0x8>)
 800a40e:	6818      	ldr	r0, [r3, #0]
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	200000d4 	.word	0x200000d4

0800a418 <__libc_init_array>:
 800a418:	b570      	push	{r4, r5, r6, lr}
 800a41a:	4d0d      	ldr	r5, [pc, #52]	; (800a450 <__libc_init_array+0x38>)
 800a41c:	4c0d      	ldr	r4, [pc, #52]	; (800a454 <__libc_init_array+0x3c>)
 800a41e:	1b64      	subs	r4, r4, r5
 800a420:	10a4      	asrs	r4, r4, #2
 800a422:	2600      	movs	r6, #0
 800a424:	42a6      	cmp	r6, r4
 800a426:	d109      	bne.n	800a43c <__libc_init_array+0x24>
 800a428:	4d0b      	ldr	r5, [pc, #44]	; (800a458 <__libc_init_array+0x40>)
 800a42a:	4c0c      	ldr	r4, [pc, #48]	; (800a45c <__libc_init_array+0x44>)
 800a42c:	f000 fc8e 	bl	800ad4c <_init>
 800a430:	1b64      	subs	r4, r4, r5
 800a432:	10a4      	asrs	r4, r4, #2
 800a434:	2600      	movs	r6, #0
 800a436:	42a6      	cmp	r6, r4
 800a438:	d105      	bne.n	800a446 <__libc_init_array+0x2e>
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
 800a43c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a440:	4798      	blx	r3
 800a442:	3601      	adds	r6, #1
 800a444:	e7ee      	b.n	800a424 <__libc_init_array+0xc>
 800a446:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44a:	4798      	blx	r3
 800a44c:	3601      	adds	r6, #1
 800a44e:	e7f2      	b.n	800a436 <__libc_init_array+0x1e>
 800a450:	0800b6ec 	.word	0x0800b6ec
 800a454:	0800b6ec 	.word	0x0800b6ec
 800a458:	0800b6ec 	.word	0x0800b6ec
 800a45c:	0800b6f0 	.word	0x0800b6f0

0800a460 <memcpy>:
 800a460:	440a      	add	r2, r1
 800a462:	4291      	cmp	r1, r2
 800a464:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a468:	d100      	bne.n	800a46c <memcpy+0xc>
 800a46a:	4770      	bx	lr
 800a46c:	b510      	push	{r4, lr}
 800a46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a472:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a476:	4291      	cmp	r1, r2
 800a478:	d1f9      	bne.n	800a46e <memcpy+0xe>
 800a47a:	bd10      	pop	{r4, pc}

0800a47c <memset>:
 800a47c:	4402      	add	r2, r0
 800a47e:	4603      	mov	r3, r0
 800a480:	4293      	cmp	r3, r2
 800a482:	d100      	bne.n	800a486 <memset+0xa>
 800a484:	4770      	bx	lr
 800a486:	f803 1b01 	strb.w	r1, [r3], #1
 800a48a:	e7f9      	b.n	800a480 <memset+0x4>

0800a48c <siprintf>:
 800a48c:	b40e      	push	{r1, r2, r3}
 800a48e:	b500      	push	{lr}
 800a490:	b09c      	sub	sp, #112	; 0x70
 800a492:	ab1d      	add	r3, sp, #116	; 0x74
 800a494:	9002      	str	r0, [sp, #8]
 800a496:	9006      	str	r0, [sp, #24]
 800a498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a49c:	4809      	ldr	r0, [pc, #36]	; (800a4c4 <siprintf+0x38>)
 800a49e:	9107      	str	r1, [sp, #28]
 800a4a0:	9104      	str	r1, [sp, #16]
 800a4a2:	4909      	ldr	r1, [pc, #36]	; (800a4c8 <siprintf+0x3c>)
 800a4a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4a8:	9105      	str	r1, [sp, #20]
 800a4aa:	6800      	ldr	r0, [r0, #0]
 800a4ac:	9301      	str	r3, [sp, #4]
 800a4ae:	a902      	add	r1, sp, #8
 800a4b0:	f000 f868 	bl	800a584 <_svfiprintf_r>
 800a4b4:	9b02      	ldr	r3, [sp, #8]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	701a      	strb	r2, [r3, #0]
 800a4ba:	b01c      	add	sp, #112	; 0x70
 800a4bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4c0:	b003      	add	sp, #12
 800a4c2:	4770      	bx	lr
 800a4c4:	200000d4 	.word	0x200000d4
 800a4c8:	ffff0208 	.word	0xffff0208

0800a4cc <__ssputs_r>:
 800a4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d0:	688e      	ldr	r6, [r1, #8]
 800a4d2:	429e      	cmp	r6, r3
 800a4d4:	4682      	mov	sl, r0
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	4690      	mov	r8, r2
 800a4da:	461f      	mov	r7, r3
 800a4dc:	d838      	bhi.n	800a550 <__ssputs_r+0x84>
 800a4de:	898a      	ldrh	r2, [r1, #12]
 800a4e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4e4:	d032      	beq.n	800a54c <__ssputs_r+0x80>
 800a4e6:	6825      	ldr	r5, [r4, #0]
 800a4e8:	6909      	ldr	r1, [r1, #16]
 800a4ea:	eba5 0901 	sub.w	r9, r5, r1
 800a4ee:	6965      	ldr	r5, [r4, #20]
 800a4f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	444b      	add	r3, r9
 800a4fc:	106d      	asrs	r5, r5, #1
 800a4fe:	429d      	cmp	r5, r3
 800a500:	bf38      	it	cc
 800a502:	461d      	movcc	r5, r3
 800a504:	0553      	lsls	r3, r2, #21
 800a506:	d531      	bpl.n	800a56c <__ssputs_r+0xa0>
 800a508:	4629      	mov	r1, r5
 800a50a:	f000 fb55 	bl	800abb8 <_malloc_r>
 800a50e:	4606      	mov	r6, r0
 800a510:	b950      	cbnz	r0, 800a528 <__ssputs_r+0x5c>
 800a512:	230c      	movs	r3, #12
 800a514:	f8ca 3000 	str.w	r3, [sl]
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a528:	6921      	ldr	r1, [r4, #16]
 800a52a:	464a      	mov	r2, r9
 800a52c:	f7ff ff98 	bl	800a460 <memcpy>
 800a530:	89a3      	ldrh	r3, [r4, #12]
 800a532:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a53a:	81a3      	strh	r3, [r4, #12]
 800a53c:	6126      	str	r6, [r4, #16]
 800a53e:	6165      	str	r5, [r4, #20]
 800a540:	444e      	add	r6, r9
 800a542:	eba5 0509 	sub.w	r5, r5, r9
 800a546:	6026      	str	r6, [r4, #0]
 800a548:	60a5      	str	r5, [r4, #8]
 800a54a:	463e      	mov	r6, r7
 800a54c:	42be      	cmp	r6, r7
 800a54e:	d900      	bls.n	800a552 <__ssputs_r+0x86>
 800a550:	463e      	mov	r6, r7
 800a552:	6820      	ldr	r0, [r4, #0]
 800a554:	4632      	mov	r2, r6
 800a556:	4641      	mov	r1, r8
 800a558:	f000 faa8 	bl	800aaac <memmove>
 800a55c:	68a3      	ldr	r3, [r4, #8]
 800a55e:	1b9b      	subs	r3, r3, r6
 800a560:	60a3      	str	r3, [r4, #8]
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	4433      	add	r3, r6
 800a566:	6023      	str	r3, [r4, #0]
 800a568:	2000      	movs	r0, #0
 800a56a:	e7db      	b.n	800a524 <__ssputs_r+0x58>
 800a56c:	462a      	mov	r2, r5
 800a56e:	f000 fb97 	bl	800aca0 <_realloc_r>
 800a572:	4606      	mov	r6, r0
 800a574:	2800      	cmp	r0, #0
 800a576:	d1e1      	bne.n	800a53c <__ssputs_r+0x70>
 800a578:	6921      	ldr	r1, [r4, #16]
 800a57a:	4650      	mov	r0, sl
 800a57c:	f000 fab0 	bl	800aae0 <_free_r>
 800a580:	e7c7      	b.n	800a512 <__ssputs_r+0x46>
	...

0800a584 <_svfiprintf_r>:
 800a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	4698      	mov	r8, r3
 800a58a:	898b      	ldrh	r3, [r1, #12]
 800a58c:	061b      	lsls	r3, r3, #24
 800a58e:	b09d      	sub	sp, #116	; 0x74
 800a590:	4607      	mov	r7, r0
 800a592:	460d      	mov	r5, r1
 800a594:	4614      	mov	r4, r2
 800a596:	d50e      	bpl.n	800a5b6 <_svfiprintf_r+0x32>
 800a598:	690b      	ldr	r3, [r1, #16]
 800a59a:	b963      	cbnz	r3, 800a5b6 <_svfiprintf_r+0x32>
 800a59c:	2140      	movs	r1, #64	; 0x40
 800a59e:	f000 fb0b 	bl	800abb8 <_malloc_r>
 800a5a2:	6028      	str	r0, [r5, #0]
 800a5a4:	6128      	str	r0, [r5, #16]
 800a5a6:	b920      	cbnz	r0, 800a5b2 <_svfiprintf_r+0x2e>
 800a5a8:	230c      	movs	r3, #12
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5b0:	e0d1      	b.n	800a756 <_svfiprintf_r+0x1d2>
 800a5b2:	2340      	movs	r3, #64	; 0x40
 800a5b4:	616b      	str	r3, [r5, #20]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ba:	2320      	movs	r3, #32
 800a5bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5c4:	2330      	movs	r3, #48	; 0x30
 800a5c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a770 <_svfiprintf_r+0x1ec>
 800a5ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5ce:	f04f 0901 	mov.w	r9, #1
 800a5d2:	4623      	mov	r3, r4
 800a5d4:	469a      	mov	sl, r3
 800a5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5da:	b10a      	cbz	r2, 800a5e0 <_svfiprintf_r+0x5c>
 800a5dc:	2a25      	cmp	r2, #37	; 0x25
 800a5de:	d1f9      	bne.n	800a5d4 <_svfiprintf_r+0x50>
 800a5e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a5e4:	d00b      	beq.n	800a5fe <_svfiprintf_r+0x7a>
 800a5e6:	465b      	mov	r3, fp
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f7ff ff6d 	bl	800a4cc <__ssputs_r>
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	f000 80aa 	beq.w	800a74c <_svfiprintf_r+0x1c8>
 800a5f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5fa:	445a      	add	r2, fp
 800a5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a602:	2b00      	cmp	r3, #0
 800a604:	f000 80a2 	beq.w	800a74c <_svfiprintf_r+0x1c8>
 800a608:	2300      	movs	r3, #0
 800a60a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a60e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a612:	f10a 0a01 	add.w	sl, sl, #1
 800a616:	9304      	str	r3, [sp, #16]
 800a618:	9307      	str	r3, [sp, #28]
 800a61a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a61e:	931a      	str	r3, [sp, #104]	; 0x68
 800a620:	4654      	mov	r4, sl
 800a622:	2205      	movs	r2, #5
 800a624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a628:	4851      	ldr	r0, [pc, #324]	; (800a770 <_svfiprintf_r+0x1ec>)
 800a62a:	f7f5 fde9 	bl	8000200 <memchr>
 800a62e:	9a04      	ldr	r2, [sp, #16]
 800a630:	b9d8      	cbnz	r0, 800a66a <_svfiprintf_r+0xe6>
 800a632:	06d0      	lsls	r0, r2, #27
 800a634:	bf44      	itt	mi
 800a636:	2320      	movmi	r3, #32
 800a638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a63c:	0711      	lsls	r1, r2, #28
 800a63e:	bf44      	itt	mi
 800a640:	232b      	movmi	r3, #43	; 0x2b
 800a642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a646:	f89a 3000 	ldrb.w	r3, [sl]
 800a64a:	2b2a      	cmp	r3, #42	; 0x2a
 800a64c:	d015      	beq.n	800a67a <_svfiprintf_r+0xf6>
 800a64e:	9a07      	ldr	r2, [sp, #28]
 800a650:	4654      	mov	r4, sl
 800a652:	2000      	movs	r0, #0
 800a654:	f04f 0c0a 	mov.w	ip, #10
 800a658:	4621      	mov	r1, r4
 800a65a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a65e:	3b30      	subs	r3, #48	; 0x30
 800a660:	2b09      	cmp	r3, #9
 800a662:	d94e      	bls.n	800a702 <_svfiprintf_r+0x17e>
 800a664:	b1b0      	cbz	r0, 800a694 <_svfiprintf_r+0x110>
 800a666:	9207      	str	r2, [sp, #28]
 800a668:	e014      	b.n	800a694 <_svfiprintf_r+0x110>
 800a66a:	eba0 0308 	sub.w	r3, r0, r8
 800a66e:	fa09 f303 	lsl.w	r3, r9, r3
 800a672:	4313      	orrs	r3, r2
 800a674:	9304      	str	r3, [sp, #16]
 800a676:	46a2      	mov	sl, r4
 800a678:	e7d2      	b.n	800a620 <_svfiprintf_r+0x9c>
 800a67a:	9b03      	ldr	r3, [sp, #12]
 800a67c:	1d19      	adds	r1, r3, #4
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	9103      	str	r1, [sp, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	bfbb      	ittet	lt
 800a686:	425b      	neglt	r3, r3
 800a688:	f042 0202 	orrlt.w	r2, r2, #2
 800a68c:	9307      	strge	r3, [sp, #28]
 800a68e:	9307      	strlt	r3, [sp, #28]
 800a690:	bfb8      	it	lt
 800a692:	9204      	strlt	r2, [sp, #16]
 800a694:	7823      	ldrb	r3, [r4, #0]
 800a696:	2b2e      	cmp	r3, #46	; 0x2e
 800a698:	d10c      	bne.n	800a6b4 <_svfiprintf_r+0x130>
 800a69a:	7863      	ldrb	r3, [r4, #1]
 800a69c:	2b2a      	cmp	r3, #42	; 0x2a
 800a69e:	d135      	bne.n	800a70c <_svfiprintf_r+0x188>
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	1d1a      	adds	r2, r3, #4
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	9203      	str	r2, [sp, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bfb8      	it	lt
 800a6ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a6b0:	3402      	adds	r4, #2
 800a6b2:	9305      	str	r3, [sp, #20]
 800a6b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a780 <_svfiprintf_r+0x1fc>
 800a6b8:	7821      	ldrb	r1, [r4, #0]
 800a6ba:	2203      	movs	r2, #3
 800a6bc:	4650      	mov	r0, sl
 800a6be:	f7f5 fd9f 	bl	8000200 <memchr>
 800a6c2:	b140      	cbz	r0, 800a6d6 <_svfiprintf_r+0x152>
 800a6c4:	2340      	movs	r3, #64	; 0x40
 800a6c6:	eba0 000a 	sub.w	r0, r0, sl
 800a6ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a6ce:	9b04      	ldr	r3, [sp, #16]
 800a6d0:	4303      	orrs	r3, r0
 800a6d2:	3401      	adds	r4, #1
 800a6d4:	9304      	str	r3, [sp, #16]
 800a6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6da:	4826      	ldr	r0, [pc, #152]	; (800a774 <_svfiprintf_r+0x1f0>)
 800a6dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6e0:	2206      	movs	r2, #6
 800a6e2:	f7f5 fd8d 	bl	8000200 <memchr>
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d038      	beq.n	800a75c <_svfiprintf_r+0x1d8>
 800a6ea:	4b23      	ldr	r3, [pc, #140]	; (800a778 <_svfiprintf_r+0x1f4>)
 800a6ec:	bb1b      	cbnz	r3, 800a736 <_svfiprintf_r+0x1b2>
 800a6ee:	9b03      	ldr	r3, [sp, #12]
 800a6f0:	3307      	adds	r3, #7
 800a6f2:	f023 0307 	bic.w	r3, r3, #7
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	9303      	str	r3, [sp, #12]
 800a6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fc:	4433      	add	r3, r6
 800a6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a700:	e767      	b.n	800a5d2 <_svfiprintf_r+0x4e>
 800a702:	fb0c 3202 	mla	r2, ip, r2, r3
 800a706:	460c      	mov	r4, r1
 800a708:	2001      	movs	r0, #1
 800a70a:	e7a5      	b.n	800a658 <_svfiprintf_r+0xd4>
 800a70c:	2300      	movs	r3, #0
 800a70e:	3401      	adds	r4, #1
 800a710:	9305      	str	r3, [sp, #20]
 800a712:	4619      	mov	r1, r3
 800a714:	f04f 0c0a 	mov.w	ip, #10
 800a718:	4620      	mov	r0, r4
 800a71a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a71e:	3a30      	subs	r2, #48	; 0x30
 800a720:	2a09      	cmp	r2, #9
 800a722:	d903      	bls.n	800a72c <_svfiprintf_r+0x1a8>
 800a724:	2b00      	cmp	r3, #0
 800a726:	d0c5      	beq.n	800a6b4 <_svfiprintf_r+0x130>
 800a728:	9105      	str	r1, [sp, #20]
 800a72a:	e7c3      	b.n	800a6b4 <_svfiprintf_r+0x130>
 800a72c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a730:	4604      	mov	r4, r0
 800a732:	2301      	movs	r3, #1
 800a734:	e7f0      	b.n	800a718 <_svfiprintf_r+0x194>
 800a736:	ab03      	add	r3, sp, #12
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	462a      	mov	r2, r5
 800a73c:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <_svfiprintf_r+0x1f8>)
 800a73e:	a904      	add	r1, sp, #16
 800a740:	4638      	mov	r0, r7
 800a742:	f3af 8000 	nop.w
 800a746:	1c42      	adds	r2, r0, #1
 800a748:	4606      	mov	r6, r0
 800a74a:	d1d6      	bne.n	800a6fa <_svfiprintf_r+0x176>
 800a74c:	89ab      	ldrh	r3, [r5, #12]
 800a74e:	065b      	lsls	r3, r3, #25
 800a750:	f53f af2c 	bmi.w	800a5ac <_svfiprintf_r+0x28>
 800a754:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a756:	b01d      	add	sp, #116	; 0x74
 800a758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75c:	ab03      	add	r3, sp, #12
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	462a      	mov	r2, r5
 800a762:	4b06      	ldr	r3, [pc, #24]	; (800a77c <_svfiprintf_r+0x1f8>)
 800a764:	a904      	add	r1, sp, #16
 800a766:	4638      	mov	r0, r7
 800a768:	f000 f87a 	bl	800a860 <_printf_i>
 800a76c:	e7eb      	b.n	800a746 <_svfiprintf_r+0x1c2>
 800a76e:	bf00      	nop
 800a770:	0800b6b0 	.word	0x0800b6b0
 800a774:	0800b6ba 	.word	0x0800b6ba
 800a778:	00000000 	.word	0x00000000
 800a77c:	0800a4cd 	.word	0x0800a4cd
 800a780:	0800b6b6 	.word	0x0800b6b6

0800a784 <_printf_common>:
 800a784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a788:	4616      	mov	r6, r2
 800a78a:	4699      	mov	r9, r3
 800a78c:	688a      	ldr	r2, [r1, #8]
 800a78e:	690b      	ldr	r3, [r1, #16]
 800a790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a794:	4293      	cmp	r3, r2
 800a796:	bfb8      	it	lt
 800a798:	4613      	movlt	r3, r2
 800a79a:	6033      	str	r3, [r6, #0]
 800a79c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7a0:	4607      	mov	r7, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	b10a      	cbz	r2, 800a7aa <_printf_common+0x26>
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	6033      	str	r3, [r6, #0]
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	0699      	lsls	r1, r3, #26
 800a7ae:	bf42      	ittt	mi
 800a7b0:	6833      	ldrmi	r3, [r6, #0]
 800a7b2:	3302      	addmi	r3, #2
 800a7b4:	6033      	strmi	r3, [r6, #0]
 800a7b6:	6825      	ldr	r5, [r4, #0]
 800a7b8:	f015 0506 	ands.w	r5, r5, #6
 800a7bc:	d106      	bne.n	800a7cc <_printf_common+0x48>
 800a7be:	f104 0a19 	add.w	sl, r4, #25
 800a7c2:	68e3      	ldr	r3, [r4, #12]
 800a7c4:	6832      	ldr	r2, [r6, #0]
 800a7c6:	1a9b      	subs	r3, r3, r2
 800a7c8:	42ab      	cmp	r3, r5
 800a7ca:	dc26      	bgt.n	800a81a <_printf_common+0x96>
 800a7cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7d0:	1e13      	subs	r3, r2, #0
 800a7d2:	6822      	ldr	r2, [r4, #0]
 800a7d4:	bf18      	it	ne
 800a7d6:	2301      	movne	r3, #1
 800a7d8:	0692      	lsls	r2, r2, #26
 800a7da:	d42b      	bmi.n	800a834 <_printf_common+0xb0>
 800a7dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4638      	mov	r0, r7
 800a7e4:	47c0      	blx	r8
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	d01e      	beq.n	800a828 <_printf_common+0xa4>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	68e5      	ldr	r5, [r4, #12]
 800a7ee:	6832      	ldr	r2, [r6, #0]
 800a7f0:	f003 0306 	and.w	r3, r3, #6
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	bf08      	it	eq
 800a7f8:	1aad      	subeq	r5, r5, r2
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	6922      	ldr	r2, [r4, #16]
 800a7fe:	bf0c      	ite	eq
 800a800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a804:	2500      	movne	r5, #0
 800a806:	4293      	cmp	r3, r2
 800a808:	bfc4      	itt	gt
 800a80a:	1a9b      	subgt	r3, r3, r2
 800a80c:	18ed      	addgt	r5, r5, r3
 800a80e:	2600      	movs	r6, #0
 800a810:	341a      	adds	r4, #26
 800a812:	42b5      	cmp	r5, r6
 800a814:	d11a      	bne.n	800a84c <_printf_common+0xc8>
 800a816:	2000      	movs	r0, #0
 800a818:	e008      	b.n	800a82c <_printf_common+0xa8>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4652      	mov	r2, sl
 800a81e:	4649      	mov	r1, r9
 800a820:	4638      	mov	r0, r7
 800a822:	47c0      	blx	r8
 800a824:	3001      	adds	r0, #1
 800a826:	d103      	bne.n	800a830 <_printf_common+0xac>
 800a828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a830:	3501      	adds	r5, #1
 800a832:	e7c6      	b.n	800a7c2 <_printf_common+0x3e>
 800a834:	18e1      	adds	r1, r4, r3
 800a836:	1c5a      	adds	r2, r3, #1
 800a838:	2030      	movs	r0, #48	; 0x30
 800a83a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a83e:	4422      	add	r2, r4
 800a840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a848:	3302      	adds	r3, #2
 800a84a:	e7c7      	b.n	800a7dc <_printf_common+0x58>
 800a84c:	2301      	movs	r3, #1
 800a84e:	4622      	mov	r2, r4
 800a850:	4649      	mov	r1, r9
 800a852:	4638      	mov	r0, r7
 800a854:	47c0      	blx	r8
 800a856:	3001      	adds	r0, #1
 800a858:	d0e6      	beq.n	800a828 <_printf_common+0xa4>
 800a85a:	3601      	adds	r6, #1
 800a85c:	e7d9      	b.n	800a812 <_printf_common+0x8e>
	...

0800a860 <_printf_i>:
 800a860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a864:	7e0f      	ldrb	r7, [r1, #24]
 800a866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a868:	2f78      	cmp	r7, #120	; 0x78
 800a86a:	4691      	mov	r9, r2
 800a86c:	4680      	mov	r8, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	469a      	mov	sl, r3
 800a872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a876:	d807      	bhi.n	800a888 <_printf_i+0x28>
 800a878:	2f62      	cmp	r7, #98	; 0x62
 800a87a:	d80a      	bhi.n	800a892 <_printf_i+0x32>
 800a87c:	2f00      	cmp	r7, #0
 800a87e:	f000 80d8 	beq.w	800aa32 <_printf_i+0x1d2>
 800a882:	2f58      	cmp	r7, #88	; 0x58
 800a884:	f000 80a3 	beq.w	800a9ce <_printf_i+0x16e>
 800a888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a88c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a890:	e03a      	b.n	800a908 <_printf_i+0xa8>
 800a892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a896:	2b15      	cmp	r3, #21
 800a898:	d8f6      	bhi.n	800a888 <_printf_i+0x28>
 800a89a:	a101      	add	r1, pc, #4	; (adr r1, 800a8a0 <_printf_i+0x40>)
 800a89c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a8a0:	0800a8f9 	.word	0x0800a8f9
 800a8a4:	0800a90d 	.word	0x0800a90d
 800a8a8:	0800a889 	.word	0x0800a889
 800a8ac:	0800a889 	.word	0x0800a889
 800a8b0:	0800a889 	.word	0x0800a889
 800a8b4:	0800a889 	.word	0x0800a889
 800a8b8:	0800a90d 	.word	0x0800a90d
 800a8bc:	0800a889 	.word	0x0800a889
 800a8c0:	0800a889 	.word	0x0800a889
 800a8c4:	0800a889 	.word	0x0800a889
 800a8c8:	0800a889 	.word	0x0800a889
 800a8cc:	0800aa19 	.word	0x0800aa19
 800a8d0:	0800a93d 	.word	0x0800a93d
 800a8d4:	0800a9fb 	.word	0x0800a9fb
 800a8d8:	0800a889 	.word	0x0800a889
 800a8dc:	0800a889 	.word	0x0800a889
 800a8e0:	0800aa3b 	.word	0x0800aa3b
 800a8e4:	0800a889 	.word	0x0800a889
 800a8e8:	0800a93d 	.word	0x0800a93d
 800a8ec:	0800a889 	.word	0x0800a889
 800a8f0:	0800a889 	.word	0x0800a889
 800a8f4:	0800aa03 	.word	0x0800aa03
 800a8f8:	682b      	ldr	r3, [r5, #0]
 800a8fa:	1d1a      	adds	r2, r3, #4
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	602a      	str	r2, [r5, #0]
 800a900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a908:	2301      	movs	r3, #1
 800a90a:	e0a3      	b.n	800aa54 <_printf_i+0x1f4>
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	6829      	ldr	r1, [r5, #0]
 800a910:	0606      	lsls	r6, r0, #24
 800a912:	f101 0304 	add.w	r3, r1, #4
 800a916:	d50a      	bpl.n	800a92e <_printf_i+0xce>
 800a918:	680e      	ldr	r6, [r1, #0]
 800a91a:	602b      	str	r3, [r5, #0]
 800a91c:	2e00      	cmp	r6, #0
 800a91e:	da03      	bge.n	800a928 <_printf_i+0xc8>
 800a920:	232d      	movs	r3, #45	; 0x2d
 800a922:	4276      	negs	r6, r6
 800a924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a928:	485e      	ldr	r0, [pc, #376]	; (800aaa4 <_printf_i+0x244>)
 800a92a:	230a      	movs	r3, #10
 800a92c:	e019      	b.n	800a962 <_printf_i+0x102>
 800a92e:	680e      	ldr	r6, [r1, #0]
 800a930:	602b      	str	r3, [r5, #0]
 800a932:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a936:	bf18      	it	ne
 800a938:	b236      	sxthne	r6, r6
 800a93a:	e7ef      	b.n	800a91c <_printf_i+0xbc>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	6820      	ldr	r0, [r4, #0]
 800a940:	1d19      	adds	r1, r3, #4
 800a942:	6029      	str	r1, [r5, #0]
 800a944:	0601      	lsls	r1, r0, #24
 800a946:	d501      	bpl.n	800a94c <_printf_i+0xec>
 800a948:	681e      	ldr	r6, [r3, #0]
 800a94a:	e002      	b.n	800a952 <_printf_i+0xf2>
 800a94c:	0646      	lsls	r6, r0, #25
 800a94e:	d5fb      	bpl.n	800a948 <_printf_i+0xe8>
 800a950:	881e      	ldrh	r6, [r3, #0]
 800a952:	4854      	ldr	r0, [pc, #336]	; (800aaa4 <_printf_i+0x244>)
 800a954:	2f6f      	cmp	r7, #111	; 0x6f
 800a956:	bf0c      	ite	eq
 800a958:	2308      	moveq	r3, #8
 800a95a:	230a      	movne	r3, #10
 800a95c:	2100      	movs	r1, #0
 800a95e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a962:	6865      	ldr	r5, [r4, #4]
 800a964:	60a5      	str	r5, [r4, #8]
 800a966:	2d00      	cmp	r5, #0
 800a968:	bfa2      	ittt	ge
 800a96a:	6821      	ldrge	r1, [r4, #0]
 800a96c:	f021 0104 	bicge.w	r1, r1, #4
 800a970:	6021      	strge	r1, [r4, #0]
 800a972:	b90e      	cbnz	r6, 800a978 <_printf_i+0x118>
 800a974:	2d00      	cmp	r5, #0
 800a976:	d04d      	beq.n	800aa14 <_printf_i+0x1b4>
 800a978:	4615      	mov	r5, r2
 800a97a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a97e:	fb03 6711 	mls	r7, r3, r1, r6
 800a982:	5dc7      	ldrb	r7, [r0, r7]
 800a984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a988:	4637      	mov	r7, r6
 800a98a:	42bb      	cmp	r3, r7
 800a98c:	460e      	mov	r6, r1
 800a98e:	d9f4      	bls.n	800a97a <_printf_i+0x11a>
 800a990:	2b08      	cmp	r3, #8
 800a992:	d10b      	bne.n	800a9ac <_printf_i+0x14c>
 800a994:	6823      	ldr	r3, [r4, #0]
 800a996:	07de      	lsls	r6, r3, #31
 800a998:	d508      	bpl.n	800a9ac <_printf_i+0x14c>
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	6861      	ldr	r1, [r4, #4]
 800a99e:	4299      	cmp	r1, r3
 800a9a0:	bfde      	ittt	le
 800a9a2:	2330      	movle	r3, #48	; 0x30
 800a9a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9a8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a9ac:	1b52      	subs	r2, r2, r5
 800a9ae:	6122      	str	r2, [r4, #16]
 800a9b0:	f8cd a000 	str.w	sl, [sp]
 800a9b4:	464b      	mov	r3, r9
 800a9b6:	aa03      	add	r2, sp, #12
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4640      	mov	r0, r8
 800a9bc:	f7ff fee2 	bl	800a784 <_printf_common>
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	d14c      	bne.n	800aa5e <_printf_i+0x1fe>
 800a9c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9c8:	b004      	add	sp, #16
 800a9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ce:	4835      	ldr	r0, [pc, #212]	; (800aaa4 <_printf_i+0x244>)
 800a9d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9d4:	6829      	ldr	r1, [r5, #0]
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9dc:	6029      	str	r1, [r5, #0]
 800a9de:	061d      	lsls	r5, r3, #24
 800a9e0:	d514      	bpl.n	800aa0c <_printf_i+0x1ac>
 800a9e2:	07df      	lsls	r7, r3, #31
 800a9e4:	bf44      	itt	mi
 800a9e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a9ea:	6023      	strmi	r3, [r4, #0]
 800a9ec:	b91e      	cbnz	r6, 800a9f6 <_printf_i+0x196>
 800a9ee:	6823      	ldr	r3, [r4, #0]
 800a9f0:	f023 0320 	bic.w	r3, r3, #32
 800a9f4:	6023      	str	r3, [r4, #0]
 800a9f6:	2310      	movs	r3, #16
 800a9f8:	e7b0      	b.n	800a95c <_printf_i+0xfc>
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	f043 0320 	orr.w	r3, r3, #32
 800aa00:	6023      	str	r3, [r4, #0]
 800aa02:	2378      	movs	r3, #120	; 0x78
 800aa04:	4828      	ldr	r0, [pc, #160]	; (800aaa8 <_printf_i+0x248>)
 800aa06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa0a:	e7e3      	b.n	800a9d4 <_printf_i+0x174>
 800aa0c:	0659      	lsls	r1, r3, #25
 800aa0e:	bf48      	it	mi
 800aa10:	b2b6      	uxthmi	r6, r6
 800aa12:	e7e6      	b.n	800a9e2 <_printf_i+0x182>
 800aa14:	4615      	mov	r5, r2
 800aa16:	e7bb      	b.n	800a990 <_printf_i+0x130>
 800aa18:	682b      	ldr	r3, [r5, #0]
 800aa1a:	6826      	ldr	r6, [r4, #0]
 800aa1c:	6961      	ldr	r1, [r4, #20]
 800aa1e:	1d18      	adds	r0, r3, #4
 800aa20:	6028      	str	r0, [r5, #0]
 800aa22:	0635      	lsls	r5, r6, #24
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	d501      	bpl.n	800aa2c <_printf_i+0x1cc>
 800aa28:	6019      	str	r1, [r3, #0]
 800aa2a:	e002      	b.n	800aa32 <_printf_i+0x1d2>
 800aa2c:	0670      	lsls	r0, r6, #25
 800aa2e:	d5fb      	bpl.n	800aa28 <_printf_i+0x1c8>
 800aa30:	8019      	strh	r1, [r3, #0]
 800aa32:	2300      	movs	r3, #0
 800aa34:	6123      	str	r3, [r4, #16]
 800aa36:	4615      	mov	r5, r2
 800aa38:	e7ba      	b.n	800a9b0 <_printf_i+0x150>
 800aa3a:	682b      	ldr	r3, [r5, #0]
 800aa3c:	1d1a      	adds	r2, r3, #4
 800aa3e:	602a      	str	r2, [r5, #0]
 800aa40:	681d      	ldr	r5, [r3, #0]
 800aa42:	6862      	ldr	r2, [r4, #4]
 800aa44:	2100      	movs	r1, #0
 800aa46:	4628      	mov	r0, r5
 800aa48:	f7f5 fbda 	bl	8000200 <memchr>
 800aa4c:	b108      	cbz	r0, 800aa52 <_printf_i+0x1f2>
 800aa4e:	1b40      	subs	r0, r0, r5
 800aa50:	6060      	str	r0, [r4, #4]
 800aa52:	6863      	ldr	r3, [r4, #4]
 800aa54:	6123      	str	r3, [r4, #16]
 800aa56:	2300      	movs	r3, #0
 800aa58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa5c:	e7a8      	b.n	800a9b0 <_printf_i+0x150>
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	462a      	mov	r2, r5
 800aa62:	4649      	mov	r1, r9
 800aa64:	4640      	mov	r0, r8
 800aa66:	47d0      	blx	sl
 800aa68:	3001      	adds	r0, #1
 800aa6a:	d0ab      	beq.n	800a9c4 <_printf_i+0x164>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	079b      	lsls	r3, r3, #30
 800aa70:	d413      	bmi.n	800aa9a <_printf_i+0x23a>
 800aa72:	68e0      	ldr	r0, [r4, #12]
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	4298      	cmp	r0, r3
 800aa78:	bfb8      	it	lt
 800aa7a:	4618      	movlt	r0, r3
 800aa7c:	e7a4      	b.n	800a9c8 <_printf_i+0x168>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4632      	mov	r2, r6
 800aa82:	4649      	mov	r1, r9
 800aa84:	4640      	mov	r0, r8
 800aa86:	47d0      	blx	sl
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d09b      	beq.n	800a9c4 <_printf_i+0x164>
 800aa8c:	3501      	adds	r5, #1
 800aa8e:	68e3      	ldr	r3, [r4, #12]
 800aa90:	9903      	ldr	r1, [sp, #12]
 800aa92:	1a5b      	subs	r3, r3, r1
 800aa94:	42ab      	cmp	r3, r5
 800aa96:	dcf2      	bgt.n	800aa7e <_printf_i+0x21e>
 800aa98:	e7eb      	b.n	800aa72 <_printf_i+0x212>
 800aa9a:	2500      	movs	r5, #0
 800aa9c:	f104 0619 	add.w	r6, r4, #25
 800aaa0:	e7f5      	b.n	800aa8e <_printf_i+0x22e>
 800aaa2:	bf00      	nop
 800aaa4:	0800b6c1 	.word	0x0800b6c1
 800aaa8:	0800b6d2 	.word	0x0800b6d2

0800aaac <memmove>:
 800aaac:	4288      	cmp	r0, r1
 800aaae:	b510      	push	{r4, lr}
 800aab0:	eb01 0402 	add.w	r4, r1, r2
 800aab4:	d902      	bls.n	800aabc <memmove+0x10>
 800aab6:	4284      	cmp	r4, r0
 800aab8:	4623      	mov	r3, r4
 800aaba:	d807      	bhi.n	800aacc <memmove+0x20>
 800aabc:	1e43      	subs	r3, r0, #1
 800aabe:	42a1      	cmp	r1, r4
 800aac0:	d008      	beq.n	800aad4 <memmove+0x28>
 800aac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aaca:	e7f8      	b.n	800aabe <memmove+0x12>
 800aacc:	4402      	add	r2, r0
 800aace:	4601      	mov	r1, r0
 800aad0:	428a      	cmp	r2, r1
 800aad2:	d100      	bne.n	800aad6 <memmove+0x2a>
 800aad4:	bd10      	pop	{r4, pc}
 800aad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aade:	e7f7      	b.n	800aad0 <memmove+0x24>

0800aae0 <_free_r>:
 800aae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aae2:	2900      	cmp	r1, #0
 800aae4:	d044      	beq.n	800ab70 <_free_r+0x90>
 800aae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaea:	9001      	str	r0, [sp, #4]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f1a1 0404 	sub.w	r4, r1, #4
 800aaf2:	bfb8      	it	lt
 800aaf4:	18e4      	addlt	r4, r4, r3
 800aaf6:	f000 f913 	bl	800ad20 <__malloc_lock>
 800aafa:	4a1e      	ldr	r2, [pc, #120]	; (800ab74 <_free_r+0x94>)
 800aafc:	9801      	ldr	r0, [sp, #4]
 800aafe:	6813      	ldr	r3, [r2, #0]
 800ab00:	b933      	cbnz	r3, 800ab10 <_free_r+0x30>
 800ab02:	6063      	str	r3, [r4, #4]
 800ab04:	6014      	str	r4, [r2, #0]
 800ab06:	b003      	add	sp, #12
 800ab08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab0c:	f000 b90e 	b.w	800ad2c <__malloc_unlock>
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	d908      	bls.n	800ab26 <_free_r+0x46>
 800ab14:	6825      	ldr	r5, [r4, #0]
 800ab16:	1961      	adds	r1, r4, r5
 800ab18:	428b      	cmp	r3, r1
 800ab1a:	bf01      	itttt	eq
 800ab1c:	6819      	ldreq	r1, [r3, #0]
 800ab1e:	685b      	ldreq	r3, [r3, #4]
 800ab20:	1949      	addeq	r1, r1, r5
 800ab22:	6021      	streq	r1, [r4, #0]
 800ab24:	e7ed      	b.n	800ab02 <_free_r+0x22>
 800ab26:	461a      	mov	r2, r3
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	b10b      	cbz	r3, 800ab30 <_free_r+0x50>
 800ab2c:	42a3      	cmp	r3, r4
 800ab2e:	d9fa      	bls.n	800ab26 <_free_r+0x46>
 800ab30:	6811      	ldr	r1, [r2, #0]
 800ab32:	1855      	adds	r5, r2, r1
 800ab34:	42a5      	cmp	r5, r4
 800ab36:	d10b      	bne.n	800ab50 <_free_r+0x70>
 800ab38:	6824      	ldr	r4, [r4, #0]
 800ab3a:	4421      	add	r1, r4
 800ab3c:	1854      	adds	r4, r2, r1
 800ab3e:	42a3      	cmp	r3, r4
 800ab40:	6011      	str	r1, [r2, #0]
 800ab42:	d1e0      	bne.n	800ab06 <_free_r+0x26>
 800ab44:	681c      	ldr	r4, [r3, #0]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	6053      	str	r3, [r2, #4]
 800ab4a:	4421      	add	r1, r4
 800ab4c:	6011      	str	r1, [r2, #0]
 800ab4e:	e7da      	b.n	800ab06 <_free_r+0x26>
 800ab50:	d902      	bls.n	800ab58 <_free_r+0x78>
 800ab52:	230c      	movs	r3, #12
 800ab54:	6003      	str	r3, [r0, #0]
 800ab56:	e7d6      	b.n	800ab06 <_free_r+0x26>
 800ab58:	6825      	ldr	r5, [r4, #0]
 800ab5a:	1961      	adds	r1, r4, r5
 800ab5c:	428b      	cmp	r3, r1
 800ab5e:	bf04      	itt	eq
 800ab60:	6819      	ldreq	r1, [r3, #0]
 800ab62:	685b      	ldreq	r3, [r3, #4]
 800ab64:	6063      	str	r3, [r4, #4]
 800ab66:	bf04      	itt	eq
 800ab68:	1949      	addeq	r1, r1, r5
 800ab6a:	6021      	streq	r1, [r4, #0]
 800ab6c:	6054      	str	r4, [r2, #4]
 800ab6e:	e7ca      	b.n	800ab06 <_free_r+0x26>
 800ab70:	b003      	add	sp, #12
 800ab72:	bd30      	pop	{r4, r5, pc}
 800ab74:	20001488 	.word	0x20001488

0800ab78 <sbrk_aligned>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	4e0e      	ldr	r6, [pc, #56]	; (800abb4 <sbrk_aligned+0x3c>)
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	6831      	ldr	r1, [r6, #0]
 800ab80:	4605      	mov	r5, r0
 800ab82:	b911      	cbnz	r1, 800ab8a <sbrk_aligned+0x12>
 800ab84:	f000 f8bc 	bl	800ad00 <_sbrk_r>
 800ab88:	6030      	str	r0, [r6, #0]
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f000 f8b7 	bl	800ad00 <_sbrk_r>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	d00a      	beq.n	800abac <sbrk_aligned+0x34>
 800ab96:	1cc4      	adds	r4, r0, #3
 800ab98:	f024 0403 	bic.w	r4, r4, #3
 800ab9c:	42a0      	cmp	r0, r4
 800ab9e:	d007      	beq.n	800abb0 <sbrk_aligned+0x38>
 800aba0:	1a21      	subs	r1, r4, r0
 800aba2:	4628      	mov	r0, r5
 800aba4:	f000 f8ac 	bl	800ad00 <_sbrk_r>
 800aba8:	3001      	adds	r0, #1
 800abaa:	d101      	bne.n	800abb0 <sbrk_aligned+0x38>
 800abac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800abb0:	4620      	mov	r0, r4
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	2000148c 	.word	0x2000148c

0800abb8 <_malloc_r>:
 800abb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abbc:	1ccd      	adds	r5, r1, #3
 800abbe:	f025 0503 	bic.w	r5, r5, #3
 800abc2:	3508      	adds	r5, #8
 800abc4:	2d0c      	cmp	r5, #12
 800abc6:	bf38      	it	cc
 800abc8:	250c      	movcc	r5, #12
 800abca:	2d00      	cmp	r5, #0
 800abcc:	4607      	mov	r7, r0
 800abce:	db01      	blt.n	800abd4 <_malloc_r+0x1c>
 800abd0:	42a9      	cmp	r1, r5
 800abd2:	d905      	bls.n	800abe0 <_malloc_r+0x28>
 800abd4:	230c      	movs	r3, #12
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	2600      	movs	r6, #0
 800abda:	4630      	mov	r0, r6
 800abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe0:	4e2e      	ldr	r6, [pc, #184]	; (800ac9c <_malloc_r+0xe4>)
 800abe2:	f000 f89d 	bl	800ad20 <__malloc_lock>
 800abe6:	6833      	ldr	r3, [r6, #0]
 800abe8:	461c      	mov	r4, r3
 800abea:	bb34      	cbnz	r4, 800ac3a <_malloc_r+0x82>
 800abec:	4629      	mov	r1, r5
 800abee:	4638      	mov	r0, r7
 800abf0:	f7ff ffc2 	bl	800ab78 <sbrk_aligned>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	4604      	mov	r4, r0
 800abf8:	d14d      	bne.n	800ac96 <_malloc_r+0xde>
 800abfa:	6834      	ldr	r4, [r6, #0]
 800abfc:	4626      	mov	r6, r4
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	d140      	bne.n	800ac84 <_malloc_r+0xcc>
 800ac02:	6823      	ldr	r3, [r4, #0]
 800ac04:	4631      	mov	r1, r6
 800ac06:	4638      	mov	r0, r7
 800ac08:	eb04 0803 	add.w	r8, r4, r3
 800ac0c:	f000 f878 	bl	800ad00 <_sbrk_r>
 800ac10:	4580      	cmp	r8, r0
 800ac12:	d13a      	bne.n	800ac8a <_malloc_r+0xd2>
 800ac14:	6821      	ldr	r1, [r4, #0]
 800ac16:	3503      	adds	r5, #3
 800ac18:	1a6d      	subs	r5, r5, r1
 800ac1a:	f025 0503 	bic.w	r5, r5, #3
 800ac1e:	3508      	adds	r5, #8
 800ac20:	2d0c      	cmp	r5, #12
 800ac22:	bf38      	it	cc
 800ac24:	250c      	movcc	r5, #12
 800ac26:	4629      	mov	r1, r5
 800ac28:	4638      	mov	r0, r7
 800ac2a:	f7ff ffa5 	bl	800ab78 <sbrk_aligned>
 800ac2e:	3001      	adds	r0, #1
 800ac30:	d02b      	beq.n	800ac8a <_malloc_r+0xd2>
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	442b      	add	r3, r5
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	e00e      	b.n	800ac58 <_malloc_r+0xa0>
 800ac3a:	6822      	ldr	r2, [r4, #0]
 800ac3c:	1b52      	subs	r2, r2, r5
 800ac3e:	d41e      	bmi.n	800ac7e <_malloc_r+0xc6>
 800ac40:	2a0b      	cmp	r2, #11
 800ac42:	d916      	bls.n	800ac72 <_malloc_r+0xba>
 800ac44:	1961      	adds	r1, r4, r5
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	6025      	str	r5, [r4, #0]
 800ac4a:	bf18      	it	ne
 800ac4c:	6059      	strne	r1, [r3, #4]
 800ac4e:	6863      	ldr	r3, [r4, #4]
 800ac50:	bf08      	it	eq
 800ac52:	6031      	streq	r1, [r6, #0]
 800ac54:	5162      	str	r2, [r4, r5]
 800ac56:	604b      	str	r3, [r1, #4]
 800ac58:	4638      	mov	r0, r7
 800ac5a:	f104 060b 	add.w	r6, r4, #11
 800ac5e:	f000 f865 	bl	800ad2c <__malloc_unlock>
 800ac62:	f026 0607 	bic.w	r6, r6, #7
 800ac66:	1d23      	adds	r3, r4, #4
 800ac68:	1af2      	subs	r2, r6, r3
 800ac6a:	d0b6      	beq.n	800abda <_malloc_r+0x22>
 800ac6c:	1b9b      	subs	r3, r3, r6
 800ac6e:	50a3      	str	r3, [r4, r2]
 800ac70:	e7b3      	b.n	800abda <_malloc_r+0x22>
 800ac72:	6862      	ldr	r2, [r4, #4]
 800ac74:	42a3      	cmp	r3, r4
 800ac76:	bf0c      	ite	eq
 800ac78:	6032      	streq	r2, [r6, #0]
 800ac7a:	605a      	strne	r2, [r3, #4]
 800ac7c:	e7ec      	b.n	800ac58 <_malloc_r+0xa0>
 800ac7e:	4623      	mov	r3, r4
 800ac80:	6864      	ldr	r4, [r4, #4]
 800ac82:	e7b2      	b.n	800abea <_malloc_r+0x32>
 800ac84:	4634      	mov	r4, r6
 800ac86:	6876      	ldr	r6, [r6, #4]
 800ac88:	e7b9      	b.n	800abfe <_malloc_r+0x46>
 800ac8a:	230c      	movs	r3, #12
 800ac8c:	603b      	str	r3, [r7, #0]
 800ac8e:	4638      	mov	r0, r7
 800ac90:	f000 f84c 	bl	800ad2c <__malloc_unlock>
 800ac94:	e7a1      	b.n	800abda <_malloc_r+0x22>
 800ac96:	6025      	str	r5, [r4, #0]
 800ac98:	e7de      	b.n	800ac58 <_malloc_r+0xa0>
 800ac9a:	bf00      	nop
 800ac9c:	20001488 	.word	0x20001488

0800aca0 <_realloc_r>:
 800aca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca4:	4680      	mov	r8, r0
 800aca6:	4614      	mov	r4, r2
 800aca8:	460e      	mov	r6, r1
 800acaa:	b921      	cbnz	r1, 800acb6 <_realloc_r+0x16>
 800acac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acb0:	4611      	mov	r1, r2
 800acb2:	f7ff bf81 	b.w	800abb8 <_malloc_r>
 800acb6:	b92a      	cbnz	r2, 800acc4 <_realloc_r+0x24>
 800acb8:	f7ff ff12 	bl	800aae0 <_free_r>
 800acbc:	4625      	mov	r5, r4
 800acbe:	4628      	mov	r0, r5
 800acc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc4:	f000 f838 	bl	800ad38 <_malloc_usable_size_r>
 800acc8:	4284      	cmp	r4, r0
 800acca:	4607      	mov	r7, r0
 800accc:	d802      	bhi.n	800acd4 <_realloc_r+0x34>
 800acce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800acd2:	d812      	bhi.n	800acfa <_realloc_r+0x5a>
 800acd4:	4621      	mov	r1, r4
 800acd6:	4640      	mov	r0, r8
 800acd8:	f7ff ff6e 	bl	800abb8 <_malloc_r>
 800acdc:	4605      	mov	r5, r0
 800acde:	2800      	cmp	r0, #0
 800ace0:	d0ed      	beq.n	800acbe <_realloc_r+0x1e>
 800ace2:	42bc      	cmp	r4, r7
 800ace4:	4622      	mov	r2, r4
 800ace6:	4631      	mov	r1, r6
 800ace8:	bf28      	it	cs
 800acea:	463a      	movcs	r2, r7
 800acec:	f7ff fbb8 	bl	800a460 <memcpy>
 800acf0:	4631      	mov	r1, r6
 800acf2:	4640      	mov	r0, r8
 800acf4:	f7ff fef4 	bl	800aae0 <_free_r>
 800acf8:	e7e1      	b.n	800acbe <_realloc_r+0x1e>
 800acfa:	4635      	mov	r5, r6
 800acfc:	e7df      	b.n	800acbe <_realloc_r+0x1e>
	...

0800ad00 <_sbrk_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4d06      	ldr	r5, [pc, #24]	; (800ad1c <_sbrk_r+0x1c>)
 800ad04:	2300      	movs	r3, #0
 800ad06:	4604      	mov	r4, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	602b      	str	r3, [r5, #0]
 800ad0c:	f7ff fac6 	bl	800a29c <_sbrk>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_sbrk_r+0x1a>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_sbrk_r+0x1a>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	20001490 	.word	0x20001490

0800ad20 <__malloc_lock>:
 800ad20:	4801      	ldr	r0, [pc, #4]	; (800ad28 <__malloc_lock+0x8>)
 800ad22:	f000 b811 	b.w	800ad48 <__retarget_lock_acquire_recursive>
 800ad26:	bf00      	nop
 800ad28:	20001494 	.word	0x20001494

0800ad2c <__malloc_unlock>:
 800ad2c:	4801      	ldr	r0, [pc, #4]	; (800ad34 <__malloc_unlock+0x8>)
 800ad2e:	f000 b80c 	b.w	800ad4a <__retarget_lock_release_recursive>
 800ad32:	bf00      	nop
 800ad34:	20001494 	.word	0x20001494

0800ad38 <_malloc_usable_size_r>:
 800ad38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad3c:	1f18      	subs	r0, r3, #4
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	bfbc      	itt	lt
 800ad42:	580b      	ldrlt	r3, [r1, r0]
 800ad44:	18c0      	addlt	r0, r0, r3
 800ad46:	4770      	bx	lr

0800ad48 <__retarget_lock_acquire_recursive>:
 800ad48:	4770      	bx	lr

0800ad4a <__retarget_lock_release_recursive>:
 800ad4a:	4770      	bx	lr

0800ad4c <_init>:
 800ad4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad4e:	bf00      	nop
 800ad50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad52:	bc08      	pop	{r3}
 800ad54:	469e      	mov	lr, r3
 800ad56:	4770      	bx	lr

0800ad58 <_fini>:
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5a:	bf00      	nop
 800ad5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad5e:	bc08      	pop	{r3}
 800ad60:	469e      	mov	lr, r3
 800ad62:	4770      	bx	lr
